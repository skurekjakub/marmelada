var longToByteArray=function(e){for(var t=[0,0,0,0],o=0;o<t.length;o++){var n=255&e;t[o]=n,e=(e-n)/256}return t},pageIdToB64=function(e){return btoa(longToByteArray(e).map(String.fromCharCode).map((function(e){return e[0]})).join("")).replace(/=/g,"")},generateTinyId=function(e){for(var t=!0,o="",n=e.length-1;n>=0;n--){var a=e.charAt(n);"="!==a&&"\n"!=a&&(t&&"A"===a||(t=!1,o="/"===a?"-"+o:"+"===a?"_"+o:a+o))}if(o.length>0){var i=o.charAt(o.length-1);"-"!==i&&"_"!==i||(o+="/")}return o};CONFIG.CONFLUENCE_PAGE_TINYID=generateTinyId(pageIdToB64(CONFIG.CONFLUENCE_PAGE_ID));var displayPageUrlId=function(e){var t=CONFIG.CONFLUENCE_PAGE_TINYID;t?$.ajax({url:CONFIG.HELPSERVICE_URLID_ENDPOINT+t,success:function(e){var o=JSON.parse(e);o.hasOwnProperty("Identifier")?$("#pageUrlId").text(" Help Service ID: "+o.Identifier+" (TinyID: "+t+")"):$("#pageUrlId").text(" Help Service ID: "+o.Error)},timeout:800}):$("#pageUrlId").text("Error when generating the page tiny ID. See the console for details.")};Prism.plugins.NormalizeWhitespace.setDefaults({"remove-trailing":!0,"remove-indent":!0,"left-trim":!0,"right-trim":!0,"remove-initial-line-feed":!1,"tabs-to-spaces":4});var setExportPdf=function(){var e=$("body").attr("data-pagetitle");$("#export-pdf").attr("href","../pdf/".concat(CONFIG.CONFLUENCE_SPACE_KEY.toLowerCase(),"/").concat(e.toLowerCase().replace(/ /g,"-"),".pdf"))};$(document).ready(setExportPdf);var versionSwitcherData,openPageLink=function(e){CONFIG.CONFLUENCE_PAGE_TINYID?togglePageLinkPanel(CONFIG.BASE_URL+"/x/"+CONFIG.CONFLUENCE_PAGE_TINYID):togglePageLinkPanel(window.location.href)},togglePageLinkPanel=function(e){$("#page-link-textbox").attr("value",e),$("#page-link-panel").hasClass("show")?$("#page-link-panel").removeClass("show"):$("#page-link-panel").addClass("show")},copyPageLinkToClip=function(){void 0===navigator.clipboard?Snackbar.show({text:"An error occurred while copying the page link to the clipboard",pos:"top-right",showAction:!1,customClass:"box-general box-warning",duration:"3500",backgroundColor:"#FFEBEB",textColor:"#151515"}):navigator.clipboard.writeText($("#page-link-textbox").attr("value")).then((function(){Snackbar.show({text:"Page link copied",pos:"top-right",showAction:!1,customClass:"box-general box-info",duration:"2500",backgroundColor:"#EEF3FC",textColor:"#151515"})})).catch((function(){Snackbar.show({text:"An error occurred while copying the page link to the clipboard",pos:"top-right",showAction:!1,customClass:"box-general box-warning",duration:"3500",backgroundColor:"#FFEBEB",textColor:"#151515"})}))},closePageLink=function(){return $("#page-link-panel").removeClass("show")},getVersionTextFromVersionId=function(e){return DOCUMENTATION_VERSIONS.find((function(t){return t.versionId==e})).versionText},getVersionTextFromHelpServiceId=function(e){return DOCUMENTATION_VERSIONS.find((function(t){return t.helpServiceVersion==e})).versionText},loadVersionLinkData=function(e){$.ajax({dataType:"json",url:CONFIG.HELPSERVICE_LISTALTVERSIONLINKS_ENDPOINT+e,timeout:2e3,tryCount:0,retryLimit:3,success:function(e){versionSwitcherData=e},error:function(e,t,o){if("timeout"==t)return this.tryCount++,this.tryCount<=this.retryLimit?void $.ajax(this):void 0}})},versionLinkUpdateDone=!1,insertVersionLinks=function(e){void 0!==e?(versionLinkUpdateDone||(e.forEach((function(e){var t=$(".js-menuDdl-version a:contains("+getVersionTextFromHelpServiceId(e.VersionUrlId)+")");t&&(t.attr("href",e.Url),t.addClass(" populated"))})),$(".js-menuDdl-version a").toArray().forEach((function(e){e.classList.contains("populated")||(e.classList.add("empty"),"Xperience 13"===e.textContent?(e.setAttribute("href",CONFIG.XPERIENCE13_MISSING_PAGES_URL+"?ref="+$(location).attr("href").split("/").pop()),e.setAttribute("title","The current page is not available in the Xperience 13 documentation. \r\nYou will be redirected to a general guidance page.")):"Xperience by Kentico"===e.textContent?(e.setAttribute("href",CONFIG.XP_MISSING_PAGES_URL+"?ref="+$(location).attr("href").split("/").pop()),e.setAttribute("title","The current page is not available in the Xperience by Kentico documentation. \r\nYou will be redirected to a general guidance page.")):e.setAttribute("title","The current page is not available for this documentation version. \r\nYou will be redirected to the home page for this version."))})),versionLinkUpdateDone=!0),openCloseVersionDdl()):openCloseVersionDdl()},insertSearchVersionLinks=function(){versionLinkUpdateDone||($(".js-menuDdl-version a").each((function(){var e=this.href.split("/"),t=getDocVersion(e[e.length-1]),o="/"!==this.href.slice(-1)?"/":"";if(CONFIG.CONFLUENCE_DEVMODEL_VERSIONSWITCHER_WHITELIST.indexOf(t)>=0)this.href=this.href+o+"search"+window.location.search;else{for(var n=window.location.search.split("&"),a=n.length;a-- >0;)0==n[a].indexOf("l=")&&n.splice(a,1);this.href=this.href+o+"search"+n.join("&")}})),versionLinkUpdateDone=!0);openCloseVersionDdl()},openCloseDocTypeDdl=function(){$(".js-menuDdl-docType").toggleClass("show"),$(".js-menuDdlBtn-docType").toggleClass("opened")},openCloseVersionDdl=function(){$(".js-menuDdl-version").toggleClass("show"),$(".js-menuDdlBtn-version").toggleClass("opened")},getDocType=function(e){return/api/i.test(e)?"API Examples":/tutorial/i.test(e)?"Tutorial":"Documentation"},getDocVersion=function(e){switch(e){case"K12SP":case"API12SP":case"K12SPTutorial":return"12sp";case"XP":case"Tutorial":case"Api":return"xp";default:return e.replace(/[^0-9]/g,"")}},getVersionLinkTitle=function(e){return"12sp"===e?"Kentico 12 Service Pack":getVersionTextFromVersionId(e)},buildDocLink=function(e,t,o,n){var a,i="/";if(-1===CONFIG.OBSOLETE_SPACE_KEY_FORMAT_VERSIONS.indexOf(e)){var r="xp"===e?"":e;switch(t){case"Tutorial":a=r+"tutorial";break;case"API Examples":a=r+"api";break;default:a=e}a===CONFIG.DOC_ROOT_URL_SPACE_KEY&&(a="",i="/")}else switch(t){case"Tutorial":a="k"+e+"tutorial";break;case"API Examples":a="api"+e;break;default:a="k"+e}var s=o?t:getVersionTextFromVersionId(e);return'<li><a href="'+i+a+'"'+('class="'+(n?" current":"")+'"')+(' title="'+(o?t:getVersionLinkTitle(e))+'"')+">"+s+"</a></li>"},loadDocVersionHeaderList=function(e,t){var o=$('[name="confluence-user-logged-in"]').attr("content"),n=DOCUMENTATION_VERSIONS.filter((function(t){return("API Examples"!==e||"8"!==t.versionId&&"81"!==t.versionId&&"82"!==t.versionId)&&("true"===o||t.versionId!==CONFIG.DEV_DOCUMENTATION_VERSION_ID)&&"12"!==t.versionId})),a="";n.forEach((function(o){o.versionId==CONFIG.NEWEST_UNSUPPORTED_VERSION_ID&&(a+='<li class="js-unsupported-versions"><button class="header-ddl-button-nested js-unsupported-versions-button">All versions</button><ul class="menu-ddl-content nested-list docVersion js-unsupported-versions-list">'),a+=buildDocLink(o.versionId,e,!1,o.versionId==t)})),a+="</ul></li>",$(".js-menuDdlBtn-version").html(getVersionTextFromVersionId(t)),$(".js-menuDdl-version").html(a)};$(document).on("click",".js-unsupported-versions-button",(function(){$(".js-unsupported-versions-list").toggleClass("show"),$(".js-unsupported-versions-list").toggleClass("opened")}));var loadDocTypeHeaderList=function(e,t){var o=["Documentation","Tutorial","API Examples"];o=o.filter((function(t){return"8"!==e&&"81"!==e&&"82"!==e||"API Examples"!==t}));var n="";o.forEach((function(o){n+=buildDocLinkSpecial(e,o,!0,o==t)})),$(".js-menuDdlBtn-docType").html(t),$(".js-menuDdl-docType").html(n)},buildDocLinkSpecial=function(e,t,o,n){var a,i="../";if(-1===CONFIG.OBSOLETE_SPACE_KEY_FORMAT_VERSIONS.indexOf(e)){var r="xp"===e?"":e;switch(t){case"Tutorial":a=r+"tutorial";break;case"API Examples":a=r+"api";break;default:a=e}a===CONFIG.DOC_ROOT_URL_SPACE_KEY&&(a="",i="../")}else switch(t){case"Tutorial":a="k"+e+"tutorial";break;case"API Examples":a="api"+e;break;default:a="k"+e}var s=o?t:getVersionTextFromVersionId(e);return'<li><a href="'+i+a+'"'+('class="'+(n?" current":"")+'"')+(' title="'+(o?t:getVersionLinkTitle(e))+'"')+">"+s+"</a></li>"},loadHeaderLists=function(){var e=getDocVersion(CONFIG.CONFLUENCE_SPACE_KEY),t=getDocType(CONFIG.CONFLUENCE_SPACE_KEY);loadDocTypeHeaderList(e,t),loadDocVersionHeaderList(t,e)},registerPageTreeEventHandler=function(){$("ul.ht-pages-nav-top").on("click",".sp-toggle",(function(){var e=$(this).parent("li");e.is(".collapsed")?e.removeClass("collapsed").addClass("open"):e.is(".open")&&e.removeClass("open").addClass("collapsed")}))};$(document).ready(registerPageTreeEventHandler);var closeHeaderDropDowns=function(e){var t=$(".js-menuDdlBtn-docType"),o=$(".js-menuDdlBtn-version"),n=$(".js-unsupported-versions-button"),a=$(".js-unsupported-versions-list"),i=$(".js-menuDdlBtn-devModel"),r=$(".js-menuDdl-devModel");n.is(e.target)||(t.is(e.target)||0!==t.has(e.target).length||($(".js-menuDdl-docType").removeClass("show"),t.removeClass("opened")),o.is(e.target)||0!==o.has(e.target).length||($(".js-menuDdl-version").removeClass("show"),o.removeClass("opened"),a.removeClass("opened"),a.removeClass("show")),i.is(e.target)||0!==r.has(e.target).length||(r.removeClass("show"),i.removeClass("opened")))};$(document).ready(loadHeaderLists),$(document).click(closeHeaderDropDowns);var isDevModelSwitcherSupported=function(){var e=CONFIG.CONFLUENCE_SPACE_KEY;return!e.toLowerCase().includes("api")&&CONFIG.CONFLUENCE_DEVMODEL_VERSIONSWITCHER_WHITELIST.indexOf(getDocVersion(e))>=0},getPageLabels=function(){var e=$('[name="confluence-page-labels"]').attr("content");return e=(e=e.slice(1,-1)).split(", ")},setDevModelWebStorage=function(){if(isDevModelSwitcherSupported()&&"undefined"!=typeof Storage){var e=getPageLabels();if(e.indexOf("mvc")>=0)return void(localStorage.kenticoDocumentationMode="mvc");if(e.indexOf("pe")>=0)return void(localStorage.kenticoDocumentationMode="pe");var t=window.location.search;if(t.indexOf("devModel=mvc")>=0)return void(localStorage.kenticoDocumentationMode="mvc");if(t.indexOf("devModel=pe")>=0)return void(localStorage.kenticoDocumentationMode="pe");localStorage.kenticoDocumentationMode&&null!==localStorage.getItem("kenticoDocumentationMode")||(localStorage.kenticoDocumentationMode="mvc")}},getCurrentDevModel=function(){var e=getPageLabels();if(e.indexOf("mvc")>=0)return"mvc";if(e.indexOf("pe")>=0)return"pe";var t=window.location.search;return t.indexOf("devModel=mvc")>=0?"all|mvc":t.indexOf("devModel=pe")>=0?"all|pe":"undefined"!=typeof Storage&&localStorage.kenticoDocumentationMode?"all|"+localStorage.kenticoDocumentationMode:"all|mvc"},translateToHelpServiceVersion=function(e){return DOCUMENTATION_VERSIONS.find((function(t){return t.versionId==e})).helpServiceVersion},switchDevModelStorage=function(e){"undefined"!=typeof Storage&&(localStorage.kenticoDocumentationMode=e)},openCloseDevModelDdl=function(){$(".js-menuDdl-devModel").toggleClass("show"),$(".js-menuDdlBtn-devModel").toggleClass("opened")},devModelMap={mvc:"MVC",pe:"Portal Engine"},initAltDevModelLink=function(){if(isDevModelSwitcherSupported()){var e=getCurrentDevModel(),t=!1;0===e.indexOf("all|")&&(t=!0,e=e.split("|")[1]);var o="mvc"==e?"pe":"mvc";$(".js-"+e+"-model-link").addClass("active");var n=$(".js-"+o+"-model-link");if(n){if($(".js-menuDdlBtn-devModel").html(devModelMap[e]),t)return n.on("click",(function(){switchDevModelStorage(o);var e=window.location.pathname.split("/");if("search"==e[e.length-1])kenticoThemeOpenSearchResultsPage();else{var t=window.location.href.replace(window.location.hash,"");t=(t=t.replace("#","")).split("?devModel")[0],window.location.href=t}})),void currentModelElement.on("click",(function(e){e.preventDefault(),openCloseDevModelDdl()}));var a=$("#dev-model-alt").attr("data-devmodel-alt");if(a){var i=getDocVersion(CONFIG.CONFLUENCE_SPACE_KEY),r=translateToHelpServiceVersion(i),s=CONFIG.HELPSERVICE_LINKMAPPER_ENDPOINT+r+"&link="+a;n.on("click",(function(){switchDevModelStorage(o),window.location.href=s}))}else{$(".js-menuDdlBtn-devModel").prop("disabled",!0).prop("title","");var c="mvc"==e?"MVC":"Portal Engine",l="mvc"==o?"MVC":"Portal Engine",d='<a id="alt-model-home-link" href="'+($("#ajs-context-path").attr("content")+"/"+CONFIG.CONFLUENCE_SPACE_KEY.toLowerCase()+"?devModel="+o)+'">'+l+" Home page</a>";$(".js-dev-model-unavailable-text").html("<p>This page is only available for the "+c+" development model.<br />You can switch to the "+d+".</p>")}}}};$(document).ready(setDevModelWebStorage),$(document).ready(initAltDevModelLink);var setDevFrameworkButtons=function(){$(".js-dev-model-switch-core").click((function(){coreFrameworkOnClick()})),$(".js-dev-model-switch-mvc").click((function(){mvcFrameworkOnClick()})),$(".js-dev-model-switch-indicator").click((function(e){"core"===localStorage.kenticoDocumentationFramework?mvcFrameworkOnClick():coreFrameworkOnClick()})),$(".js-dev-model-switch-mvc, .js-dev-model-switch-core ").on("keyup",(function(e){e.preventDefault(),e.stopPropagation(),32===e.keyCode&&("core"===localStorage.kenticoDocumentationFramework?mvcFrameworkOnClick():coreFrameworkOnClick())}))},setDevFrameworkCheckbox=function(){"mvc"===localStorage.kenticoDocumentationFramework?($(".js-dev-model-switch-mvc").attr("checked",!0),$(".js-dev-model-switch").addClass("is-dev-model-mvc").removeClass("is-dev-model-core")):"core"===localStorage.kenticoDocumentationFramework&&($(".js-dev-model-switch-core").attr("checked",!0),$(".js-dev-model-switch").addClass("is-dev-model-core").removeClass("is-dev-model-mvc"))},setCorrectFramework=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(localStorage.kenticoDocumentationFramework&&null!==localStorage.getItem("kenticoDocumentationFramework")||(localStorage.kenticoDocumentationFramework="mvc"),e){var t=new URLSearchParams(window.location.search).get("devmodel");"mvc"!==t&&"core"!==t||(localStorage.kenticoDocumentationFramework=t)}"mvc"===localStorage.kenticoDocumentationFramework&&($(".dev-model-core").css("display","none"),$(".dev-model-mvc").css("display","block")),"core"===localStorage.kenticoDocumentationFramework&&($(".dev-model-mvc").css("display","none"),$(".dev-model-core").css("display","block")),setDevFrameworkCheckbox()},setHoverTitles=function(){var e="Switch the displayed development model in the switcher under the page heading";$(".dev-model-core .codeContent").attr("title",e),$(".dev-model-mvc .codeContent").attr("title",e)},coreFrameworkOnClick=function(){localStorage.kenticoDocumentationFramework="core",setCorrectFramework()},mvcFrameworkOnClick=function(){localStorage.kenticoDocumentationFramework="mvc",setCorrectFramework()},showDevFrameworkSwitcher=function(){$(".js-dev-model-switch").removeClass("is-hidden")},setDevFrameworkSwitcher=function(){$(".dev-model-core").length+$(".dev-model-mvc").length>0&&(setCorrectFramework(!0),setDevFrameworkButtons(),setDevFrameworkCheckbox(),showDevFrameworkSwitcher(),setHoverTitles())};$(document).ready(setDevFrameworkSwitcher);var initSidebar=function e(){if(null!==$(".ht-nav-page-link").first())if($(".ht-nav-page-link.current").length){var t=$("div.ht-sidebar-content"),o=$("#ht-headerbar").outerHeight(!0),n=$(".ht-nav-page-link.current")[0].getBoundingClientRect().top;0===$("div.ht-sidebar-content")[0].scrollTop&&t.animate({scrollTop:Math.round(n-o-t.outerHeight()/2.5)},0),$("#ht-sidebar").addClass("animate")}else window.requestAnimationFrame(e)};window.requestAnimationFrame(initSidebar);var kenticoThemeOpenSearchResultsPage=function(){var e=$(".search-input").val();e=encodeURIComponent(e);var t=document.querySelector("#check-show-all-search-results"),o=!(t&&t.checked);window.SCROLL_WEBHELP&&window.SCROLL_WEBHELP.search&&(window.SCROLL_WEBHELP.search.navigateToSearchPage(e,o),$("#ht-search").find(".ht-search-dropdown").removeClass("open"),$(".ht-search-dropdown a.hover").removeClass("hover"),$(document).unbind("keydown"))},toggleSearchSuggestions=function(e){var t=$("input.search-input"),o=$(".ht-search-dropdown"),n=$("#searchButton"),a=$(".ht-search-dropdown a.hover");t.is(e.target)||0!==t.has(e.target).length||o.is(e.target)||0!==o.has(e.target).length?$(".ht-search-dropdown li.search-key").length&&o.addClass("open"):(o.removeClass("open"),a.removeClass("hover"),!n.is(e.target)&&0===n.has(e.target).length&&window.innerWidth<=800&&window.innerWidth>499&&t.removeClass("show"))};$(document).click(toggleSearchSuggestions);var setContentTopPadding=function(){var e=$(".searchbox-area-behind").first();e.length&&$(".ht-content").first().css("padding-top",e.outerHeight(!0)+"px")};$(document).ready(setContentTopPadding),$(window).resize(setContentTopPadding);var setFooterWidth=function(){var e=document.documentElement.clientWidth,t=$("#ht-wrap-container").width(),o=$("#ht-wrap-container").offset().left,n=e-t-o;$("#ht-footer").css({right:-n,"padding-right":n,left:-o,"padding-left":o})};function onElementHeightChange(e,t){var o,n=e.clientHeight;!function a(){o=e.clientHeight,n!=o&&t(),n=o,e.onElementHeightChangeTimer&&clearTimeout(e.onElementHeightChangeTimer),e.onElementHeightChangeTimer=setTimeout(a,200)}()}$(document).ready(setFooterWidth),$(window).resize(setFooterWidth),onElementHeightChange(document.body,setFooterWidth),$("span.expand-control").click((function(){var e=$(this).parent().next(),t=$(this).find("span.expand-control-text");e.hasClass("collapse")?(e.removeClass("collapse"),t.text("Collapse source")):(e.addClass("collapse"),t.text("Expand source"))}));var getPageIdIfEditingAllowed=function(){var e=$("#sp-viewport-control-opener").length,t=$(".search-input").is(":focus");if(0!=e&&!t){var o=$("body").attr("pageid");return o||0}return 0};function openLink(e,t){t?window.open(e,"_blank").focus():window.open(e,"_self")}$("p").each((function(){""==$(this).text().trim()&&0==$(this).children().length&&$(this).hide()}));var showHideSearchTips=function(){$("#search-tips").hasClass("show")?hideFrontLayer():showFrontLayer()},showFrontLayer=function(){$("#search-tips").addClass("show"),document.getElementById("search-tips-mask").style.visibility="visible",document.getElementById("search-tips").style.visibility="visible"},hideFrontLayer=function(){document.getElementById("search-tips-mask").style.visibility="hidden",document.getElementById("search-tips").style.visibility="hidden",$("#search-tips").removeClass("show")},getCookie=function(e){for(var t=e+"=",o=decodeURIComponent(document.cookie).split(";"),n=0;n<o.length;n++){for(var a=o[n];" "==a.charAt(0);)a=a.substring(1);if(0==a.indexOf(t))return a.substring(t.length,a.length)}return""},initCookieLevel=function(){""!==getCookie("xperience.cookieconsentlevel")&&($.cookie("xperience.cookieconsentlevel"),1?(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"consent.default",consent:{functionality_storage:"granted",personalization_storage:"denied",analytics_storage:"denied",ad_storage:"denied",security_storage:"denied"}})):2?(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"consent.default",consent:{functionality_storage:"granted",personalization_storage:"granted",analytics_storage:"denied",ad_storage:"denied",security_storage:"denied"}})):3?(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"consent.default",consent:{functionality_storage:"granted",personalization_storage:"granted",analytics_storage:"granted",ad_storage:"denied",security_storage:"denied"}})):4&&(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"consent.default",consent:{functionality_storage:"granted",personalization_storage:"granted",analytics_storage:"granted",ad_storage:"granted",security_storage:"granted"}})))};$(document).ready(initCookieLevel);var createCookie=function(e,t,o,n){console.log("creating cookie ".concat(e," ").concat(t," ").concat(o," ").concat(n));var a;n="; domain="+n;if(o){var i=new Date;i.setTime(i.getTime()+24*o*60*60*1e3),a="; expires="+i.toUTCString()}else a="";document.cookie=e+"="+t+a+"; path=/"+n},eraseCookie=function(e){createCookie(e,"",-1,"")},consentWithCookieUsage=function(){$("#cookie-banner").attr("style","display:none;"),createCookie("xperience.cookielevelselection",!0,365,window.location.host)},hideCookieConsentBanner=function(){!document.cookie.replace(/(?:(?:^|.*;\s*)xperience.cookielevelselection\s*\=\s*([^;]*).*$)|^.*$/,"$1")&&navigator.cookieEnabled||$("#cookie-banner").attr("style","display:none;")},setCookieLevel=function(e){e="marketing"===(e=e)?4:"analytical"===e?3:"preference"===e?2:1,consentWithCookieUsage(),createCookie("xperience.cookieconsentlevel",e,365,window.location.host),1===e?(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"consent.update",consent:{functionality_storage:"granted",personalization_storage:"denied",analytics_storage:"denied",ad_storage:"denied",security_storage:"denied"}})):3===e&&(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"consent.update",consent:{functionality_storage:"granted",personalization_storage:"granted",analytics_storage:"granted",ad_storage:"denied",security_storage:"denied"}}))};$(document).ready((function(){hideCookieConsentBanner()}));var copyHeadingLink=function(e){var t=$(e.target),o=window.location.origin+window.location.pathname+"#"+t.parent().attr("id");void 0===navigator.clipboard?Snackbar.show({text:"An error occurred while copying the heading link to the clipboard",pos:"top-right",showAction:!1,customClass:"box-general box-warning",duration:"3500",backgroundColor:"#FFEBEB",textColor:"#151515"}):navigator.clipboard.writeText(o).then((function(){Snackbar.show({text:"Heading link copied",pos:"top-right",showAction:!1,customClass:"box-general box-info",duration:"2500",backgroundColor:"#EEF3FC",textColor:"#151515"}),t.addClass("copied")})).catch((function(){Snackbar.show({text:"An error occurred while copying the heading link to the clipboard",pos:"top-right",showAction:!1,customClass:"box-general box-warning",duration:"3500",backgroundColor:"#FFEBEB",textColor:"#151515"})}))},copyIconMouseOut=function(e){var t=$(e.target);t.hasClass("copied")&&t.removeClass("copied")};$("#main-content h2, #main-content .sp-grid-60 h3, #main-content h3").not("div.box-general h2, div.box-general h3, h2:has(a), h3:has(a)").append('<span title="Copy link to heading" class="heading-link-icon icon-chain" onclick="copyHeadingLink(event)" onmouseout="copyIconMouseOut(event)"></span>');var initFooterLinks=function(){$("a.js-qa-link").attr("href",THEME_CONFIG.KENTICO_QA_LINK),$("a.js-support-link").attr("href",THEME_CONFIG.KENTICO_SUPPORT_LINK),0==$("#main-content").text().trim().length&&($("#main-content").append("This section collects all pages related to the topic. Use the page tree to navigate the section."),$("#main-content").append($("a.ht-nav-page-link.current").parent().children().last().clone()))};$(document).ready(initFooterLinks);var fixHeadingsUpper=function(){0!==$("#main-content h1").length&&$("#main-content h1").each((function(e){$(this).replaceWith("<h2 id=".concat(this.id," class=").concat(this.className,">")+$(this).html()+"</h2>")}))},fixHeadingsLower=function(){0===$("#main-content h2").length&&0!==$("#main-content h3").length&&$("#main-content h3").each((function(e){$(this).replaceWith("<h2 id=".concat(this.id," class=").concat(this.className,">")+$(this).html()+"</h2>")}))};window.addEventListener("DOMContentLoaded",(function(e){fixHeadingsUpper(),fixHeadingsLower()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
