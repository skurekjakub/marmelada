!function(e){window.SCROLL_WEBHELP=window.SCROLL_WEBHELP||{},window.SCROLL_WEBHELP.escapeHtml=function(t){return e("<div />").text(t).html()};var t="desktop";navigator.userAgent.indexOf("MSIE")>0||navigator.userAgent.indexOf("Trident"),Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor");function n(){e("body").bind("click",(function(t){!e(t.target).parents("#ht-search").length&&e("#ht-search").hasClass("open")&&(e("body").unbind("click"),a())})),e("#ht-search").addClass("open"),setTimeout((function(){e(".ht-search-clear").addClass("show")}),250),d=!0,e(".search-input")[0].focus()}function a(){input=e("#ht-search"),input.find(".ht-search-dropdown").removeClass("open"),e(".ht-search-dropdown a.hover").removeClass("hover"),e(document).unbind("keydown")}function i(t){var n=e(".ht-search-input .ht-search-dropdown"),a=n.find("ul");t=encodeURIComponent(t),a.empty();window.SCROLL_WEBHELP&&window.SCROLL_WEBHELP.search&&window.SCROLL_WEBHELP.search.performSearch(t,(function(t,i){e.each(t,(function(e,t){a.append('<li n="'+e+'" class="search-result"><a href="'+t.link+'">'+SCROLL_WEBHELP.escapeHtml(t.title)+"</a></li>")}));var r=e('<li class="search-key" n="'+t.length+'"></li>'),c=e('<a class="search-key-button" href="#">Search:&nbsp;</a>'),d=e("<b></b>").text(decodeURIComponent(i)),h=r.append(c.append(d));h.bind("click",(function(e){s(),e.preventDefault()})),a.append(h),a.children("li").each((function(t,n){var i=e(n);i.bind("mouseover",(function(){a.find("li a").removeClass("hover"),i.find("a").addClass("hover")}))})),n.addClass("open"),e("#search input.search-input").on("keydown",(function(e){switch(e.which){case 38:o(-1,n);break;case 40:o(1,n);break;default:return}e.preventDefault()}))}))}function o(t,n){var a=n.find("a").length,i=parseInt(n.find("a.hover").parent().attr("n"));isNaN(i)&&(i=-1);var o=i+t,s=n.height()-2,r=parseInt(n.find("a.hover").outerHeight());o<0||o>=a||e.each(n.find("a"),(function(t,a){t==i&&e(this).removeClass("hover"),t==o&&(e(this).addClass("hover"),r*(t+1)-n.scrollTop()>s?n.scrollTop(r*(t+1)-s):r*(t+1)-n.scrollTop()<r&&n.scrollTop()>0&&n.scrollTop(r*t))}))}function s(){var t=e(".ht-search-dropdown a.hover");0!=t.length?t.is(".search-key-button")?kenticoThemeOpenSearchResultsPage():window.location.href=t.attr("href"):kenticoThemeOpenSearchResultsPage()}function r(){e("article.ht-content").outerHeight()<e(window).innerHeight()?e("#ht-jump-top").fadeOut():e("#ht-jump-top").fadeIn()}function c(n){switch(parseInt(e("#ht-mq-detect").css("width").replace("px",""))){case 1:t="mobile";break;case 2:t="potrait";break;case 3:t="landscape";break;case 4:case 5:t="desktop"}var a=e("meta[name='confluence-base-url']").attr("content"),i=e("meta[name='confluence-space-key']").attr("content").toLowerCase(),o=a;i!==CONFIG.DOC_ROOT_URL_SPACE_KEY&&(o=o+"/"+i);var s=e(location).attr("href");s==o||s==o+"/"||s.indexOf(o+"/search")>=0||("desktop"==t?n||e("html").addClass("show-sidebar"):e("html").removeClass("show-sidebar"),"desktop"==t||"landscape"==t?e(".search-input").addClass("show"):e(".search-input").removeClass("show")),setTimeout((function(){e("#ht-sidebar").addClass("animate")}),500),setTimeout((function(){e(".search-input").addClass("animate")}),500)}e(document).ready((function(){c(!1),function(){window.SCROLL&&window.SCROLL.initPageTree&&window.SCROLL.initPageTree();e("#ht-menu-toggle").bind("click",(function(e){e.preventDefault(),setTimeout(toggleSidebar(),.05)}))}(),w(),function(){var t=function(e,t){var n,a;return function(){var i=arguments,o=this,s=function(){a=e.apply(o,i)};return clearTimeout(n),n=setTimeout(s,t),a}},n=t(i,200),a=e("#search input.search-input");a.on("focus",(function(e){d=!0,a.on("blur",(function(e){d=!1}))})),a.on("input",(function(t){var i=a.val();i.length>=3&&n(i),0==i.length&&e(".ht-search-dropdown").removeClass("open")})),a.on("keydown",(function(e){13===e.which&&s()})),e("form#search").on("submit",(function(){return!1}))}(),e("#ht-search-button").bind("click",(function(e){e.preventDefault(),n()})),e("#searchButton").bind("click",(function(t){t.preventDefault(),e(".search-input").hasClass("show")||e(".search-input").is(":visible")?s():e(".search-input").addClass("show")})),e(".ht-search-clear").bind("click",(function(e){e.preventDefault(),a()})),r(),e("#ht-jump-top").bind("click",(function(t){t.preventDefault(),e("body,html").animate({scrollTop:0},100)})),d=!1,e("body").bind("keyup",(function(e){if(!d||27==e.which){switch(e.which){case 219:"desktop"!==t&&toggleSidebar();break;case 191:sidebarExpanded||n();break;case 71:71==h&&(sidebarExpanded||n());break;case 27:a()}h=e.which}})),e(".sp-picker").change((function(){e(this).closest("form").trigger("submit")})),function(){var t=500,n=10;window.location.hash&&setTimeout((function(){e(window).scrollTo(document.getElementById(window.location.hash.substr(1)),{offset:-(e("#ht-headerbar").height()+n),duration:t,interrupt:!0,axis:"y"})}),0);e(".ht-content").on("click",'a[href^="'+location.pathname+'\\#"], a[href^=\\#]',(function(a){a.preventDefault();var i=document.getElementById(this.hash.substr(1));return i||(i=document.getElementById(decodeURI(this.hash.substr(1)))),e(window).stop(!0).scrollTo(i,{offset:-(e("#ht-headerbar").height()+n),duration:t,interrupt:!0,axis:"y"}),history&&"file"!=location.protocol.substr(0,4)&&history.pushState({},"",e(a.target).attr("href")),!1}))}(),e("#ht-loader").hide()})),function(){var t=e(".js-header-search-open"),n=e(".js-header-search-close"),a=e(".js-header-search-box"),i=250;t.click((function(e){a.css("display","flex").hide().fadeIn(i)})),n.click((function(e){a.fadeOut(i)}));var o=e(".js-menu-toggle"),s=e("#ht-sidebar");function r(){o.removeClass("is-active"),s.fadeOut(i)}o.click((function(e){o.hasClass("is-active")?r():(o.addClass("is-active"),s.fadeIn(i))})),window.addEventListener("click",(function(e){o[0].contains(e.target)||s[0].contains(e.target)||r()}))}();var d,h,l,u=new Date(1,1,2e3,12,0,0),p=!1;function f(){new Date-u<200?setTimeout(f,200):(p=!1,r(),c(!0),w())}function w(){e("#ht-wrap-container").width()>640?(e("#ht-wrap-container").addClass("sp-grid-float"),e("#ht-wrap-container").removeClass("sp-grid-fluid"),e(".sp-grid-cell.sp-grid-60").first().after(e(".sp-grid-cell.sp-grid-40"))):(e("#ht-wrap-container").addClass("sp-grid-fluid"),e("#ht-wrap-container").removeClass("sp-grid-float"),e(".sp-grid-cell.sp-grid-60").first().before(e(".sp-grid-cell.sp-grid-40")))}e(window).resize((function(){u=new Date,!1===p&&(p=!0,setTimeout(f,200))})),new ClipboardJS(".js-codeClipboard",{target:function(t){return e(t).closest(".js-codePanel").find(".js-code")[0]}}).on("success",(function(t){var n=e(t.trigger);n.addClass("is-copied"),l&&window.clearTimeout(l),l=window.setTimeout((function(){n.removeClass("is-copied")}),2e3),t.clearSelection()}))}($);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRoZW1lLm1haW4uanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsIlNDUk9MTF9XRUJIRUxQIiwidGV4dCIsImh0bWwiLCJ2aWV3cG9ydCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJIVE1MRWxlbWVudCIsInJlc3VsdHNMaXN0IiwiYmluZCIsImUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJsZW5ndGgiLCJoYXNDbGFzcyIsImVtcHR5IiwidW5iaW5kIiwiaGFuZGxlU2VhcmNoUmVzdWx0cyIsImVhY2giLCJzZWFyY2hSZXN1bHRzIiwiYWRkQ2xhc3MiLCJzZWFyY2hGaWVsZEFjdGl2ZSIsImZvY3VzIiwia2V5YnV0dG9uIiwiY2hpbGRyZW4iLCJyZW1vdmVDbGFzcyIsImRvY3VtZW50IiwiZG9TZWFyY2giLCJxdWVyeSIsImRyb3Bkb3duIiwicHJldmVudERlZmF1bHQiLCJmaW5kIiwic2VhcmNoIiwicGVyZm9ybVNlYXJjaCIsImN1cnJlbnRpdGVtIiwiaW5kZXgiLCJzZWFyY2hSZXN1bHQiLCJsaW5rIiwiZXNjYXBlSHRtbCIsInRpdGxlIiwibmV4dGl0ZW0iLCJrZXlidXR0b25fbGluayIsImtleWJ1dHRvbl9zZWFyY2hlZFRlcm0iLCJkZWNvZGVVUklDb21wb25lbnQiLCJrZXlidXR0b25fbGkiLCJhcHBlbmQiLCJzY3JvbGxUb3AiLCJpdGVtaGVpZ2h0IiwiaXRlbSIsImxpIiwic2VsZWN0ZWQiLCJsb2NhdGlvbiIsImF0dHIiLCJ3aGljaCIsImRyb3Bkb3duS2V5ZG93biIsImtlbnRpY29UaGVtZU9wZW5TZWFyY2hSZXN1bHRzUGFnZSIsImNsb3NlU2VhcmNoIiwiZGlyZWN0aW9uIiwiaXRlbWNvdW50IiwicGFyc2VJbnQiLCJwYXJlbnQiLCJpc05hTiIsImRyb3Bkb3duSGVpZ2h0IiwiaGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCIkY2xvc2VTZWFyY2giLCJ0cmFuc2l0aW9uTXMiLCJ2YWwiLCJjbGljayIsInRoaXMiLCJjc3MiLCIkc2lkZWJhciIsIiRtZW51VG9nZ2xlIiwiaXMiLCJocmVmIiwiY2hlY2tGb290ZXIiLCJpbm5lckhlaWdodCIsImZpcmVFdmVudCIsIndvcmtlZCIsImZhZGVJbiIsImNoZWNrRGV2aWNlIiwicmVzaXplIiwiaW5pdEtleWJvYXJkIiwicmVwbGFjZSIsInNpZGViYXJFeHBhbmRlZCIsImJhc2VVcmwiLCJzcGFjZUtleSIsInRvTG93ZXJDYXNlIiwiaG9tZVBhdGgiLCJDT05GSUciLCJET0NfUk9PVF9VUkxfU1BBQ0VfS0VZIiwiY3VyclBhdGgiLCJzZXRDb29raWUiLCJzZXRJdGVtIiwibG9jYWxTdG9yYWdlIiwiY3ZhbHVlIiwiY29va2llIiwiZXhwaXJlcyIsInNldFRpbWVvdXQiLCJyZWFkeSIsImR1cmF0aW9uIiwiU0NST0xMIiwiaW5pdFBhZ2VUcmVlIiwiaW50ZXJydXB0IiwidG9nZ2xlU2lkZWJhciIsImluaXRTaWRlYmFyIiwiaW5pdFNlYXJjaCIsImlucHV0IiwiZnVuYyIsIndhaXQiLCJyZXN1bHQiLCJhcmdzIiwiYXJndW1lbnRzIiwiY29udGV4dCIsImRlYm91bmNlZCIsImFwcGx5IiwiY2xlYXJUaW1lb3V0IiwidGltZW91dCIsIm9wZW5TZWFyY2giLCJkZWJvdW5jZWRTZWFyY2giLCJkZWJvdW5jZSIsIm9uIiwic3RyIiwic3ZnIiwidG9nZ2xlIiwiY29udGFpbmVyIiwibGFiZWwiLCJhbGxBY2Nlc3NpYmxlIiwiYWxsRW50cmllc0FjY2Vzc2libGUiLCJzZWxlY3QiLCJzZWxlY3RvciIsImVsZW1lbnQiLCJhbmltYXRlIiwiY3JlYXRlRXZlbnQiLCJjbGlwYm9hcmQiLCIkdHJpZ2dlciIsImNsaXBib2FyZFRpbWVvdXQiLCJsYXN0S2V5Iiwic2Nyb2xsVG9Qb3NpdGlvbiIsImNoYW5nZSIsImNsb3Nlc3QiLCJ0cmlnZ2VyIiwiYWRkaXRpb25hbE9mZnNldCIsImhhc2giLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdWJzdHIiLCJvZmZzZXQiLCJheGlzIiwicGF0aG5hbWUiLCJkZWNvZGVVUkkiLCJwcm90b2NvbCIsInRhcmdldCIsImhpZGUiLCIkb3BlblNlYXJjaCIsIiRzZWFyY2giLCJ0b29nbGVEcm9wZG93biIsImZhZGVPdXQiLCJoaWRlTWVudSIsImNyZWF0ZU9wdGlvblRleHQiLCJvcHRpb24iLCJvcHRpb25UZXh0IiwidmVyc2lvbkFjY2Vzc2libGUiLCJhZGRFdmVudExpc3RlbmVyIiwiY29udGFpbnMiLCJvcGVuIiwicnRpbWUiLCJ2YWx1ZSIsInJlc2l6ZWVuZCIsIkRhdGUiLCJzdWJzdHJpbmciLCJjaGVja0dyaWQiLCJ3aWR0aCIsImZpcnN0IiwiYWZ0ZXIiLCJiZWZvcmUiLCJjb25zb2xlIiwibmFtZSIsIkNsaXBib2FyZEpTIiwiY2xlYXJTZWxlY3Rpb24iXSwibWFwcGluZ3MiOiJDQUFBLFNBQUNBLEdBUUdDLE9BQU9DLGVBQWlCRCxPQUFPQyxnQkFBb0IsQ0FBQSxFQUcvQ0QsT0FBT0QsZUFBYUcsV0FBZSxTQUFFQSxHQUN4QyxPQUFBSCxFQUFBLFdBQUFHLEtBQUFBLEdBQUFDLE1BRUQsRUFFQSxJQUNBQyxFQUFBLFVBSVlDLFVBQVVDLFVBQVVDLFFBQVEsUUFBVSxHQUFPRixVQUFVQyxVQUFVQyxRQUFRLFdBR3BFQyxPQUFDQyxVQUFXQyxTQUFBQyxLQUFBWCxPQUFBWSxhQUFBTCxRQUFBLGVBNFB6QixTQUFJTSxJQUNMZCxFQUFBLFFBQUFlLEtBQUEsU0FBQSxTQUFBQyxJQUNHQyxFQUFBQSxFQUFBQSxRQUFBQSxRQUF5QixjQUFBQyxRQUFBbEIsRUFBQSxjQUFBbUIsU0FBQSxVQUVmQyxFQUFBQSxRQUFPQyxPQUFBLFNBRWZDLElBMUNKLElBNkNNQyxFQUFBQSxjQUFLQyxTQUFlLFFBQ2xCVixZQUFXLFdBQ2JkLEVBQUEsb0JBQUF5QixTQUFBLE9BM0NOLEdBQUcsS0E2Q0NDLEdBQUEsRUFDQTFCLEVBQUEsaUJBQUEsR0FBQTJCLE9BM0NSLENBR0Es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QUMsS0FBU0MsRUFWUCxJQVdOekUsV0FBQXVFLEVBWE0sTUFhZHBELEdBQUEsRUFFTzFDLElBQ1hLLEdBQUEsR0E3R1E0RixJQWlIWixDQUVJLFNBQVNBLElBQ0RqTCxFQUFFLHNCQUFzQmtMLFFBQVUsS0FDbENsTCxFQUFFLHNCQUFzQnlCLFNBQVMsaUJBQ2pDekIsRUFBRSxzQkFBc0I4QixZQUFZLGlCQUVwQzlCLEVBQUUsNEJBQTRCbUwsUUFBUUMsTUFBTXBMLEVBQUUsK0JBRTlDQSxFQUFFLHNCQUFzQnlCLFNBQVMsaUJBQ2pDekIsRUFBRSxzQkFBc0I4QixZQUFZLGlCQUVwQzlCLEVBQUUsNEJBQTRCbUwsUUFBUUUsT0FBT3JMLEVBQUUsNkJBRXZELENBOUlBQSxFQUFFQyxRQTZHVXFMLFFBQVksV0FDaEJWLEVBQUEsSUFBQUcsTUFDRyxJQUFBckQsSUFDQzZELEdBQVksRUFDVmhGLFdBQVd1RSxFQUxQLEtBdEdsQixJQWdKb0IsSUFBSVUsWUFBWSxvQkFBcUIsQ0FDakQxQixPQUFRLFNBQVNaLEdBSWIsT0FIYWxKLEVBQUVrSixHQUFTRCxRQUFRLGlCQUNiN0csS0FBSyxZQUVYLEVBQ2pCLElBR00wRixHQUFHLFdBQVcsU0FBVTlHLEdBQzlCLElBQUk0SCxFQUFXNUksRUFBRWdCLEVBQUVrSSxTQUNuQk4sRUFBU25ILFNBQVMsYUFFZG9ILEdBQ0E1SSxPQUFPd0gsYUFBYW9CLEdBR3hCQSxFQUFtQjVJLE9BQU9zRyxZQUFXLFdBQ2pDcUMsRUFBUzlHLFlBQVksWUFDekIsR0FBRyxLQUVIZCxFQUFFeUssZ0JBQ04sR0FFUCxDQW4xQkQsQ0FtMUJHekwiLCJmaWxlIjoidGhlbWUubWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigkKSB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBLMTV0IEhlbHAgVGhlbWVcclxuICAgICAqIE1vZGlmaWVkIE1haW4gSmF2YXNjcmlwdFxyXG4gICAgICpcclxuICAgICAqKi9cclxuXHJcbiAgICB3aW5kb3cuU0NST0xMX1dFQkhFTFAgPSB3aW5kb3cuU0NST0xMX1dFQkhFTFAgfHwge307XHJcblxyXG4gICAgd2luZG93LlNDUk9MTF9XRUJIRUxQLmVzY2FwZUh0bWwgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuICQoJzxkaXYgLz4nKS50ZXh0KHRleHQpLmh0bWwoKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBzZWFyY2hVUkwgPSAnc2VhcmNoLmpzb24nO1xyXG4gICAgdmFyIHZpZXdwb3J0ID0gJ2Rlc2t0b3AnO1xyXG4gICAgdmFyIHN2ZHJvcGRvd24gPSBmYWxzZTtcclxuICAgIC8vIHZhciBwYWdlSWQ7XHJcblxyXG4gICAgLy8gZmlyZWZveCBkZXRlY3Rpb25cclxuICAgIHZhciBpc0ZpcmVmb3ggPSB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnOyAvLyBGaXJlZm94IDEuMCtcclxuICAgIHZhciBpc0lFID0gKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1TSUVcIikgPiAwKSB8fCAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiVHJpZGVudFwiKSA+IDApO1xyXG4gICAgdmFyIGlzU2FmYXJpID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdy5IVE1MRWxlbWVudCkuaW5kZXhPZignQ29uc3RydWN0b3InKSA+IDA7IC8vIEF0IGxlYXN0IFNhZmFyaSAzKzogXCJbb2JqZWN0IEhUTUxFbGVtZW50Q29uc3RydWN0b3JdXCJcclxuXHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgLy8gcGFnZUlkID0gJCgnYm9keScpLmF0dHIoJ3BhZ2VpZCcpO1xyXG4gICAgICAgIC8qIFNldCBUeXBlIG9mIERldmljZSAqL1xyXG4gICAgICAgIGNoZWNrRGV2aWNlKGZhbHNlKTsgLy8gQ1VTVE9NIC0gZmFsc2UgcGFyYW1ldGVyIHRvIGluZGljYXRlIHRoYXQgdGhlIGNhbGwgaXMgb24gdGhlIGluaXRpYWwgcGFnZSBsb2FkXHJcblxyXG4gICAgICAgIC8qIGluaXQgU2lkZWJhciBGdW5jdGlvbnMgKi9cclxuICAgICAgICAvLyBpbml0RHJhZ2JhcigpO1xyXG4gICAgICAgIGluaXRTaWRlYmFyKCk7XHJcbiAgICAgICAgY2hlY2tHcmlkKCk7XHJcblxyXG4gICAgICAgIC8qIGluaXQgU2VhcmNoIEZ1bmN0aW9ucyAqL1xyXG4gICAgICAgIGluaXRTZWFyY2goKTtcclxuICAgICAgICBpbml0QnV0dG9ucygpO1xyXG5cclxuICAgICAgICBpbml0Rm9vdGVyKCk7XHJcbiAgICAgICAgLy8gc2V0Q29udGVudFdpZHRoKCk7IC8vIENVU1RPTSBjb250ZW50IHdpZHRoIGFkanVzdG1lbnRzXHJcblxyXG4gICAgICAgIC8qIGluaXQgS2V5Ym9hcmQgKi9cclxuICAgICAgICBpbml0S2V5Ym9hcmQoKTtcclxuXHJcbiAgICAgICAgJCgnLnNwLXBpY2tlcicpLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnRyaWdnZXIoJ3N1Ym1pdCcpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBoYW5kbGUgbGlua3MgdG8gYW5jaG9ycyBjb3JyZWN0bHkgd2l0aCB0aGUgaGVhZGVyYmFyICovXHJcbiAgICAgICAgc2Nyb2xsVG9Qb3NpdGlvbigpO1xyXG5cclxuICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24oKSB7JCgnI2h0LWxvYWRlcicpLmhpZGUoKTt9LCA1MDApO1xyXG4gICAgICAgICQoJyNodC1sb2FkZXInKS5oaWRlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgPSAgICAgICAgICAgIFJlc2l6ZSBTaWRlYmFyICAgICAgICAgICAgPVxyXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0RHJhZ2JhcigpIHtcclxuICAgICAgICBzZXREcmFnYmFyKHBhcnNlSW50KGdldENvb2tpZSgnc2lkZWJhci13aWR0aCcpKSk7XHJcblxyXG4gICAgICAgICQoJyNodC1zaWRlYmFyLWRyYWdiYXInKS5tb3VzZWRvd24oZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5tb3VzZW1vdmUoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtb3VzZXggPSBlLnBhZ2VYICsgMjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobW91c2V4IDwgMTkwIHx8IG1vdXNleCA+ICQod2luZG93KS5pbm5lcldpZHRoKCkgLSA0NTUpcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtb3VzZXggPCAyMjApJCgnI2h0LXNpZGViYXInKS5hZGRDbGFzcygnc21hbGwnKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgJCgnI2h0LXNpZGViYXInKS5yZW1vdmVDbGFzcygnc21hbGwnKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgc2V0RHJhZ2Jhcihtb3VzZXgpO1xyXG4gICAgICAgICAgICAgICAgc2V0Q29va2llKCdzaWRlYmFyLXdpZHRoJywgbW91c2V4KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjaGVja0dyaWQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkudW5iaW5kKCdtb3VzZW1vdmUnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2V0U2Nyb2xsVmVyc2lvblNlbGVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldERyYWdiYXIodmFsKSB7XHJcbiAgICAgICAgaWYgKHZpZXdwb3J0ICE9ICdkZXNrdG9wJylyZXR1cm47XHJcblxyXG4gICAgICAgIGlmICh2YWwgPT0gaXNOYU4oKSl2YWwgPSAyOTU7XHJcblxyXG4gICAgICAgICQoJyNodC1zaWRlYmFyJykud2lkdGgodmFsKTtcclxuICAgICAgICBpZiAodmFsIDwgMjIwKSQoJyNodC1zaWRlYmFyJykuYWRkQ2xhc3MoJ3NtYWxsJyk7XHJcblxyXG4gICAgICAgICQoJyNodC13cmFwLWNvbnRhaW5lcicpLmNzcyhcImxlZnRcIiwgdmFsICsgMTApO1xyXG4gICAgICAgICQoJyNodC1oZWFkZXJiYXInKS5jc3MoJ2xlZnQnLCB2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVuZERyYWdiYXIoKSB7XHJcbiAgICAgICAgaWYgKCQoJyNodC1zaWRlYmFyJykuYXR0cignc3R5bGUnKSA9PSAnJylyZXR1cm47XHJcbiAgICAgICAgJCgnI2h0LXNpZGViYXInKS5hdHRyKCdzdHlsZScsICcnKTtcclxuICAgICAgICAkKCcjaHQtd3JhcC1jb250YWluZXInKS5hdHRyKCdzdHlsZScsICcnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRTY3JvbGxWZXJzaW9uU2VsZWN0KHZpc2libGUpIHtcclxuICAgICAgICAkLmVhY2goJCgnLmh0LXNjcm9sbC12ZXJzaW9ucy1zZWxlY3Qgc2VsZWN0JyksIGZ1bmN0aW9uIChpbmRleCwgdmFsKSB7XHJcbiAgICAgICAgICAgIHNldERyb3Bkb3duKCQodGhpcykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgPSAgICAgICAgICAgIFRvZ2dsZSBTaWRlYmFybmF2ICAgICAgICAgICAgPVxyXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0U2lkZWJhcigpIHtcclxuICAgICAgICBpZiAod2luZG93LlNDUk9MTCAmJiB3aW5kb3cuU0NST0xMLmluaXRQYWdlVHJlZSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuU0NST0xMLmluaXRQYWdlVHJlZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCgnI2h0LW1lbnUtdG9nZ2xlJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodG9nZ2xlU2lkZWJhcigpLCAwLjA1KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgXHJcbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgPSAgICAgICAgICAgICAgIEhlYWRlcmJhciAgICAgICAgICAgICAgICA9XHJcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5cclxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvUG9zaXRpb24oKSB7XHJcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gNTAwO1xyXG4gICAgICAgIHZhciBhZGRpdGlvbmFsT2Zmc2V0ID0gMTA7XHJcblxyXG4gICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCkge1xyXG4gICAgICAgICAgICAvLyBOZXQgdG8gcHV0IGl0IGF0IHRoZSBlbmQgb2YgdGhlIGV2ZW50IGxvb3AgZm9yIG1ha2luZyBpdCB3b3JrIGluIElFIDotKFxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvKFxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSksXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IC0oJCgnI2h0LWhlYWRlcmJhcicpLmhlaWdodCgpICsgYWRkaXRpb25hbE9mZnNldCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJydXB0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzOiAneSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoJy5odC1jb250ZW50Jykub24oJ2NsaWNrJywgJ2FbaHJlZl49XCInK2xvY2F0aW9uLnBhdGhuYW1lKydcXFxcI1wiXSwgYVtocmVmXj1cXFxcI10nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmhhc2guc3Vic3RyKDEpKTtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBsb29rIGZvciBlbGVtZW50IHdpdGggZW5jb2RlZCBJRCAtIGhhc2ggaXMgcHJvdmlkZWQgZGlmZmVyZW50IGluIEZpcmVmb3hcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkZWNvZGVVUkkodGhpcy5oYXNoLnN1YnN0cigxKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQod2luZG93KS5zdG9wKHRydWUpLnNjcm9sbFRvKFxyXG4gICAgICAgICAgICAgICAgZWxlbWVudCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IC0oJCgnI2h0LWhlYWRlcmJhcicpLmhlaWdodCgpICsgYWRkaXRpb25hbE9mZnNldCksXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVycnVwdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBheGlzOiAneSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFB1c2hTdGF0ZSBpcyBub3Qgc3VwcG9ydGVkIGZvciBsb2NhbCBmaWxlcyAoZmlsZTovLy8uLi4pXHJcbiAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zMDEyMTBcclxuICAgICAgICAgICAgaWYgKGhpc3RvcnkgJiYgbG9jYXRpb24ucHJvdG9jb2wuc3Vic3RyKDAsNCkgIT0gJ2ZpbGUnKSB7XHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsICQoZS50YXJnZXQpLmF0dHIoJ2hyZWYnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgPSAgICAgICAgICAgICAgIFNlYXJjaCAgICAgICAgICAgICAgICAgICAgPVxyXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0U2VhcmNoKCkge1xyXG4gICAgICAgIHZhciBkZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcclxuICAgICAgICAgICAgdmFyIHRpbWVvdXQ7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlYm91bmNlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZGVib3VuY2VkLCB3YWl0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGRlYm91bmNlZFNlYXJjaCA9IGRlYm91bmNlKGRvU2VhcmNoLCAyMDApO1xyXG5cclxuICAgICAgICB2YXIgaW5wdXQgPSAkKCcjc2VhcmNoIGlucHV0LnNlYXJjaC1pbnB1dCcpO1xyXG4gICAgICAgIGlucHV0Lm9uKCdmb2N1cycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHNlYXJjaEZpZWxkQWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlucHV0Lm9uKCdibHVyJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHNlYXJjaEZpZWxkQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgaW5wdXQub24oJ2lucHV0JywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB2YXIgc3RyID0gaW5wdXQudmFsKCk7XHJcbiAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoID49IDMpIHtcclxuICAgICAgICAgICAgICAgIGRlYm91bmNlZFNlYXJjaChzdHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuaHQtc2VhcmNoLWRyb3Bkb3duJykucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5wdXQub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHBlcmZvcm1TZWFyY2goKTsgLy8gQ1VTVE9NXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnZm9ybSNzZWFyY2gnKS5vbignc3VibWl0JywgZnVuY3Rpb24oKSB7IC8vIENVU1RPTVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb3BlblNlYXJjaCgpIHtcclxuICAgICAgICAkKCdib2R5JykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLnBhcmVudHMoJyNodC1zZWFyY2gnKS5sZW5ndGggJiYgJCgnI2h0LXNlYXJjaCcpLmhhc0NsYXNzKCdvcGVuJykpIHtcclxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS51bmJpbmQoJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgICAgICBjbG9zZVNlYXJjaCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnI2h0LXNlYXJjaCcpLmFkZENsYXNzKCdvcGVuJyk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQoJy5odC1zZWFyY2gtY2xlYXInKS5hZGRDbGFzcygnc2hvdycpO1xyXG4gICAgICAgIH0sIDI1MCk7XHJcbiAgICAgICAgc2VhcmNoRmllbGRBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICQoJy5zZWFyY2gtaW5wdXQnKVswXS5mb2N1cygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENVU1RPTTogV2Ugb25seSBoaWRlIHNlYXJjaCBzdWdnZXN0aW9ucyBvbiBlc2NcclxuICAgIGZ1bmN0aW9uIGNsb3NlU2VhcmNoKCkge1xyXG4gICAgICAgIGlucHV0ID0gJCgnI2h0LXNlYXJjaCcpO1xyXG4gICAgICAgIC8vaW5wdXQuZmluZCgnaW5wdXQnKS52YWwoJycpO1xyXG4gICAgICAgIC8vaW5wdXQuZmluZCgnaW5wdXQnKS5ibHVyKCk7XHJcbiAgICAgICAgLy9pbnB1dC5yZW1vdmVDbGFzcygnb3BlbicpO1xyXG4gICAgICAgIC8vJCgnLmh0LXNlYXJjaC1jbGVhcicpLnJlbW92ZUNsYXNzKCdzaG93Jyk7XHJcbiAgICAgICAgaW5wdXQuZmluZCgnLmh0LXNlYXJjaC1kcm9wZG93bicpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XHJcbiAgICAgIFxyXG4gICAgICAgIC8vIENVU1RPTSAtIFJlbW92ZXMgdGhlIGhvdmVyIGNsYXNzIGZyb20gaXRlbXMgc2VsZWN0ZWQgaW4gdGhlIHNlYXJjaCBkcm9wLWRvd25cclxuXHRcdHZhciBzZWxlY3RlZFNlYXJjaExpbmtFbGVtZW50ID0gJChcIi5odC1zZWFyY2gtZHJvcGRvd24gYS5ob3ZlclwiKTtcclxuICAgICAgICBzZWxlY3RlZFNlYXJjaExpbmtFbGVtZW50LnJlbW92ZUNsYXNzKFwiaG92ZXJcIik7XHJcbiAgICAgIFxyXG4gICAgICAgICQoZG9jdW1lbnQpLnVuYmluZCgna2V5ZG93bicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENVU1RPTSAtIGNvbW1lbnRlZCBvdXQsIG5vdCB1c2VkIGluIG91ciBpbXBsZW1lbnRhdGlvblxyXG4gICAgLypmdW5jdGlvbiBuYXZpZ2F0ZVRvU2VhcmNoUmVzdWx0c1BhZ2UocXVlcnkpIHtcclxuICAgICAgICBpZiAod2luZG93LlNDUk9MTF9XRUJIRUxQICYmIHdpbmRvdy5TQ1JPTExfV0VCSEVMUC5zZWFyY2gpIHtcclxuICAgICAgICAgICAgd2luZG93LlNDUk9MTF9XRUJIRUxQLnNlYXJjaC5uYXZpZ2F0ZVRvU2VhcmNoUGFnZShxdWVyeSk7XHJcbiAgICAgICAgICAgIGNsb3NlU2VhcmNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSovXHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGRvU2VhcmNoKHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIGRyb3Bkb3duID0gJCgnLmh0LXNlYXJjaC1pbnB1dCAuaHQtc2VhcmNoLWRyb3Bkb3duJyk7XHJcbiAgICAgICAgdmFyIHJlc3VsdHNMaXN0ID0gZHJvcGRvd24uZmluZCgndWwnKTtcclxuICAgICAgXHQvLyBDVVNUT00gLSBFc2NhcGVzIGZvcmJpZGRlbiBjaGFyYWN0ZXJzXHJcblx0XHRxdWVyeSA9IGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSk7XHJcbiAgICAgIFxyXG4gICAgICAgIHJlc3VsdHNMaXN0LmVtcHR5KCk7XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVTZWFyY2hSZXN1bHRzID0gZnVuY3Rpb24oc2VhcmNoUmVzdWx0cywgcXVlcnkpIHtcclxuICAgICAgICAgICAgLy8gJChkb2N1bWVudCkudW5iaW5kKCdrZXlkb3duJyk7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2goc2VhcmNoUmVzdWx0cywgZnVuY3Rpb24gKGluZGV4LCBzZWFyY2hSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHNMaXN0LmFwcGVuZCgnPGxpIG49XCInICsgaW5kZXggKyAnXCIgY2xhc3M9XCJzZWFyY2gtcmVzdWx0XCI+PGEgaHJlZj1cIicgKyBzZWFyY2hSZXN1bHQubGluayArICdcIj4nICsgU0NST0xMX1dFQkhFTFAuZXNjYXBlSHRtbChzZWFyY2hSZXN1bHQudGl0bGUpICsgJzwvYT48L2xpPicpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENVU1RPTSAtIEJyb2tlbiBkb3duIGludG8gaW5kaXZpZHVhbCBjb21wb25lbnQgZWxlbWVudHMsIG5lZWRlZCB0byBzZWN1cmVseSBkaXNwbGF5IHRoZSBxdWVyeSB2YWx1ZVxyXG4gICAgICAgICAgICAvLyBDVVNUT00gLSBBZGRlZCB0aGUgJ2RlY29kZVVSSUNvbXBvbmVudCgpJyBjYWxsIHRvIHRoZSBkaXNwbGF5ZWQgc2VhcmNoIHF1ZXJ5IChzdG9wcyBkaXNwbGF5aW5nIG9mIGVuY29kZWQgXCJTZWFyY2g6XCIgdmFsdWVzIGluIHRoZSBzZWFyY2ggc3VnZ2VzdGVyIGRyb3AtZG93bilcclxuICAgICAgICAgICAgdmFyIGtleWJ1dHRvbl9saSA9ICQoJzxsaSBjbGFzcz1cInNlYXJjaC1rZXlcIiBuPVwiJyArIHNlYXJjaFJlc3VsdHMubGVuZ3RoICsgJ1wiPjwvbGk+Jyk7XHJcbiAgICAgICAgICAgIHZhciBrZXlidXR0b25fbGluayA9ICQoJzxhIGNsYXNzPVwic2VhcmNoLWtleS1idXR0b25cIiBocmVmPVwiI1wiPlNlYXJjaDombmJzcDs8L2E+Jyk7XHJcbiAgICAgICAgICAgIHZhciBrZXlidXR0b25fc2VhcmNoZWRUZXJtID0gJCgnPGI+PC9iPicpLnRleHQoZGVjb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KSk7XHJcbiAgICAgICAgICAgIHZhciBrZXlidXR0b24gPSBrZXlidXR0b25fbGkuYXBwZW5kKGtleWJ1dHRvbl9saW5rLmFwcGVuZChrZXlidXR0b25fc2VhcmNoZWRUZXJtKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBrZXlidXR0b24uYmluZCgnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBwZXJmb3JtU2VhcmNoKCk7IC8vIENVU1RPTVxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVzdWx0c0xpc3QuYXBwZW5kKGtleWJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICByZXN1bHRzTGlzdC5jaGlsZHJlbignbGknKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGkgPSAkKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgbGkuYmluZCgnbW91c2VvdmVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNMaXN0LmZpbmQoJ2xpIGEnKS5yZW1vdmVDbGFzcygnaG92ZXInKTtcclxuICAgICAgICAgICAgICAgICAgICBsaS5maW5kKCdhJykuYWRkQ2xhc3MoJ2hvdmVyJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBkcm9wZG93bi5hZGRDbGFzcygnb3BlbicpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gJCgnI3NlYXJjaCBpbnB1dC5zZWFyY2gtaW5wdXQnKTtcclxuXHJcbiAgICAgICAgICAgIGlucHV0Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS53aGljaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duS2V5ZG93bigtMSwgZHJvcGRvd24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duS2V5ZG93bigxLCBkcm9wZG93bik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh3aW5kb3cuU0NST0xMX1dFQkhFTFAgJiYgd2luZG93LlNDUk9MTF9XRUJIRUxQLnNlYXJjaCkge1xyXG4gICAgICAgICAgICB3aW5kb3cuU0NST0xMX1dFQkhFTFAuc2VhcmNoLnBlcmZvcm1TZWFyY2gocXVlcnksIGhhbmRsZVNlYXJjaFJlc3VsdHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkcm9wZG93bktleWRvd24oZGlyZWN0aW9uLCBkcm9wZG93bikge1xyXG4gICAgICAgIHZhciBpdGVtY291bnQgPSBkcm9wZG93bi5maW5kKCdhJykubGVuZ3RoO1xyXG4gICAgICAgIHZhciBjdXJyZW50aXRlbSA9IHBhcnNlSW50KGRyb3Bkb3duLmZpbmQoJ2EuaG92ZXInKS5wYXJlbnQoKS5hdHRyKCduJykpO1xyXG4gICAgICAgIGlmIChpc05hTihjdXJyZW50aXRlbSkpY3VycmVudGl0ZW0gPSAtMTtcclxuXHJcbiAgICAgICAgdmFyIG5leHRpdGVtID0gY3VycmVudGl0ZW0gKyBkaXJlY3Rpb247XHJcbiAgICAgICAgdmFyIGRyb3Bkb3duSGVpZ2h0ID0gZHJvcGRvd24uaGVpZ2h0KCkgLSAyO1xyXG5cclxuICAgICAgICB2YXIgaXRlbWhlaWdodCA9IHBhcnNlSW50KGRyb3Bkb3duLmZpbmQoJ2EuaG92ZXInKS5vdXRlckhlaWdodCgpKTtcclxuXHJcbiAgICAgICAgaWYgKG5leHRpdGVtIDwgMCB8fCBuZXh0aXRlbSA+PSBpdGVtY291bnQpcmV0dXJuO1xyXG5cclxuICAgICAgICAkLmVhY2goZHJvcGRvd24uZmluZCgnYScpLCBmdW5jdGlvbiAoaW5kZXgsIHZhbCkge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT0gY3VycmVudGl0ZW0pJCh0aGlzKS5yZW1vdmVDbGFzcygnaG92ZXInKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09IG5leHRpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdob3ZlcicpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgoaXRlbWhlaWdodCAqIChpbmRleCArIDEpKSAtIGRyb3Bkb3duLnNjcm9sbFRvcCgpID4gZHJvcGRvd25IZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5zY3JvbGxUb3AoKGl0ZW1oZWlnaHQgKiAoaW5kZXggKyAxKSkgLSBkcm9wZG93bkhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChpdGVtaGVpZ2h0ICogKGluZGV4ICsgMSkpIC0gZHJvcGRvd24uc2Nyb2xsVG9wKCkgPCBpdGVtaGVpZ2h0ICYmIGRyb3Bkb3duLnNjcm9sbFRvcCgpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLnNjcm9sbFRvcChpdGVtaGVpZ2h0ICogaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICBcclxuXHJcbiAgXHJcbiAgICAvLyBDVVNUT006IFBlcmZvcm1zIGEgc2VhcmNoXHJcbiAgICBmdW5jdGlvbiBwZXJmb3JtU2VhcmNoKCkge1xyXG5cdFx0Ly8gQXR0ZW1wdHMgdG8gZ2V0IGEgc2VsZWN0ZWQgc2VhcmNoIGRyb3AtZG93biBsaW5rIGVsZW1lbnRcclxuICAgICAgICB2YXIgc2VsZWN0ZWQgPSAkKCcuaHQtc2VhcmNoLWRyb3Bkb3duIGEuaG92ZXInKTsgICAgICAgIFxyXG5cclxuXHRcdGlmIChzZWxlY3RlZC5sZW5ndGggIT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWQuaXMoJy5zZWFyY2gta2V5LWJ1dHRvbicpKSB7XHJcblx0XHQgICAgICAgIC8vIElmIHRoZSBzZWxlY3RlZCBpdGVtIGlzIHRoZSBmaW5hbCBcIlNlYXJjaDogPHF1ZXJ5PlwiIGVsZW1lbnQsIG9wZW5zIHRoZSBzZWFyY2ggcmVzdWx0IHBhZ2UgXHJcbiAgICAgICAgICAgICAgICBrZW50aWNvVGhlbWVPcGVuU2VhcmNoUmVzdWx0c1BhZ2UoKTsgLy8gRnVuY3Rpb24gZGVmaW5lZCBpbiB0aGVtZS5jdXN0b20uanNcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHRcdFx0XHQvLyBJZiB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBhIHBhZ2UgcmVzdWx0LCByZWRpcmVjdHMgZGlyZWN0bHkgdG8gZ2l2ZW4gZG9jdW1lbnRhdGlvbiBwYWdlXHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHNlbGVjdGVkLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblx0XHRcdC8vIE9wZW5zIHRoZSBzZWFyY2ggcmVzdWx0IHBhZ2UgKGRlZmF1bHQgY2FzZSlcclxuICAgICAgICAgICAga2VudGljb1RoZW1lT3BlblNlYXJjaFJlc3VsdHNQYWdlKCk7IC8vIEZ1bmN0aW9uIGRlZmluZWQgaW4gdGhlbWUuY3VzdG9tLmpzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0QnV0dG9ucygpIHtcclxuXHJcbiAgICAgICAgJCgnI2h0LXNlYXJjaC1idXR0b24nKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgb3BlblNlYXJjaCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjc2VhcmNoQnV0dG9uJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBcdGlmICgkKFwiLnNlYXJjaC1pbnB1dFwiKS5oYXNDbGFzcyhcInNob3dcIikgfHwgJChcIi5zZWFyY2gtaW5wdXRcIikuaXMoXCI6dmlzaWJsZVwiKSkge1xyXG4gICAgICAgICAgICBcdHBlcmZvcm1TZWFyY2goKTtcclxuICAgICAgICBcdH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiLnNlYXJjaC1pbnB1dFwiKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnLmh0LXNlYXJjaC1jbGVhcicpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjbG9zZVNlYXJjaCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICA9ICAgICAgIEhlYWRlciByZXNwb25zaXZpdHkgICAgICAgID1cclxuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcblxyXG4gICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkb3BlblNlYXJjaCA9ICQoJy5qcy1oZWFkZXItc2VhcmNoLW9wZW4nKTtcclxuICAgICAgICB2YXIgJGNsb3NlU2VhcmNoID0gJCgnLmpzLWhlYWRlci1zZWFyY2gtY2xvc2UnKTtcclxuICAgICAgICB2YXIgJHNlYXJjaCA9ICQoJy5qcy1oZWFkZXItc2VhcmNoLWJveCcpO1xyXG4gICAgICAgIHZhciB0cmFuc2l0aW9uTXMgPSAyNTA7XHJcblxyXG4gICAgICAgICRvcGVuU2VhcmNoLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgJHNlYXJjaFxyXG4gICAgICAgICAgICAgICAgLmNzcyhcImRpc3BsYXlcIiwgXCJmbGV4XCIpXHJcbiAgICAgICAgICAgICAgICAuaGlkZSgpXHJcbiAgICAgICAgICAgICAgICAuZmFkZUluKHRyYW5zaXRpb25Ncyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRjbG9zZVNlYXJjaC5jbGljayhmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICRzZWFyY2guZmFkZU91dCh0cmFuc2l0aW9uTXMpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgJG1lbnVUb2dnbGUgPSAkKCcuanMtbWVudS10b2dnbGUnKTtcclxuICAgICAgICB2YXIgJHNpZGViYXIgPSAkKCcjaHQtc2lkZWJhcicpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzaG93TWVudSgpIHtcclxuICAgICAgICAgICAgJG1lbnVUb2dnbGUuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICAkc2lkZWJhci5mYWRlSW4odHJhbnNpdGlvbk1zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhpZGVNZW51KCkge1xyXG4gICAgICAgICAgICAkbWVudVRvZ2dsZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICRzaWRlYmFyLmZhZGVPdXQodHJhbnNpdGlvbk1zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRtZW51VG9nZ2xlLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKCRtZW51VG9nZ2xlLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAgICAgaGlkZU1lbnUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNob3dNZW51KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmICghJG1lbnVUb2dnbGVbMF0uY29udGFpbnMoZS50YXJnZXQpICYmICEkc2lkZWJhclswXS5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIGhpZGVNZW51KCk7XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgPSAgICAgICAgICAgIERyb3Bkb3duICAgICAgICAgICAgPVxyXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuXHJcbiAgICBmdW5jdGlvbiBzZXREcm9wZG93bihzZWxlY3QpIHtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gc2VsZWN0LnBhcmVudCgpO1xyXG4gICAgICAgIHZhciBzdmcgPSAnPHN2ZyB3aWR0aD1cIjEwcHhcIiBoZWlnaHQ9XCIxMHB4XCIgdmlld0JveD1cIjAgMCAxMCAxMFwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI+PGcgY2xhc3M9XCJodC1zZWxlY3QtYnV0dG9uLWljb25cIj48cGF0aCBkPVwiTTIsMyBMOCwzIEw1LDcgTDIsMyBaXCI+PC9wYXRoPjwvZz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciB0b2dnbGUgPSAkKCc8YSBjbGFzcz1cImh0LXNlbGVjdC1idXR0b25cIj48c3Bhbj4nICsgY3JlYXRlT3B0aW9uVGV4dChzZWxlY3QuZmluZCgnb3B0aW9uOnNlbGVjdGVkJykpICsgJzwvc3Bhbj4nICsgc3ZnICsgJzwvYT4nKTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKHRvZ2dsZSk7XHJcblxyXG4gICAgICAgIHZhciBsYWJlbCA9IGNvbnRhaW5lci5wYXJlbnQoKS5maW5kKCdsYWJlbCcpLnJlbW92ZSgpO1xyXG4gICAgICAgIHRvZ2dsZS5wcmVwZW5kKGxhYmVsKTtcclxuXHJcbiAgICAgICAgdmFyIGRyb3Bkb3duID0gJCgnPGRpdiBjbGFzcz1cImh0LWRyb3Bkb3duIGh0LWRyb3Bkb3duLXNlbGVjdFwiPjx1bD48L3VsPjwvZGl2PicpO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoZHJvcGRvd24pO1xyXG5cclxuICAgICAgICB2YXIgYWxsQWNjZXNzaWJsZSA9IGFsbEVudHJpZXNBY2Nlc3NpYmxlKHNlbGVjdCk7XHJcbiAgICAgICAgJC5lYWNoKHNlbGVjdC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24gKGluZGV4LCB2YWwpIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSAkKCc8bGkgbj1cIicgKyBpbmRleCArICdcIj48YSBkYXRhLXNjcm9sbC1pbnRlZ3JhdGlvbi1uYW1lPVwiJyArIHNlbGVjdC5hdHRyKCduYW1lJykgKyAnXCIgZGF0YS1zY3JvbGwtaW50ZWdyYXRpb24tdGl0bGU9XCInICsgJCh0aGlzKS50ZXh0KCkgKyAnXCIgZGF0YS1zY3JvbGwtaW50ZWdyYXRpb24tdmFsdWU9XCInICsgJCh0aGlzKS5hdHRyKCd2YWx1ZScpICsgJ1wiPicgKyBjcmVhdGVPcHRpb25UZXh0KCQodGhpcyksICFhbGxBY2Nlc3NpYmxlKSArICc8L2E+PC9saT4nKTtcclxuICAgICAgICAgICAgZHJvcGRvd24uZmluZCgndWwnKS5hcHBlbmQoaXRlbSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNlbGVjdC5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gc2VsZWN0LnZhbCgpO1xyXG4gICAgICAgICAgICB0b2dnbGUuZmluZCgnc3BhbicpLnRleHQoc2VsZWN0LmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpLnRleHQoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRvZ2dsZS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh2aWV3cG9ydCA9PSAnbW9iaWxlJyAmJiAhKGlzRmlyZWZveCB8fCBpc0lFKSkge1xyXG4gICAgICAgICAgICAgICAgb3BlblNlbGVjdChzZWxlY3QpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0b29nbGVEcm9wZG93bihjb250YWluZXIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJC5lYWNoKCQoJy4nICsgY29udGFpbmVyLmF0dHIoJ2NsYXNzJykpLCBmdW5jdGlvbiAoaW5kZXgsIHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmZpbmQoJy5odC1zZWxlY3QtYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2dsZURyb3Bkb3duKCQodGhpcyksIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0b29nbGVEcm9wZG93bihjb250YWluZXIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQ2hlY2sgaWYgYWxsIG9mIHRoZSBlbnRyaWVzIGluIHRoZSBnaXZlbiBzZWxlY3QgYXJlIHJ1bnRpbWUgYWNjZXNzaWJsZSAoY3VycmVudGx5IG9ubHkgcmVsZXZhbnQgZm9yIHZlcnNpb25zKS4gKi9cclxuICAgIGZ1bmN0aW9uIGFsbEVudHJpZXNBY2Nlc3NpYmxlKHNlbGVjdCkge1xyXG4gICAgICAgIHZhciBhbGxBY2Nlc3NpYmxlID0gdHJ1ZTtcclxuICAgICAgICBpZiAoc2VsZWN0LmF0dHIoJ25hbWUnKSA9PT0gJ3Njcm9sbC12ZXJzaW9uczp2ZXJzaW9uLW5hbWUnKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChzZWxlY3QuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFsbEFjY2Vzc2libGUgJj0gKCQodGhpcykuYXR0cignZGF0YS12ZXJzaW9uLWFjY2Vzc2libGUnKSA9PT0gJ3RydWUnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbGxBY2Nlc3NpYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDcmVhdGUgdGhlIHRleHQgZm9yIHRoZSBkcm9wLWRvd24gZW50cmllcyAodmVyc2lvbiBlbnRyaWVzIG1heSBjb250YWluIHNvbWUgZXh0cmEgaW5mbyBvdGhlciB0aGFuIHRoZSBwcm9wZXJ0eSBuYW1lKS4gKi9cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZU9wdGlvblRleHQob3B0aW9uLCBzaG93VmVyc2lvbkFjY2Vzc2liaWxpdHkpIHtcclxuICAgICAgICB2YXIgb3B0aW9uVGV4dCA9IG9wdGlvbi50ZXh0KCk7XHJcbiAgICAgICAgaWYgKHNob3dWZXJzaW9uQWNjZXNzaWJpbGl0eSkge1xyXG4gICAgICAgICAgICB2YXIgdmVyc2lvbkFjY2Vzc2libGUgPSBvcHRpb24uYXR0cignZGF0YS12ZXJzaW9uLWFjY2Vzc2libGUnKTtcclxuICAgICAgICAgICAgaWYgKHZlcnNpb25BY2Nlc3NpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25UZXh0ICs9ICcgPHNwYW4gc3R5bGU9XCJmbG9hdDogcmlnaHQ7IG1hcmdpbi1sZWZ0OiAwLjhlbTsgY29sb3I6ICNkZGRkZGQ7JztcclxuICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uQWNjZXNzaWJsZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uVGV4dCArPSAndmlzaWJpbGl0eTogaGlkZGVuOyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvcHRpb25UZXh0ICs9ICdcIiBjbGFzcz1cImsxNXQtaWNvbi12aWV3cG9ydFwiPjwvc3Bhbj4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcHRpb25UZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvb2dsZURyb3Bkb3duKGNvbnRhaW5lciwgb3Blbikge1xyXG4gICAgICAgIGlmIChvcGVuKSB7XHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJChlLnRhcmdldCkuaXMoY29udGFpbmVyLmZpbmQoJyonKSkpcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdG9vZ2xlRHJvcGRvd24oY29udGFpbmVyLCAhb3Blbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCdib2R5JykudW5iaW5kKCdjbGljaycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRvZ2dsZSA9IGNvbnRhaW5lci5maW5kKCcuaHQtc2VsZWN0LWJ1dHRvbicpO1xyXG4gICAgICAgIHZhciBkcm9wZG93biA9IGNvbnRhaW5lci5maW5kKCcuaHQtZHJvcGRvd24nKTtcclxuXHJcbiAgICAgICAgaWYgKG9wZW4pIHtcclxuICAgICAgICAgICAgdG9nZ2xlLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgZHJvcGRvd24uYWRkQ2xhc3MoJ29wZW4nKTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChkcm9wZG93bi5maW5kKCdsaScpLCBmdW5jdGlvbiAoaW5kZXgsIHZhbCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5iaW5kKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uZmluZCgnbGkgYScpLnJlbW92ZUNsYXNzKCdob3ZlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnYScpLmFkZENsYXNzKCdob3ZlcicpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdhJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCdhJykuYXR0cignZGF0YS1zY3JvbGwtaW50ZWdyYXRpb24tbmFtZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ2EnKS5hdHRyKCdkYXRhLXNjcm9sbC1pbnRlZ3JhdGlvbi12YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ2EnKS5hdHRyKCdkYXRhLXNjcm9sbC1pbnRlZ3JhdGlvbi10aXRsZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGUuZmluZCgnc3BhbicpLnRleHQodGl0bGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgJz8nICsgbmFtZSArICc9JyArIHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHRvZ2dsZS5jbG9zZXN0KCdmb3JtJykuZmluZCgnaW5wdXRbbmFtZT1jb250ZXh0XScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCArPSAnJmNvbnRleHQ9JyArIGNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRhcmdldDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b2dnbGUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICBkcm9wZG93bi5yZW1vdmVDbGFzcygnb3BlbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgPSAgICAgICAgICAgIEluaXQgRm9vdGVyICAgICAgICAgICAgPVxyXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuICAgIGZ1bmN0aW9uIGluaXRGb290ZXIoKSB7XHJcbiAgICAgICAgY2hlY2tGb290ZXIoKTtcclxuXHJcbiAgICAgICAgJCgnI2h0LWp1bXAtdG9wJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICQoJ2JvZHksaHRtbCcpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogMH0sXHJcbiAgICAgICAgICAgICAgICAxMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoZWNrRm9vdGVyKCkge1xyXG4gICAgICAgIGlmICgkKCdhcnRpY2xlLmh0LWNvbnRlbnQnKS5vdXRlckhlaWdodCgpIDwgJCh3aW5kb3cpLmlubmVySGVpZ2h0KCkpIHtcclxuICAgICAgICAgICAgJCgnI2h0LWp1bXAtdG9wJykuZmFkZU91dCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJyNodC1qdW1wLXRvcCcpLmZhZGVJbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICA9ICAgICAgICAgICAgTWVkaWEgUXVlcnkgRGV0ZWN0aW9uICAgICAgICAgICAgPVxyXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbiAgICBmdW5jdGlvbiBjaGVja0RldmljZShyZXNpemUpIHsgLy8gQ1VTVE9NIC0gcmVzaXplIHBhcmFtZXRlciBhZGRlZCB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gcGFnZSBsb2FkIGFuZCByZXNpemUgY2FsbHNcclxuICAgICAgICB2YXIgaSA9IHBhcnNlSW50KCQoJyNodC1tcS1kZXRlY3QnKS5jc3MoJ3dpZHRoJykucmVwbGFjZSgncHgnLCAnJykpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGkpIHtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgPSAnbW9iaWxlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgPSAncG90cmFpdCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0ID0gJ2xhbmRzY2FwZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0ID0gJ2Rlc2t0b3AnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydCA9ICdkZXNrdG9wJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGJhc2VVcmwgPSAkKFwibWV0YVtuYW1lPSdjb25mbHVlbmNlLWJhc2UtdXJsJ11cIikuYXR0cihcImNvbnRlbnRcIik7XHJcbiAgICAgICAgdmFyIHNwYWNlS2V5ID0gJChcIm1ldGFbbmFtZT0nY29uZmx1ZW5jZS1zcGFjZS1rZXknXVwiKS5hdHRyKFwiY29udGVudFwiKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHZhciBob21lUGF0aCA9IGJhc2VVcmw7XHJcblx0XHQvLyBIYW5kbGluZyBmb3IgY2FzZXMgd2hlcmUgdGhlIHZlcnNpb24gaXMgZGlzcGxheWVkIHdpdGhvdXQgYSBzcGFjZSBrZXkgaW4gdGhlIFVSTFxyXG5cdFx0aWYgKHNwYWNlS2V5ICE9PSBDT05GSUcuRE9DX1JPT1RfVVJMX1NQQUNFX0tFWSkge1xyXG5cdFx0XHRob21lUGF0aCA9IGhvbWVQYXRoICsgJy8nICsgc3BhY2VLZXk7XHJcblx0XHR9XHJcbiAgICAgICAgdmFyIGN1cnJQYXRoID0gJChsb2NhdGlvbikuYXR0cignaHJlZicpO1xyXG5cclxuICAgICAgICAvLyBObyBzaWRlYmFyIGZvciBob21lcGFnZXMgYW5kIHNlYXJjaCByZXN1bHRzICsgQ29sbGFwc2VkIHNtYWxsIHNlYXJjaCBib3ggZm9yIHNtYWxsZXIgc2NyZWVuc1xyXG4gICAgICAgIGlmICggIShjdXJyUGF0aCA9PSBob21lUGF0aCB8fCBjdXJyUGF0aCA9PSAoaG9tZVBhdGggKyAnLycpIHx8IGN1cnJQYXRoLmluZGV4T2YoaG9tZVBhdGggKyAnL3NlYXJjaCcpID49IDApICl7XHJcbiAgICAgICAgICAgIGlmICh2aWV3cG9ydCA9PSAnZGVza3RvcCcpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzaXplKSB7IC8vIERvZXMgbm90IGF1dG8tb3BlbiB0aGUgc2lkZWJhciB3aGVuIHJlc2l6aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCcpLmFkZENsYXNzKCdzaG93LXNpZGViYXInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5yZW1vdmVDbGFzcygnc2hvdy1zaWRlYmFyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgXHRpZiAodmlld3BvcnQgPT0gJ2Rlc2t0b3AnIHx8IHZpZXdwb3J0ID09ICdsYW5kc2NhcGUnKSB7XHJcbiAgICAgICAgICAgICAgXHQkKCcuc2VhcmNoLWlucHV0JykuYWRkQ2xhc3MoJ3Nob3cnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBcdCQoJy5zZWFyY2gtaW5wdXQnKS5yZW1vdmVDbGFzcygnc2hvdycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBPbmNlIHJlbmRlcmVkLCBhZGQgQ1NTIGFuaW1hdGlvbiBjbGFzcyB0byBzaWRlYmFyIGVsZW1lbnRcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7JCgnI2h0LXNpZGViYXInKS5hZGRDbGFzcygnYW5pbWF0ZScpO30sNTAwKTtcclxuICAgICAgXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7JCgnLnNlYXJjaC1pbnB1dCcpLmFkZENsYXNzKCdhbmltYXRlJyk7fSw1MDApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICA9ICAgICAgICAgICAgV2luZG93IFJlc2l6ZSAgICAgICAgICAgID1cclxuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuICAgIHZhciBydGltZSA9IG5ldyBEYXRlKDEsIDEsIDIwMDAsIDEyLCAwLCAwKTtcclxuICAgIHZhciB0aW1lb3V0ID0gZmFsc2U7XHJcbiAgICB2YXIgZGVsdGEgPSAyMDA7XHJcbiAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBydGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgaWYgKHRpbWVvdXQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJlc2l6ZWVuZCwgZGVsdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2l6ZWVuZCgpIHtcclxuICAgICAgICBpZiAobmV3IERhdGUoKSAtIHJ0aW1lIDwgZGVsdGEpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChyZXNpemVlbmQsIGRlbHRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aW1lb3V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNoZWNrRm9vdGVyKCk7XHJcbiAgICAgICAgICAgIGNoZWNrRGV2aWNlKHRydWUpOyAvLyBDVVNUT00gLSB0cnVlIHBhcmFtZXRlciB0byBpbmRpY2F0ZSB0aGF0IHRoZSBjYWxsIGlzIG9uIHJlc2l6ZVxyXG4gICAgICAgICAgICBjaGVja0dyaWQoKTtcclxuICAgICAgICAgICAgLy8gc2V0Q29udGVudFdpZHRoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9wZW5TZWxlY3Qoc2VsZWN0b3IpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9ICQoc2VsZWN0b3IpWzBdLCB3b3JrZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7IC8vIGFsbCBicm93c2Vyc1xyXG4gICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XHJcbiAgICAgICAgICAgIGUuaW5pdE1vdXNlRXZlbnQoXCJtb3VzZWRvd25cIiwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XHJcbiAgICAgICAgICAgIHdvcmtlZCA9IGVsZW1lbnQuZGlzcGF0Y2hFdmVudChlKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmZpcmVFdmVudCkgeyAvLyBpZVxyXG4gICAgICAgICAgICB3b3JrZWQgPSBlbGVtZW50LmZpcmVFdmVudChcIm9ubW91c2Vkb3duXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXdvcmtlZCkgeyAvLyB1bmtub3duIGJyb3dzZXIgLyBlcnJvclxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgID0gICAgICAgICAgICAgS2V5Ym9hcmQgICAgICAgICAgICAgID1cclxuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuICAgIHZhciBzZWFyY2hGaWVsZEFjdGl2ZTtcclxuICAgIHZhciBsYXN0S2V5O1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRLZXlib2FyZCgpIHtcclxuICAgICAgICBzZWFyY2hGaWVsZEFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAkKCdib2R5JykuYmluZCgna2V5dXAnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoc2VhcmNoRmllbGRBY3RpdmUgJiYgZS53aGljaCAhPSAyNykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGUud2hpY2gpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjE5OiAvLyBbXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXdwb3J0ICE9PSAnZGVza3RvcCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2lkZWJhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIDE5MTogLy8gL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2lkZWJhckV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5TZWFyY2goKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSA3MTogLy8gZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0S2V5ID09IDcxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2lkZWJhckV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuU2VhcmNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAyNzogLy8gZXNjXHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VTZWFyY2goKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGFzdEtleSA9IGUud2hpY2g7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgID0gICAgICAgICAgICAgIENvb2tpZXMgICAgICAgICAgICAgICA9XHJcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcblxyXG4gICAgZnVuY3Rpb24gc2V0Q29va2llKGNuYW1lLCBjdmFsdWUpIHtcclxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLm9yaWdpbiA9PSAnZmlsZTovLycpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGNuYW1lLCBjdmFsdWUpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU2F2aW5nIHRoZSBzdGF0ZSBvZiB0aGUgZHJhZy1iYXIgaXMgbm90IHN1cHBvcnRlZCBiZWNhdXNlIGxvY2FsU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIGQuc2V0VGltZShkLmdldFRpbWUoKSArICgyNCAqIDYwICogNjAgKiAxMDAwKSk7XHJcbiAgICAgICAgICAgIHZhciBleHBpcmVzID0gXCJleHBpcmVzPVwiICsgZC50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjbmFtZSArIFwiPVwiICsgY3ZhbHVlICsgXCI7IFwiICsgZXhwaXJlcyArIFwiOyBwYXRoPS9cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q29va2llKGNuYW1lKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gPT0gJ2ZpbGU6Ly8nKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjbmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU2F2aW5nIHRoZSBzdGF0ZSBvZiB0aGUgZHJhZy1iYXIgaXMgbm90IHN1cHBvcnRlZCBiZWNhdXNlIGxvY2FsU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGNuYW1lICsgXCI9XCI7XHJcbiAgICAgICAgICAgIHZhciBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGNhW2ldO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGMuY2hhckF0KDApID09ICcgJykgYyA9IGMuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgID0gICAgICAgICAgICAgICBHUklEICAgICAgICAgICAgICAgICA9XHJcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcblxyXG4gICAgZnVuY3Rpb24gY2hlY2tHcmlkKCkge1xyXG4gICAgICAgIGlmICgkKCcjaHQtd3JhcC1jb250YWluZXInKS53aWR0aCgpID4gNjQwKSB7XHJcbiAgICAgICAgICAgICQoJyNodC13cmFwLWNvbnRhaW5lcicpLmFkZENsYXNzKCdzcC1ncmlkLWZsb2F0Jyk7XHJcbiAgICAgICAgICAgICQoJyNodC13cmFwLWNvbnRhaW5lcicpLnJlbW92ZUNsYXNzKCdzcC1ncmlkLWZsdWlkJyk7XHJcbiAgICAgICAgICAgIC8vIFB1dHMgc2lkZSBjZWxsIGFmdGVyIG1haW4gY2VsbFxyXG4gICAgICAgICAgICAkKCcuc3AtZ3JpZC1jZWxsLnNwLWdyaWQtNjAnKS5maXJzdCgpLmFmdGVyKCQoJy5zcC1ncmlkLWNlbGwuc3AtZ3JpZC00MCcpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjaHQtd3JhcC1jb250YWluZXInKS5hZGRDbGFzcygnc3AtZ3JpZC1mbHVpZCcpO1xyXG4gICAgICAgICAgICAkKCcjaHQtd3JhcC1jb250YWluZXInKS5yZW1vdmVDbGFzcygnc3AtZ3JpZC1mbG9hdCcpO1xyXG4gICAgICAgICAgICAvLyBQdXRzIG1haW4gY2VsbCBiZWZvcmUgc2lkZSBjZWxsXHJcbiAgICAgICAgICAgICQoJy5zcC1ncmlkLWNlbGwuc3AtZ3JpZC02MCcpLmZpcnN0KCkuYmVmb3JlKCQoJy5zcC1ncmlkLWNlbGwuc3AtZ3JpZC00MCcpKTtcclxuICAgICAgICB9ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICA9ICAgICAgICAgICAgIENsaXBib2FyZCAgICAgICAgICAgICAgPVxyXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG4gICAgKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIGNsaXBib2FyZFRpbWVvdXQ7XHJcblxyXG4gICAgICAgIHZhciBjbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkSlMoJy5qcy1jb2RlQ2xpcGJvYXJkJywge1xyXG4gICAgICAgICAgICB0YXJnZXQ6IGZ1bmN0aW9uKHRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkcGFuZWwgPSAkKHRyaWdnZXIpLmNsb3Nlc3QoJy5qcy1jb2RlUGFuZWwnKTtcclxuICAgICAgICAgICAgICAgIHZhciAkY29kZSA9ICRwYW5lbC5maW5kKCcuanMtY29kZScpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiAkY29kZVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjbGlwYm9hcmQub24oJ3N1Y2Nlc3MnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJHRyaWdnZXIgPSAkKGUudHJpZ2dlcik7XHJcbiAgICAgICAgICAgICR0cmlnZ2VyLmFkZENsYXNzKCdpcy1jb3BpZWQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjbGlwYm9hcmRUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGNsaXBib2FyZFRpbWVvdXQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbGlwYm9hcmRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkdHJpZ2dlci5yZW1vdmVDbGFzcygnaXMtY29waWVkJyk7XHJcbiAgICAgICAgICAgIH0sIDIwMDApO1xyXG5cclxuICAgICAgICAgICAgZS5jbGVhclNlbGVjdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSgpKVxyXG59KSgkKTtcclxuIl19
