!function(e){window.SCROLL_WEBHELP=window.SCROLL_WEBHELP||{},window.SCROLL_WEBHELP.escapeHtml=function(t){return e("<div />").text(t).html()};var t="desktop";navigator.userAgent.indexOf("MSIE")>0||navigator.userAgent.indexOf("Trident"),Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor");function n(){e("body").bind("click",(function(t){!e(t.target).parents("#ht-search").length&&e("#ht-search").hasClass("open")&&(e("body").unbind("click"),a())})),e("#ht-search").addClass("open"),setTimeout((function(){e(".ht-search-clear").addClass("show")}),250),d=!0,e(".search-input")[0].focus()}function a(){input=e("#ht-search"),input.find(".ht-search-dropdown").removeClass("open"),e(".ht-search-dropdown a.hover").removeClass("hover"),e(document).unbind("keydown")}function o(t){var n=e(".ht-search-input .ht-search-dropdown"),a=n.find("ul");t=encodeURIComponent(t),a.empty();window.SCROLL_WEBHELP&&window.SCROLL_WEBHELP.search&&window.SCROLL_WEBHELP.search.performSearch(t,(function(t,o){e.each(t,(function(e,t){a.append('<li n="'+e+'" class="search-result"><a href="'+t.link.toLowerCase().replace(".html","")+'">'+SCROLL_WEBHELP.escapeHtml(t.title)+"</a></li>")}));var r=e('<li class="search-key" n="'+t.length+'"></li>'),c=e('<a class="search-key-button" href="#">Search:&nbsp;</a>'),d=e("<b></b>").text(decodeURIComponent(o)),h=r.append(c.append(d));h.bind("click",(function(e){s(),e.preventDefault()})),a.append(h),a.children("li").each((function(t,n){var o=e(n);o.bind("mouseover",(function(){a.find("li a").removeClass("hover"),o.find("a").addClass("hover")}))})),n.addClass("open"),e("#search input.search-input").on("keydown",(function(e){switch(e.which){case 38:i(-1,n);break;case 40:i(1,n);break;default:return}e.preventDefault()}))}))}function i(t,n){var a=n.find("a").length,o=parseInt(n.find("a.hover").parent().attr("n"));isNaN(o)&&(o=-1);var i=o+t,s=n.height()-2,r=parseInt(n.find("a.hover").outerHeight());i<0||i>=a||e.each(n.find("a"),(function(t,a){t==o&&e(this).removeClass("hover"),t==i&&(e(this).addClass("hover"),r*(t+1)-n.scrollTop()>s?n.scrollTop(r*(t+1)-s):r*(t+1)-n.scrollTop()<r&&n.scrollTop()>0&&n.scrollTop(r*t))}))}function s(){var t=e(".ht-search-dropdown a.hover");0!=t.length?t.is(".search-key-button")?kenticoThemeOpenSearchResultsPage():window.location.href=t.attr("href"):kenticoThemeOpenSearchResultsPage()}function r(){e("article.ht-content").outerHeight()<e(window).innerHeight()?e("#ht-jump-top").fadeOut():e("#ht-jump-top").fadeIn()}function c(n){switch(parseInt(e("#ht-mq-detect").css("width").replace("px",""))){case 1:t="mobile";break;case 2:t="potrait";break;case 3:t="landscape";break;case 4:case 5:t="desktop"}var a=e("meta[name='confluence-base-url']").attr("content"),o=e("meta[name='confluence-space-key']").attr("content").toLowerCase(),i=a;o!==CONFIG.DOC_ROOT_URL_SPACE_KEY&&(i=i+"/"+o);var s=e(location).attr("href");s==i||s==i+"/"||s.indexOf(i+"/search")>=0||("desktop"==t?n||e("html").addClass("show-sidebar"):e("html").removeClass("show-sidebar"),"desktop"==t||"landscape"==t?e(".search-input").addClass("show"):e(".search-input").removeClass("show")),setTimeout((function(){e("#ht-sidebar").addClass("animate")}),500),setTimeout((function(){e(".search-input").addClass("animate")}),500)}e(document).ready((function(){c(!1),function(){window.SCROLL&&window.SCROLL.initPageTree&&window.SCROLL.initPageTree();e("#ht-menu-toggle").bind("click",(function(e){e.preventDefault(),setTimeout(toggleSidebar(),.05)}))}(),w(),function(){var t=function(e,t){var n,a;return function(){var o=arguments,i=this,s=function(){a=e.apply(i,o)};return clearTimeout(n),n=setTimeout(s,t),a}},n=t(o,200),a=e("#search input.search-input");a.on("focus",(function(e){d=!0,a.on("blur",(function(e){d=!1}))})),a.on("input",(function(t){var o=a.val();o.length>=3&&n(o),0==o.length&&e(".ht-search-dropdown").removeClass("open")})),a.on("keydown",(function(e){13===e.which&&s()})),e("form#search").on("submit",(function(){return!1}))}(),e("#ht-search-button").bind("click",(function(e){e.preventDefault(),n()})),e("#searchButton").bind("click",(function(t){t.preventDefault(),e(".search-input").hasClass("show")||e(".search-input").is(":visible")?s():e(".search-input").addClass("show")})),e(".ht-search-clear").bind("click",(function(e){e.preventDefault(),a()})),r(),e("#ht-jump-top").bind("click",(function(t){t.preventDefault(),e("body,html").animate({scrollTop:0},100)})),d=!1,e("body").bind("keyup",(function(e){if(!d||27==e.which){switch(e.which){case 219:"desktop"!==t&&toggleSidebar();break;case 191:sidebarExpanded||n();break;case 71:71==h&&(sidebarExpanded||n());break;case 27:a()}h=e.which}})),e(".sp-picker").change((function(){e(this).closest("form").trigger("submit")})),function(){var t=500,n=10;window.location.hash&&setTimeout((function(){e(window).scrollTo(document.getElementById(window.location.hash.substr(1)),{offset:-(e("#ht-headerbar").height()+n),duration:t,interrupt:!0,axis:"y"})}),0);e(".ht-content").on("click",'a[href^="'+location.pathname+'\\#"], a[href^=\\#]',(function(a){a.preventDefault();var o=document.getElementById(this.hash.substr(1));return o||(o=document.getElementById(decodeURI(this.hash.substr(1)))),e(window).stop(!0).scrollTo(o,{offset:-(e("#ht-headerbar").height()+n),duration:t,interrupt:!0,axis:"y"}),history&&"file"!=location.protocol.substr(0,4)&&history.pushState({},"",e(a.target).attr("href")),!1}))}(),e("#ht-loader").hide()})),function(){var t=e(".js-header-search-open"),n=e(".js-header-search-close"),a=e(".js-header-search-box"),o=250;t.click((function(e){a.css("display","flex").hide().fadeIn(o)})),n.click((function(e){a.fadeOut(o)}));var i=e(".js-menu-toggle"),s=e("#ht-sidebar");function r(){i.removeClass("is-active"),s.fadeOut(o)}i.click((function(e){i.hasClass("is-active")?r():(i.addClass("is-active"),s.fadeIn(o))})),window.addEventListener("click",(function(e){i[0].contains(e.target)||s[0].contains(e.target)||r()}))}();var d,h,l,u=new Date(1,1,2e3,12,0,0),p=!1;function f(){new Date-u<200?setTimeout(f,200):(p=!1,r(),c(!0),w())}function w(){e("#ht-wrap-container").width()>640?(e("#ht-wrap-container").addClass("sp-grid-float"),e("#ht-wrap-container").removeClass("sp-grid-fluid"),e(".sp-grid-cell.sp-grid-60").first().after(e(".sp-grid-cell.sp-grid-40"))):(e("#ht-wrap-container").addClass("sp-grid-fluid"),e("#ht-wrap-container").removeClass("sp-grid-float"),e(".sp-grid-cell.sp-grid-60").first().before(e(".sp-grid-cell.sp-grid-40")))}e(window).resize((function(){u=new Date,!1===p&&(p=!0,setTimeout(f,200))})),new ClipboardJS(".js-codeClipboard",{target:function(t){return e(t).closest(".js-codePanel").find(".js-code")[0]}}).on("success",(function(t){var n=e(t.trigger);n.addClass("is-copied"),l&&window.clearTimeout(l),l=window.setTimeout((function(){n.removeClass("is-copied")}),2e3),t.clearSelection()}))}($);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
