!function(e){window.SCROLL_WEBHELP=window.SCROLL_WEBHELP||{},window.SCROLL_WEBHELP.escapeHtml=function(t){return e("<div />").text(t).html()};var t="desktop";navigator.userAgent.indexOf("MSIE")>0||navigator.userAgent.indexOf("Trident"),Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor");function n(){e("body").bind("click",(function(t){!e(t.target).parents("#ht-search").length&&e("#ht-search").hasClass("open")&&(e("body").unbind("click"),a())})),e("#ht-search").addClass("open"),setTimeout((function(){e(".ht-search-clear").addClass("show")}),250),d=!0,e(".search-input")[0].focus()}function a(){input=e("#ht-search"),input.find(".ht-search-dropdown").removeClass("open"),e(".ht-search-dropdown a.hover").removeClass("hover"),e(document).unbind("keydown")}function i(t){var n=e(".ht-search-input .ht-search-dropdown"),a=n.find("ul");t=encodeURIComponent(t),a.empty();window.SCROLL_WEBHELP&&window.SCROLL_WEBHELP.search&&window.SCROLL_WEBHELP.search.performSearch(t,(function(t,i){e.each(t,(function(e,t){a.append('<li n="'+e+'" class="search-result"><a href="'+t.link+'">'+SCROLL_WEBHELP.escapeHtml(t.title)+"</a></li>")}));var r=e('<li class="search-key" n="'+t.length+'"></li>'),c=e('<a class="search-key-button" href="#">Search:&nbsp;</a>'),d=e("<b></b>").text(decodeURIComponent(i)),h=r.append(c.append(d));h.bind("click",(function(e){s(),e.preventDefault()})),a.append(h),a.children("li").each((function(t,n){var i=e(n);i.bind("mouseover",(function(){a.find("li a").removeClass("hover"),i.find("a").addClass("hover")}))})),n.addClass("open"),e("#search input.search-input").on("keydown",(function(e){switch(e.which){case 38:o(-1,n);break;case 40:o(1,n);break;default:return}e.preventDefault()}))}))}function o(t,n){var a=n.find("a").length,i=parseInt(n.find("a.hover").parent().attr("n"));isNaN(i)&&(i=-1);var o=i+t,s=n.height()-2,r=parseInt(n.find("a.hover").outerHeight());o<0||o>=a||e.each(n.find("a"),(function(t,a){t==i&&e(this).removeClass("hover"),t==o&&(e(this).addClass("hover"),r*(t+1)-n.scrollTop()>s?n.scrollTop(r*(t+1)-s):r*(t+1)-n.scrollTop()<r&&n.scrollTop()>0&&n.scrollTop(r*t))}))}function s(){var t=e(".ht-search-dropdown a.hover");0!=t.length?t.is(".search-key-button")?kenticoThemeOpenSearchResultsPage():window.location.href=t.attr("href"):kenticoThemeOpenSearchResultsPage()}function r(){e("article.ht-content").outerHeight()<e(window).innerHeight()?e("#ht-jump-top").fadeOut():e("#ht-jump-top").fadeIn()}function c(n){switch(parseInt(e("#ht-mq-detect").css("width").replace("px",""))){case 1:t="mobile";break;case 2:t="potrait";break;case 3:t="landscape";break;case 4:case 5:t="desktop"}var a=e("meta[name='confluence-base-url']").attr("content"),i=e("meta[name='confluence-space-key']").attr("content").toLowerCase(),o=a;i!==CONFIG.DOC_ROOT_URL_SPACE_KEY&&(o=o+"/"+i);var s=e(location).attr("href");s==o||s==o+"/"||s.indexOf(o+"/search")>=0||("desktop"==t?n||e("html").addClass("show-sidebar"):e("html").removeClass("show-sidebar"),"desktop"==t||"landscape"==t?e(".search-input").addClass("show"):e(".search-input").removeClass("show")),setTimeout((function(){e("#ht-sidebar").addClass("animate")}),500),setTimeout((function(){e(".search-input").addClass("animate")}),500)}e(document).ready((function(){c(!1),function(){window.SCROLL&&window.SCROLL.initPageTree&&window.SCROLL.initPageTree();e("#ht-menu-toggle").bind("click",(function(e){e.preventDefault(),setTimeout(toggleSidebar(),.05)}))}(),w(),function(){var t=function(e,t){var n,a;return function(){var i=arguments,o=this,s=function(){a=e.apply(o,i)};return clearTimeout(n),n=setTimeout(s,t),a}},n=t(i,200),a=e("#search input.search-input");a.on("focus",(function(e){d=!0,a.on("blur",(function(e){d=!1}))})),a.on("input",(function(t){var i=a.val();i.length>=3&&n(i),0==i.length&&e(".ht-search-dropdown").removeClass("open")})),a.on("keydown",(function(e){13===e.which&&s()})),e("form#search").on("submit",(function(){return!1}))}(),e("#ht-search-button").bind("click",(function(e){e.preventDefault(),n()})),e("#searchButton").bind("click",(function(t){t.preventDefault(),e(".search-input").hasClass("show")||e(".search-input").is(":visible")?s():e(".search-input").addClass("show")})),e(".ht-search-clear").bind("click",(function(e){e.preventDefault(),a()})),r(),e("#ht-jump-top").bind("click",(function(t){t.preventDefault(),e("body,html").animate({scrollTop:0},100)})),d=!1,e("body").bind("keyup",(function(e){if(!d||27==e.which){switch(e.which){case 219:"desktop"!==t&&toggleSidebar();break;case 191:sidebarExpanded||n();break;case 71:71==h&&(sidebarExpanded||n());break;case 27:a()}h=e.which}})),e(".sp-picker").change((function(){e(this).closest("form").trigger("submit")})),function(){var t=500,n=10;window.location.hash&&setTimeout((function(){e(window).scrollTo(document.getElementById(window.location.hash.substr(1)),{offset:-(e("#ht-headerbar").height()+n),duration:t,interrupt:!0,axis:"y"})}),0);e(".ht-content").on("click",'a[href^="'+location.pathname+'\\#"], a[href^=\\#]',(function(a){a.preventDefault();var i=document.getElementById(this.hash.substr(1));return i||(i=document.getElementById(decodeURI(this.hash.substr(1)))),e(window).stop(!0).scrollTo(i,{offset:-(e("#ht-headerbar").height()+n),duration:t,interrupt:!0,axis:"y"}),history&&"file"!=location.protocol.substr(0,4)&&history.pushState({},"",e(a.target).attr("href")),!1}))}(),e("#ht-loader").hide()})),function(){var t=e(".js-header-search-open"),n=e(".js-header-search-close"),a=e(".js-header-search-box"),i=250;t.click((function(e){a.css("display","flex").hide().fadeIn(i)})),n.click((function(e){a.fadeOut(i)}));var o=e(".js-menu-toggle"),s=e("#ht-sidebar");function r(){o.removeClass("is-active"),s.fadeOut(i)}o.click((function(e){o.hasClass("is-active")?r():(o.addClass("is-active"),s.fadeIn(i))})),window.addEventListener("click",(function(e){o[0].contains(e.target)||s[0].contains(e.target)||r()}))}();var d,h,l,u=new Date(1,1,2e3,12,0,0),p=!1;function f(){new Date-u<200?setTimeout(f,200):(p=!1,r(),c(!0),w())}function w(){e("#ht-wrap-container").width()>640?(e("#ht-wrap-container").addClass("sp-grid-float"),e("#ht-wrap-container").removeClass("sp-grid-fluid"),e(".sp-grid-cell.sp-grid-60").first().after(e(".sp-grid-cell.sp-grid-40"))):(e("#ht-wrap-container").addClass("sp-grid-fluid"),e("#ht-wrap-container").removeClass("sp-grid-float"),e(".sp-grid-cell.sp-grid-60").first().before(e(".sp-grid-cell.sp-grid-40")))}e(window).resize((function(){u=new Date,!1===p&&(p=!0,setTimeout(f,200))})),new ClipboardJS(".js-codeClipboard",{target:function(t){return e(t).closest(".js-codePanel").find(".js-code")[0]}}).on("success",(function(t){var n=e(t.trigger);n.addClass("is-copied"),l&&window.clearTimeout(l),l=window.setTimeout((function(){n.removeClass("is-copied")}),2e3),t.clearSelection()}))}($);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
