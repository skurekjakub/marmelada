var longToByteArray=function(e){for(var o=[0,0,0,0],t=0;t<o.length;t++){var n=255&e;o[t]=n,e=(e-n)/256}return o},pageIdToB64=function(e){return btoa(longToByteArray(e).map(String.fromCharCode).map((function(e){return e[0]})).join("")).replace(/=/g,"")},generateTinyId=function(e){for(var o=!0,t="",n=e.length-1;n>=0;n--){var i=e.charAt(n);"="!==i&&"\n"!=i&&(o&&"A"===i||(o=!1,t="/"===i?"-"+t:"+"===i?"_"+t:i+t))}if(t.length>0){var r=t.charAt(t.length-1);"-"!==r&&"_"!==r||(t+="/")}return t};CONFIG.CONFLUENCE_PAGE_TINYID=generateTinyId(pageIdToB64(CONFIG.CONFLUENCE_PAGE_ID));var displayPageUrlId=function(e){var o=CONFIG.CONFLUENCE_PAGE_TINYID;o?$.ajax({url:CONFIG.HELPSERVICE_URLID_ENDPOINT+o,success:function(e){var t=JSON.parse(e);t.hasOwnProperty("Identifier")?$("#pageUrlId").text(" Help Service ID: "+t.Identifier+" (TinyID: "+o+")"):$("#pageUrlId").text(" Help Service ID: "+t.Error)},timeout:800}):$("#pageUrlId").text("Error when generating the page tiny ID. See the console for details.")};Prism.plugins.NormalizeWhitespace.setDefaults({"remove-trailing":!0,"remove-indent":!0,"left-trim":!0,"right-trim":!0,"remove-initial-line-feed":!1,"tabs-to-spaces":4});var setExportPdf=function(){var e=$("body").attr("data-pagetitle");$("#export-pdf").attr("href","../pdf/".concat(CONFIG.CONFLUENCE_SPACE_KEY.toLowerCase(),"/").concat(e.toLowerCase().replace(/ /g,"-"),".pdf"))};$(document).ready(setExportPdf);var versionSwitcherData,openPageLink=function(e){CONFIG.CONFLUENCE_PAGE_TINYID?togglePageLinkPanel(CONFIG.BASE_URL+"/x/"+CONFIG.CONFLUENCE_PAGE_TINYID):togglePageLinkPanel(window.location.href)},togglePageLinkPanel=function(e){$("#page-link-textbox").attr("value",e),$("#page-link-panel").hasClass("show")?$("#page-link-panel").removeClass("show"):$("#page-link-panel").addClass("show")},copyPageLinkToClip=function(){void 0===navigator.clipboard?Snackbar.show({text:"An error occurred while copying the page link to the clipboard",pos:"top-right",showAction:!1,customClass:"box-general box-warning",duration:"3500",backgroundColor:"#FFEBEB",textColor:"#151515"}):navigator.clipboard.writeText($("#page-link-textbox").attr("value")).then((function(){Snackbar.show({text:"Page link copied",pos:"top-right",showAction:!1,customClass:"box-general box-info",duration:"2500",backgroundColor:"#EEF3FC",textColor:"#151515"})})).catch((function(){Snackbar.show({text:"An error occurred while copying the page link to the clipboard",pos:"top-right",showAction:!1,customClass:"box-general box-warning",duration:"3500",backgroundColor:"#FFEBEB",textColor:"#151515"})}))},closePageLink=function(){return $("#page-link-panel").removeClass("show")},getVersionTextFromVersionId=function(e){return DOCUMENTATION_VERSIONS.find((function(o){return o.versionId==e})).versionText},getVersionTextFromHelpServiceId=function(e){return DOCUMENTATION_VERSIONS.find((function(o){return o.helpServiceVersion==e})).versionText},loadVersionLinkData=function(e){$.ajax({dataType:"json",url:CONFIG.HELPSERVICE_LISTALTVERSIONLINKS_ENDPOINT+e,timeout:2e3,tryCount:0,retryLimit:3,success:function(e){versionSwitcherData=e},error:function(e,o,t){if("timeout"==o)return this.tryCount++,this.tryCount<=this.retryLimit?void $.ajax(this):void 0}})},versionLinkUpdateDone=!1,insertVersionLinks=function(e){void 0!==e?(versionLinkUpdateDone||(e.forEach((function(e){var o=$(".js-menuDdl-version a:contains("+getVersionTextFromHelpServiceId(e.VersionUrlId)+")");o&&(o.attr("href",e.Url),o.addClass(" populated"))})),$(".js-menuDdl-version a").toArray().forEach((function(e){e.classList.contains("populated")||(e.classList.add("empty"),"Xperience 13"===e.textContent?(e.setAttribute("href",CONFIG.XPERIENCE13_MISSING_PAGES_URL+"?ref="+$(location).attr("href").split("/").pop()),e.setAttribute("title","The current page is not available in the Xperience 13 documentation. \r\nYou will be redirected to a general guidance page.")):"Xperience by Kentico"===e.textContent?(e.setAttribute("href",CONFIG.XP_MISSING_PAGES_URL+"?ref="+$(location).attr("href").split("/").pop()),e.setAttribute("title","The current page is not available in the Xperience by Kentico documentation. \r\nYou will be redirected to a general guidance page.")):e.setAttribute("title","The current page is not available for this documentation version. \r\nYou will be redirected to the home page for this version."))})),versionLinkUpdateDone=!0),openCloseVersionDdl()):openCloseVersionDdl()},insertSearchVersionLinks=function(){versionLinkUpdateDone||($(".js-menuDdl-version a").each((function(){var e=this.href.split("/"),o=getDocVersion(e[e.length-1]),t="/"!==this.href.slice(-1)?"/":"";if(CONFIG.CONFLUENCE_DEVMODEL_VERSIONSWITCHER_WHITELIST.indexOf(o)>=0)this.href=this.href+t+"search"+window.location.search;else{for(var n=window.location.search.split("&"),i=n.length;i-- >0;)0==n[i].indexOf("l=")&&n.splice(i,1);this.href=this.href+t+"search"+n.join("&")}})),versionLinkUpdateDone=!0);openCloseVersionDdl()},openCloseDocTypeDdl=function(){$(".js-menuDdl-docType").toggleClass("show"),$(".js-menuDdlBtn-docType").toggleClass("opened")},openCloseVersionDdl=function(){$(".js-menuDdl-version").toggleClass("show"),$(".js-menuDdlBtn-version").toggleClass("opened")},getDocType=function(e){return/api/i.test(e)?"API Examples":/tutorial/i.test(e)?"Tutorial":"Documentation"},getDocVersion=function(e){switch(e){case"K12SP":case"API12SP":case"K12SPTutorial":return"12sp";case"XP":case"Tutorial":case"Api":return"xp";default:return e.replace(/[^0-9]/g,"")}},getVersionLinkTitle=function(e){return"12sp"===e?"Kentico 12 Service Pack":getVersionTextFromVersionId(e)},buildDocLink=function(e,o,t,n){var i,r="/";if(-1===CONFIG.OBSOLETE_SPACE_KEY_FORMAT_VERSIONS.indexOf(e)){var a="xp"===e?"":e;switch(o){case"Tutorial":i=a+"tutorial";break;case"API Examples":i=a+"api";break;default:i=e}i===CONFIG.DOC_ROOT_URL_SPACE_KEY&&(i="",r="")}else switch(o){case"Tutorial":i="k"+e+"tutorial";break;case"API Examples":i="api"+e;break;default:i="k"+e}$('[name="ajs-base-url"]').attr("content");var s=t?o:getVersionTextFromVersionId(e);return'<li><a href="'+r+i+'"'+('class="'+(n?" current":"")+'"')+(' title="'+(t?o:getVersionLinkTitle(e))+'"')+">"+s+"</a></li>"},loadDocVersionHeaderList=function(e,o){var t=$('[name="confluence-user-logged-in"]').attr("content"),n=DOCUMENTATION_VERSIONS.filter((function(o){return("API Examples"!==e||"8"!==o.versionId&&"81"!==o.versionId&&"82"!==o.versionId)&&("true"===t||o.versionId!==CONFIG.DEV_DOCUMENTATION_VERSION_ID)&&"12"!==o.versionId})),i="";n.forEach((function(t){t.versionId==CONFIG.NEWEST_UNSUPPORTED_VERSION_ID&&(i+='<li class="js-unsupported-versions"><button class="header-ddl-button-nested js-unsupported-versions-button">All versions</button><ul class="menu-ddl-content nested-list docVersion js-unsupported-versions-list">'),i+=buildDocLink(t.versionId,e,!1,t.versionId==o)})),i+="</ul></li>",$(".js-menuDdlBtn-version").html(getVersionTextFromVersionId(o)),$(".js-menuDdl-version").html(i)};$(document).on("click",".js-unsupported-versions-button",(function(){$(".js-unsupported-versions-list").toggleClass("show"),$(".js-unsupported-versions-list").toggleClass("opened")}));var loadDocTypeHeaderList=function(e,o){var t=["Documentation","Tutorial","API Examples"];t=t.filter((function(o){return"8"!==e&&"81"!==e&&"82"!==e||"API Examples"!==o}));var n="";t.forEach((function(t){n+=buildDocLink(e,t,!0,t==o)})),$(".js-menuDdlBtn-docType").html(o),$(".js-menuDdl-docType").html(n)},loadHeaderLists=function(){var e=getDocVersion(CONFIG.CONFLUENCE_SPACE_KEY),o=getDocType(CONFIG.CONFLUENCE_SPACE_KEY);loadDocTypeHeaderList(e,o),loadDocVersionHeaderList(o,e)},closeHeaderDropDowns=function(e){var o=$(".js-menuDdlBtn-docType"),t=$(".js-menuDdlBtn-version"),n=$(".js-unsupported-versions-button"),i=$(".js-unsupported-versions-list"),r=$(".js-menuDdlBtn-devModel"),a=$(".js-menuDdl-devModel");n.is(e.target)||(o.is(e.target)||0!==o.has(e.target).length||($(".js-menuDdl-docType").removeClass("show"),o.removeClass("opened")),t.is(e.target)||0!==t.has(e.target).length||($(".js-menuDdl-version").removeClass("show"),t.removeClass("opened"),i.removeClass("opened"),i.removeClass("show")),r.is(e.target)||0!==a.has(e.target).length||(a.removeClass("show"),r.removeClass("opened")))};$(document).ready(loadHeaderLists),$(document).click(closeHeaderDropDowns);var isDevModelSwitcherSupported=function(){var e=CONFIG.CONFLUENCE_SPACE_KEY;return!e.toLowerCase().includes("api")&&CONFIG.CONFLUENCE_DEVMODEL_VERSIONSWITCHER_WHITELIST.indexOf(getDocVersion(e))>=0},getPageLabels=function(){var e=$('[name="confluence-page-labels"]').attr("content");return e=(e=e.slice(1,-1)).split(", ")},setDevModelWebStorage=function(){if(isDevModelSwitcherSupported()&&"undefined"!=typeof Storage){var e=getPageLabels();if(e.indexOf("mvc")>=0)return void(localStorage.kenticoDocumentationMode="mvc");if(e.indexOf("pe")>=0)return void(localStorage.kenticoDocumentationMode="pe");var o=window.location.search;if(o.indexOf("devModel=mvc")>=0)return void(localStorage.kenticoDocumentationMode="mvc");if(o.indexOf("devModel=pe")>=0)return void(localStorage.kenticoDocumentationMode="pe");localStorage.kenticoDocumentationMode&&null!==localStorage.getItem("kenticoDocumentationMode")||(localStorage.kenticoDocumentationMode="mvc")}},getCurrentDevModel=function(){var e=getPageLabels();if(e.indexOf("mvc")>=0)return"mvc";if(e.indexOf("pe")>=0)return"pe";var o=window.location.search;return o.indexOf("devModel=mvc")>=0?"all|mvc":o.indexOf("devModel=pe")>=0?"all|pe":"undefined"!=typeof Storage&&localStorage.kenticoDocumentationMode?"all|"+localStorage.kenticoDocumentationMode:"all|mvc"},translateToHelpServiceVersion=function(e){return DOCUMENTATION_VERSIONS.find((function(o){return o.versionId==e})).helpServiceVersion},switchDevModelStorage=function(e){"undefined"!=typeof Storage&&(localStorage.kenticoDocumentationMode=e)},openCloseDevModelDdl=function(){$(".js-menuDdl-devModel").toggleClass("show"),$(".js-menuDdlBtn-devModel").toggleClass("opened")},devModelMap={mvc:"MVC",pe:"Portal Engine"},initAltDevModelLink=function(){if(isDevModelSwitcherSupported()){var e=getCurrentDevModel(),o=!1;0===e.indexOf("all|")&&(o=!0,e=e.split("|")[1]);var t="mvc"==e?"pe":"mvc";$(".js-"+e+"-model-link").addClass("active");var n=$(".js-"+t+"-model-link");if(n){if($(".js-menuDdlBtn-devModel").html(devModelMap[e]),o)return n.on("click",(function(){switchDevModelStorage(t);var e=window.location.pathname.split("/");if("search"==e[e.length-1])kenticoThemeOpenSearchResultsPage();else{var o=window.location.href.replace(window.location.hash,"");o=(o=o.replace("#","")).split("?devModel")[0],window.location.href=o}})),void currentModelElement.on("click",(function(e){e.preventDefault(),openCloseDevModelDdl()}));var i=$("#dev-model-alt").attr("data-devmodel-alt");if(i){var r=getDocVersion(CONFIG.CONFLUENCE_SPACE_KEY),a=translateToHelpServiceVersion(r),s=CONFIG.HELPSERVICE_LINKMAPPER_ENDPOINT+a+"&link="+i;n.on("click",(function(){switchDevModelStorage(t),window.location.href=s}))}else{$(".js-menuDdlBtn-devModel").prop("disabled",!0).prop("title","");var c="mvc"==e?"MVC":"Portal Engine",l="mvc"==t?"MVC":"Portal Engine",d='<a id="alt-model-home-link" href="'+($("#ajs-context-path").attr("content")+"/"+CONFIG.CONFLUENCE_SPACE_KEY.toLowerCase()+"?devModel="+t)+'">'+l+" Home page</a>";$(".js-dev-model-unavailable-text").html("<p>This page is only available for the "+c+" development model.<br />You can switch to the "+d+".</p>")}}}};$(document).ready(setDevModelWebStorage),$(document).ready(initAltDevModelLink);var setDevFrameworkButtons=function(){$(".js-dev-model-switch-core").click((function(){coreFrameworkOnClick()})),$(".js-dev-model-switch-mvc").click((function(){mvcFrameworkOnClick()})),$(".js-dev-model-switch-indicator").click((function(e){"core"===localStorage.kenticoDocumentationFramework?mvcFrameworkOnClick():coreFrameworkOnClick()})),$(".js-dev-model-switch-mvc, .js-dev-model-switch-core ").on("keyup",(function(e){e.preventDefault(),e.stopPropagation(),32===e.keyCode&&("core"===localStorage.kenticoDocumentationFramework?mvcFrameworkOnClick():coreFrameworkOnClick())}))},setDevFrameworkCheckbox=function(){"mvc"===localStorage.kenticoDocumentationFramework?($(".js-dev-model-switch-mvc").attr("checked",!0),$(".js-dev-model-switch").addClass("is-dev-model-mvc").removeClass("is-dev-model-core")):"core"===localStorage.kenticoDocumentationFramework&&($(".js-dev-model-switch-core").attr("checked",!0),$(".js-dev-model-switch").addClass("is-dev-model-core").removeClass("is-dev-model-mvc"))},setCorrectFramework=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(localStorage.kenticoDocumentationFramework&&null!==localStorage.getItem("kenticoDocumentationFramework")||(localStorage.kenticoDocumentationFramework="mvc"),e){var o=new URLSearchParams(window.location.search).get("devmodel");"mvc"!==o&&"core"!==o||(localStorage.kenticoDocumentationFramework=o)}"mvc"===localStorage.kenticoDocumentationFramework&&($(".dev-model-core").css("display","none"),$(".dev-model-mvc").css("display","block")),"core"===localStorage.kenticoDocumentationFramework&&($(".dev-model-mvc").css("display","none"),$(".dev-model-core").css("display","block")),setDevFrameworkCheckbox()},setHoverTitles=function(){var e="Switch the displayed development model in the switcher under the page heading";$(".dev-model-core .codeContent").attr("title",e),$(".dev-model-mvc .codeContent").attr("title",e)},coreFrameworkOnClick=function(){localStorage.kenticoDocumentationFramework="core",setCorrectFramework()},mvcFrameworkOnClick=function(){localStorage.kenticoDocumentationFramework="mvc",setCorrectFramework()},showDevFrameworkSwitcher=function(){$(".js-dev-model-switch").removeClass("is-hidden")},setDevFrameworkSwitcher=function(){$(".dev-model-core").length+$(".dev-model-mvc").length>0&&(setCorrectFramework(!0),setDevFrameworkButtons(),setDevFrameworkCheckbox(),showDevFrameworkSwitcher(),setHoverTitles())};$(document).ready(setDevFrameworkSwitcher);var initSidebar=function e(){if(null!==$(".ht-nav-page-link").first())if($(".ht-nav-page-link.current").length){var o=$("div.ht-sidebar-content"),t=$("#ht-headerbar").outerHeight(!0),n=$(".ht-nav-page-link.current")[0].getBoundingClientRect().top;0===$("div.ht-sidebar-content")[0].scrollTop&&o.animate({scrollTop:Math.round(n-t-o.outerHeight()/2.5)},0),$("#ht-sidebar").addClass("animate")}else window.requestAnimationFrame(e)};window.requestAnimationFrame(initSidebar);var kenticoThemeOpenSearchResultsPage=function(){var e=$(".search-input").val();e=encodeURIComponent(e),e+="&max=10";var o=document.querySelector("#check-show-all-search-results"),t=!(o&&o.checked);window.SCROLL_WEBHELP&&window.SCROLL_WEBHELP.search&&(window.SCROLL_WEBHELP.search.navigateToSearchPage(e,t),$("#ht-search").find(".ht-search-dropdown").removeClass("open"),$(".ht-search-dropdown a.hover").removeClass("hover"),$(document).unbind("keydown"))},toggleSearchSuggestions=function(e){var o=$("input.search-input"),t=$(".ht-search-dropdown"),n=$("#searchButton"),i=$(".ht-search-dropdown a.hover");o.is(e.target)||0!==o.has(e.target).length||t.is(e.target)||0!==t.has(e.target).length?$(".ht-search-dropdown li.search-key").length&&t.addClass("open"):(t.removeClass("open"),i.removeClass("hover"),!n.is(e.target)&&0===n.has(e.target).length&&window.innerWidth<=800&&window.innerWidth>499&&o.removeClass("show"))};$(document).click(toggleSearchSuggestions);var setContentTopPadding=function(){var e=$(".searchbox-area-behind").first();e.length&&$(".ht-content").first().css("padding-top",e.outerHeight(!0)+"px")};$(document).ready(setContentTopPadding),$(window).resize(setContentTopPadding);var setFooterWidth=function(){var e=document.documentElement.clientWidth,o=$("#ht-wrap-container").width(),t=$("#ht-wrap-container").offset().left,n=e-o-t;$("#ht-footer").css({right:-n,"padding-right":n,left:-t,"padding-left":t})};function onElementHeightChange(e,o){var t,n=e.clientHeight;!function i(){t=e.clientHeight,n!=t&&o(),n=t,e.onElementHeightChangeTimer&&clearTimeout(e.onElementHeightChangeTimer),e.onElementHeightChangeTimer=setTimeout(i,200)}()}$(document).ready(setFooterWidth),$(window).resize(setFooterWidth),onElementHeightChange(document.body,setFooterWidth),$("span.expand-control").click((function(){var e=$(this).parent().next(),o=$(this).find("span.expand-control-text");e.hasClass("collapse")?(e.removeClass("collapse"),o.text("Collapse source")):(e.addClass("collapse"),o.text("Expand source"))}));var getPageIdIfEditingAllowed=function(){var e=$("#sp-viewport-control-opener").length,o=$(".search-input").is(":focus");if(0!=e&&!o){var t=$("body").attr("pageid");return t||0}return 0};function openLink(e,o){o?window.open(e,"_blank").focus():window.open(e,"_self")}$("p").each((function(){""==$(this).text().trim()&&0==$(this).children().length&&$(this).hide()}));var showHideSearchTips=function(){$("#search-tips").hasClass("show")?hideFrontLayer():showFrontLayer()},showFrontLayer=function(){$("#search-tips").addClass("show"),document.getElementById("search-tips-mask").style.visibility="visible",document.getElementById("search-tips").style.visibility="visible"},hideFrontLayer=function(){document.getElementById("search-tips-mask").style.visibility="hidden",document.getElementById("search-tips").style.visibility="hidden",$("#search-tips").removeClass("show")},createCookie=function(e,o,t,n){var i;n="; domain="+n;if(t){var r=new Date;r.setTime(r.getTime()+24*t*60*60*1e3),i="; expires="+r.toUTCString()}else i="";document.cookie=e+"="+o+i+"; path=/"+n},eraseCookie=function(e){createCookie(e,"",-1,"")},consentWithCookieUsage=function(){$("#cookie-banner").addClass("hidden"),createCookie("xperience.cookielevelselection",!0,365,".xperience.io")},hideCookieConsentBanner=function(){!document.cookie.replace(/(?:(?:^|.*;\s*)xperience.cookielevelselection\s*\=\s*([^;]*).*$)|^.*$/,"$1")&&navigator.cookieEnabled||$("#cookie-banner").addClass("hidden")},setCookieLevel=function(e){e="marketing"===(e=e)?4:"analytical"===e?3:"preference"===e?2:1,consentWithCookieUsage(),createCookie("xperience.cookieconsentlevel",e,365,".xperience.io"),1===e?(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"consent.update",consent:{functionality_storage:"granted",personalization_storage:"denied",analytics_storage:"denied",ad_storage:"denied",security_storage:"denied"}})):3===e&&(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"consent.update",consent:{functionality_storage:"granted",personalization_storage:"granted",analytics_storage:"granted",ad_storage:"denied",security_storage:"denied"}}))};$(document).ready((function(){hideCookieConsentBanner()}));var copyHeadingLink=function(e){var o=$(e.target),t=window.location.origin+window.location.pathname+"#"+o.parent().attr("id");void 0===navigator.clipboard?Snackbar.show({text:"An error occurred while copying the heading link to the clipboard",pos:"top-right",showAction:!1,customClass:"box-general box-warning",duration:"3500",backgroundColor:"#FFEBEB",textColor:"#151515"}):navigator.clipboard.writeText(t).then((function(){Snackbar.show({text:"Heading link copied",pos:"top-right",showAction:!1,customClass:"box-general box-info",duration:"2500",backgroundColor:"#EEF3FC",textColor:"#151515"}),o.addClass("copied")})).catch((function(){Snackbar.show({text:"An error occurred while copying the heading link to the clipboard",pos:"top-right",showAction:!1,customClass:"box-general box-warning",duration:"3500",backgroundColor:"#FFEBEB",textColor:"#151515"})}))},copyIconMouseOut=function(e){var o=$(e.target);o.hasClass("copied")&&o.removeClass("copied")};$("#main-content .sp-grid-60 h2, #main-content .sp-grid-100 h2, #main-content .sp-grid-60 h3, #main-content .sp-grid-100 h3").not("div.box-general h2, div.box-general h3, h2:has(a), h3:has(a)").append('<span title="Copy link to heading" class="heading-link-icon icon-chain" onclick="copyHeadingLink(event)" onmouseout="copyIconMouseOut(event)"></span>');
//# sourceMappingURL=data:application/json;charset=utf8;base64,
