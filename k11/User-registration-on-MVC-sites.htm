<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>User registration on MVC sites - Kentico 11 Documentation</title>

    
    <link rel="stylesheet" href="assets/css/expand-macro.css">

            <meta name="scroll-content-language-key" content="">
    
    <meta name="description" content="">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=2.0, user-scalable=yes">

<script type="text/javascript" src="assets/js/jquery.min.js"></script>
<script type="text/javascript" src="assets/js/jquery.scrollTo.min.js"></script>


<script type="text/javascript" src="assets/js/translate.js"></script>

<script type="text/javascript" src="assets/js/theme.main.js"></script>

    <script type="text/javascript" src="assets/js/iframeResizer.min.js"></script>

<link rel="stylesheet" href="assets/css/content-style.css">
    <link rel="stylesheet" href="assets/css/search.css">

<link rel="stylesheet" href="assets/css/theme.main.css">
<link rel="stylesheet" href="assets/css/theme.colors.css">

            <!-- ES5 support for older browsers, needed by lunr -->
        <script src="js/augment.js"></script> 
        <script id="worker" type="javascript/worker">

        startIndex = function() {
            idx = lunr.Index.load(lunrIndex);
            idx.pipeline.remove(lunr.stopWordFilter);
            postMessage({type: "setup-complete"});
        }

        onmessage = function (event) {
            var message = event.data;

            if ((message.type === 'setup') && message.baseUrl) {
                var url = message.baseUrl;
                importScripts(url + 'js/lunr.js');
                importScripts(url + 'js/lunr-extras.js');
                importScripts(url + 'js/lunr-index.js');
                importScripts(url + 'js/lunr-data.js');
                startIndex();
            }

            if (idx && (message.type === 'search-request') && message.query) {
                var searchWord = message.query;
                var results = idx.search(searchWord).map(function (result) {
                    return lunrData.filter(function (d) {
                        return d.id === parseInt(result.ref, 10)
                    })[0]
                });
                postMessage({type: 'search-results', results: results, query: searchWord, queryId: message.queryId});
            }
        }

    </script>
    </head>

<body pageid="68879260">

<div id="ht-loader">
    <noscript>
        <p style="width: 100%; text-align:center; position: absolute; margin-top: 200px;">This content cannot be displayed without JavaScript.<br>Please enable JavaScript and reload the page.</p>
    </noscript>
</div>

<div>
   	<header id="ht-headerbar">
    <div class="ht-headerbar-left">
        <a href="" id="ht-menu-toggle" class="sp-aui-icon-small sp-aui-iconfont-appswitcher"></a>
    </div>
    <div class="ht-headerbar-right">
            <div class="sp-aui-icon-small ht-search-index-loader ht-header-icon"></div>

        <div id="ht-search">
            <div class="ht-search-input" style="display: none;">
              	<a href="#" class="sp-aui-icon-small sp-aui-iconfont-remove ht-search-clear"></a>

                <form action="#" method="GET" id="search">
                    <input class="search-input" type="text" placeholder="Search" tabindex="-1" autocomplete="off" name="q" value="">
                    <input type="hidden" name="max" value="15" />
                    <input type="submit" style="display:none" tabindex="-4"/>
                </form>

                <a href="#" id="ht-search-button" class="ht-header-icon ht-header-icon-svg">
                                        <svg width="40px" height="40px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <g>
                            <path d="M29.572,28.802 L28.801,29.571 C28.515,29.857 28.187,30 27.816,30 C27.445,30 27.116,29.857 26.831,29.571 L21.392,24.134 C20.193,24.762 18.908,25.076 17.538,25.076 C15.396,25.076 13.605,24.348 12.163,22.892 C10.721,21.436 10,19.651 10,17.538 C10,15.397 10.721,13.605 12.163,12.163 C13.605,10.721 15.396,10 17.538,10 C19.651,10 21.434,10.721 22.89,12.163 C24.347,13.605 25.075,15.397 25.075,17.538 C25.075,18.937 24.761,20.222 24.132,21.393 L29.572,26.832 C29.857,27.118 30,27.446 30,27.817 C30,28.188 29.857,28.517 29.572,28.802 L29.572,28.802 Z M13.662,21.414 C14.732,22.485 16.024,23.02 17.538,23.02 C19.051,23.02 20.343,22.485 21.413,21.414 C22.484,20.344 23.019,19.052 23.019,17.538 C23.019,16.025 22.484,14.733 21.413,13.662 C20.343,12.592 19.051,12.056 17.538,12.056 C16.024,12.056 14.732,12.592 13.662,13.662 C12.591,14.733 12.056,16.025 12.056,17.538 C12.056,19.052 12.591,20.344 13.662,21.414 L13.662,21.414 Z"></path>
                        </g>
                    </svg>
              	</a>

                <div class="ht-search-dropdown ht-dropdown">
                    <ul></ul>
                </div>
            </div>
        </div>
    </div>
    </header>   	<aside id="ht-sidebar">
    <div class="ht-sidebar-content">
        <div class="ht-sidebar-content-scroll-container">
            <header class="ht-sidebar-header">
                <h1 class="ht-logo">
                    <span class="ht-logo-label">K11</span>
                    <img class="space-logo" src="global.logo" />
                </h1>
                <a href="Kentico-11-Documentation-Home.htm" class="ht-space-link">
                    <h2>Kentico 11 Documentation</h2>
                </a>
            </header>
                            <iframe id="ht-nav" src="toc.html?pageId=68880521"></iframe>
                <script>
                    $('iframe#ht-nav').iFrameResize(
                            { 'log': true, 'autoResize': true, 'heightCalculationMethod': 'lowestElement', 'checkOrigin': false });
                </script>
                    </div>
    </div>

</aside></div>

<div id="ht-wrap-container">

            
    <div id="ht-sidebar-dragbar">
    <div class="ht-sidebar-drag-handle">
        <span class="drag-handle-1"></span>
        <span class="drag-handle-2"></span>
        <span class="drag-handle-3"></span>
    </div>
</div>
    <article id="ht-content" class="ht-content">
        <header class="ht-content-header">
            <div id="ht-breadcrumb">
    <ul>
        <li><a href="Kentico-11-Documentation-Home.htm">Kentico 11 Documentation</a></li>
                                                                                                             <li><a href="" onclick="$('.shortcut').each(function(){$(this).removeClass('shortcut')}); $(this).parent().addClass('shortcut'); return false;">...</a> </li>
                                        <li class="shortcut"><a href="Developing-websites.htm">Developing websites</a></li>
                                                                                                         <li class="shortcut"><a href="Developing-sites-using-ASP.NET-MVC.htm">Developing sites using ASP.NET MVC</a></li>
                                                                                                         <li class="shortcut"><a href="Developing-MVC-applications.htm">Developing MVC applications</a></li>
                                                                                     <li><a href="Working-with-users-on-MVC-sites.htm">Working with users on MVC sites</a></li>
                                                            </ul>
</div>            <h1 id="src-68880521"> <span>User registration on MVC sites</span></h1>
        </header>

        <div id="main-content" class="wiki-content sp-grid-section" data-index-for-search="true">
<p   
>The <strong class=" ">Kentico.Membership</strong> <a   href="k11/Installing-Kentico-integration-packages.htm">integration package</a> allows you to set up registration functionality for the visitors of your <a   href="k11/Developing-sites-using-ASP.NET-MVC.htm">MVC website</a>. The system stores the user data in the shared Kentico database.</p>
<p   
>Before you start working on registration, you need to perform the following:</p>
<ul class=" "><li class=" "><p   
>Integrate the Kentico membership implementation into your MVC project</p>
</li><li class=" "><p   
>Set up authentication functionality</p>
</li></ul><p   
>Both scenarios are described on the <a   href="k11/Working-with-users-on-MVC-sites.htm">Working with users on MVC sites</a> page.</p>
    <h3 id="src-68880521_UserregistrationonMVCsites-CompatibilitywithKenticoregistrationfeatures" class="heading "><span>Compatibility with Kentico registration features</span></h3>
<p   
>Kentico features related to user registration are NOT supported by default for registrations that occur on MVC sites. For example:</p>
<ul class=" "><li class=" "><p   
>The default Kentico functionality for email confirmation of registrations. However, you can use the integration API to set up your own solution &ndash; see the <a   href="k11/#src-68880521_UserregistrationonMVCsites-Addingemailconfirmationforregistration">Adding email confirmation for registration</a> section.</p>
</li><li class=" "><p   
>Password policies - you need to define password requirements in your application&#39;s code (for example by configuring the <a  class="external-link" href="https://msdn.microsoft.com/en-us/library/microsoft.aspnet.identity.passwordvalidator%28v=vs.108%29.aspx">PasswordValidator</a> property during the initialization of <i class=" ">Kentico.Membership.UserManager</i>).</p>
</li><li class=" "><p   
>Reserved user names (<i class=" ">Settings -&gt; Security &amp; Membership -&gt; Reserved user names</i>)</p>
</li><li class=" "><p   
>Approval of new user accounts by administrators (<i class=" ">Settings -&gt; Security &amp; Membership -&gt; Registration requires administrator&#39;s approval</i>)</p>
</li><li class=" "><p   
>Site prefixes for user names (<i class=" ">Settings -&gt; Security &amp; Membership -&gt; Use site prefix for user names</i>)</p>
</li></ul><p   
>One setting that does apply to registration on MVC sites is the <strong class=" ">Password format</strong>, which you can configure within Kentico in <strong class=" ">Settings -&gt; Security &amp; Membership -&gt; Passwords</strong>. See <a   href="k11/Setting-the-user-password-format.htm">Setting the user password format</a> for more information. The integration API ensures that any users registered from your MVC site have their passwords stored in the format configured for the Kentico application.</p>
    <div  class="confbox admonition admonition-note">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
><strong class=" ">Ensuring the correct password format</strong></p>
<p   
>If your Kentico application uses custom salt values when generating password hashes, you also need to set the same values for the MVC application.</p>
<p   
>Check the <i class=" ">appSettings</i> section of your Kentico application&#39;s web.config for the following keys:</p>
<ul class=" "><li class=" "><p   
><strong class=" ">CMSPasswordSalt</strong></p>
</li><li class=" "><p   
><strong class=" ">CMSUserSaltColumn</strong> (obsolete key used only for backward compatibility)<strong class=" "><br/></strong></p>
</li></ul><p   
>If either of the keys are present, copy them to the web.config of your MVC project.</p>
        </div>
    </div>
    <div  class="confbox panel">
            <div class="title panel-header">On this page</div>
            <div class="panel-content">
<p   
></p>
<ul class="toc-indentation "><li class=" "><p   
><a   href="k11/#src-68880521_UserregistrationonMVCsites-CompatibilitywithKenticoregistrationfeatures">Compatibility with Kentico registration features</a></p>
</li><li class=" "><p   
><a   href="k11/#src-68880521_UserregistrationonMVCsites-Settingupbasicregistration">Setting up basic registration</a></p>
</li><li class=" "><p   
><a   href="k11/#src-68880521_UserregistrationonMVCsites-Addingemailconfirmationforregistration">Adding email confirmation for registration</a></p>
</li><li class=" "><p   
><a   href="k11/#src-68880521_UserregistrationonMVCsites-UpdatinguserdetailsfromtheMVCapplication">Updating user details from the MVC application</a></p>
</li></ul><p   
></p>
        </div>
    </div>
    <div  class="confbox panel">
            <div class="title panel-header">Related pages</div>
            <div class="panel-content">
<ul class=" "><li class=" "><p   
><a   href="k11/Working-with-users-on-MVC-sites.htm">Working with users on MVC sites</a></p>
</li><li class=" "><p   
><a   href="k11/User-registration-and-authentication.htm">User registration and authentication in Kentico</a></p>
</li></ul>        </div>
    </div>
    <h3 id="src-68880521_UserregistrationonMVCsites-Settingupbasicregistration" class="heading "><span>Setting up basic registration</span></h3>
<p   
>Use the following approach to develop actions that allow visitors to register on your website:</p>
<p   
></p>
    <div  class="confbox admonition admonition-tip">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
><strong class=" ">Tip</strong>: To view the full code of a functional example directly in Visual Studio, download the <a  class="external-link" href="https://github.com/Kentico/Mvc">Kentico MVC solution</a> from GitHub and inspect the <strong class=" ">LearningKit</strong> project. You can also run the Learning Kit website after connecting the project to a Kentico database.</p>
        </div>
    </div>
<p   
></p>
<ol class=" "><li class=" "><p   
>Create a new controller class in your MVC project or edit an existing one.</p>
</li><li class=" "><p   
>Prepare a property that gets an instance of the <strong class=" ">Kentico.Membership.UserManager</strong> class for the current request &ndash; call <i class=" ">HttpContext.GetOwinContext().Get&lt;UserManager&gt;()</i>.</p>
</li><li class=" "><p   
>Implement two registration actions &ndash; one basic GET action to display the registration form and a second POST action to handle the creation of new users when the form is submitted.</p>
</li><li class=" "><p   
>Perform the following steps within the POST action:</p>
<ol class=" "><li class=" "><p   
>Prepare a <strong class=" ">Kentico.Membership.User</strong> object based on the posted registration data.</p>
</li><li class=" "><p   
>Call the <strong class=" ">UserManager.CreateAsync</strong> method to create the user in the Kentico database.</p>
</li><li class=" "><p   
>(Optional) If the registration is successful, sign in the user under the new account via the <strong class=" ">SignInAsync</strong> method of the current request&#39;s <i class=" ">SignInManager</i> instance (See <a   href="k11/Working-with-users-on-MVC-sites.htm">Working with users on MVC sites</a> for more information about the <i class=" ">SignInManager).</i></p>
</li></ol><p   
><img  class="wysiwyg-unknown-macro"  src="images/plugins/servlet/confluence/placeholder/unknown-macro.png" alt="images/plugins/servlet/confluence/placeholder/unknown-macro.png"   />
    </p>
</li><li class=" "><p   
>We recommend creating a view model for your registration action <i class=" ">(RegisterViewModel</i> in the example above). The view model allows you to:</p>
<ul class=" "><li class=" "><p   
>Pass parameters from the registration form (user names, email address, password and confirmation field, etc.).</p>
</li><li class=" "><p   
>Use data annotations to define validation and formatting rules for the registration data. See <a  class="external-link" href="https://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations%28v=vs.110%29.aspx">System.ComponentModel.DataAnnotations</a> on MSDN for more information about the available data annotation attributes.</p>
</li></ul><p   
><img  class="wysiwyg-unknown-macro"  src="images/plugins/servlet/confluence/placeholder/unknown-macro.png" alt="images/plugins/servlet/confluence/placeholder/unknown-macro.png"   />
    </p>
</li><li class=" "><p   
>Design the user interface required for registration on your website:</p>
<ul class=" "><li class=" "><p   
>Create a view for the <i class=" ">Register</i> action and display an appropriate registration form. We recommend using a strongly typed view based on your registration view model.</p>
</li><li class=" "><p   
>Add a registration button or link that targets the <i class=" ">Register</i> action into an appropriate location on your website.</p>
</li></ul></li></ol><p   
>Visitors can now register new user accounts on your MVC site. Upon successful registration, the system creates a new user in the connected Kentico database. The new user is automatically enabled in Kentico and assigned to the site where the registration occurred. The user can then sign in on the website.</p>
    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>Kentico matches <a   href="k11/Managing-sites.htm">sites</a> to MVC applications based on the <strong class=" ">Presentation URL</strong> or <strong class=" ">Domain name</strong> set for sites in the <strong class=" ">Sites</strong> application.</p>
        </div>
    </div>
    <h3 id="src-68880521_UserregistrationonMVCsites-Addingemailconfirmationforregistration" class="heading "><span>Adding email confirmation for registration</span></h3>
<p   
>The membership integration API allows you to set up a more advanced registration process that requires email confirmation (double opt-in).</p>
    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
><strong class=" ">Configuring the confirmation email settings</strong></p>
<p   
>The confirmation emails are sent by the email engine provided by the Kentico API. Configure the email settings through the administration interface of the connected Kentico application:</p>
<ul class=" "><li class=" "><p   
>Set up SMTP servers in Kentico. See <a   href="k11/Configuring-SMTP-servers.htm">Configuring SMTP servers</a> for more information.</p>
</li><li class=" "><p   
>You can use the Kentico <strong class=" ">Email queue</strong> application to monitor the emails (if the email queue is enabled).</p>
</li><li class=" "><p   
>Set the sender address for the confirmation emails in <strong class=" ">Settings -&gt; System -&gt; No-reply email address</strong>.</p>
</li></ul>        </div>
    </div>
<ol class=" "><li class=" "><p   
>Create a new controller class in your MVC project or edit an existing one.</p>
</li><li class=" "><p   
>Prepare a property that gets an instance of the <strong class=" ">Kentico.Membership.UserManager</strong> class for the current request &ndash; call <i class=" ">HttpContext.GetOwinContext().Get&lt;UserManager&gt;()</i>.</p>
</li><li class=" "><p   
>Implement two registration actions &ndash; one basic GET action to display the registration form and a second POST action to handle the creation of new users and sending of confirmation emails.</p>
</li><li class=" "><p   
>Perform the following steps within the POST action:</p>
<ul class=" "><li class=" "><p   
>Prepare a <strong class=" ">Kentico.Membership.User</strong> object based on the posted registration data. Leave the user disabled.</p>
</li><li class=" "><p   
>Call the <strong class=" ">UserManager.CreateAsync</strong> method to create the user in the Kentico database.</p>
</li><li class=" "><p   
>Generate a token for the confirmation link by calling the <strong class=" ">UserManager.GenerateEmailConfirmationTokenAsync</strong> method.</p>
</li><li class=" "><p   
>Send the confirmation email by calling the <strong class=" ">UserManager.SendEmailAsync</strong> method. You need to specify the email subject and content through the parameters.</p>
</li></ul></li><li class=" "><p   
>Add another action to the controller for handling of the confirmation requests. Call the <strong class=" ">UserManager.ConfirmEmailAsync</strong> method to verify and confirm user accounts.</p>
    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>The <strong class=" ">ConfirmEmailAsync</strong> method requires the ID of the user and matching confirmation token as parameters. Pass the required values as query string parameters of the confirmation link within the content of the emails that you send to new users.</p>
        </div>
    </div>
<p   
><img  class="wysiwyg-unknown-macro"  src="images/plugins/servlet/confluence/placeholder/unknown-macro.png" alt="images/plugins/servlet/confluence/placeholder/unknown-macro.png"   />
    </p>
</li><li class=" "><p   
>We recommend creating a view model for your registration action. See the basic registration section above for an example (<i class=" ">RegisterViewModel</i> class).</p>
</li><li class=" "><p   
>Design the user interface required for registration on your website:</p>
<ul class=" "><li class=" "><p   
>Create a view for the <i class=" ">RegisterWithEmailConfirmation</i> action and display an appropriate registration form. We recommend using a strongly typed view based on your registration view model.</p>
</li><li class=" "><p   
>Add a registration button or link that targets the <i class=" ">RegisterWithEmailConfirmation</i> action into an appropriate location on your website.</p>
</li><li class=" "><p   
>Create a view with content that informs users about the need to confirm their newly registered account <i class=" ">(CheckYourEmail</i> view in the example).</p>
</li><li class=" "><p   
>Create views for the <i class=" ">ConfirmUser</i> action. Display information for users who click the confirmation link (for both successful and unsuccessful confirmation).</p>
</li></ul></li></ol><p   
>Visitors can now register new user accounts on your MVC site. Upon registration, the system creates a disabled user in the connected Kentico database (assigned to the site where the registration occurred) and sends a confirmation email to the submitted address. Upon successful confirmation, the new user becomes enabled and can sign in.</p>
    <h3 id="src-68880521_UserregistrationonMVCsites-UpdatinguserdetailsfromtheMVCapplication" class="heading "><span>Updating user details from the MVC application</span></h3>
<p   
>You can add a page to your MVC application, where your users can change their personal details.</p>
<ol class=" "><li class=" "><p   
>Create a new controller class in your MVC project or edit an existing one.</p>
</li><li class=" "><p   
>Prepare a property that gets an instance of the <strong class=" ">Kentico.Membership.UserManager</strong> class for the current request &ndash; call <i class=" ">HttpContext.GetOwinContext().Get&lt;UserManager&gt;()</i>.</p>
</li><li class=" "><p   
>Implement two user detail actions &ndash; one basic GET action to display the form and a second POST action to handle the changing of user details.</p>
</li><li class=" "><p   
>Perform the following steps within the POST action:</p>
<ul class=" "><li class=" "><p   
>Prepare a <strong class=" ">Kentico.Membership.User</strong> object based on the posted user data.</p>
</li><li class=" "><p   
>Call the <strong class=" ">UserManager.FindByName</strong> method to find out the current user in Kentico.</p>
</li><li class=" "><p   
>Call the <strong class=" ">UserStore.UpdateAsync</strong> method to save the changes to the database.<img  class="wysiwyg-unknown-macro"  src="images/plugins/servlet/confluence/placeholder/unknown-macro.png" alt="images/plugins/servlet/confluence/placeholder/unknown-macro.png"   />
</p>
</li></ul></li><li class=" "><p   
>Instead of using the <i class=" ">User</i> object directly in your view, we recommend creating a view model for your action for editing user details.</p>
</li><li class=" "><p   
>Design the user interface required for editing user details on your website:</p>
<ul class=" "><li class=" "><p   
>Create a view for the <i class=" ">EditUser</i> action and display an appropriate form. We recommend using a strongly typed view based on your view model.</p>
</li></ul></li></ol><p   
>Users can now change their personal details on your MVC site.</p>
        </div>

    </article>


               
            
    <footer id="ht-footer">
    <a href="#" id="ht-jump-top" class="sp-aui-icon-small sp-aui-iconfont-arrows-up"></a>
</footer></div>

<div>
    <div id="ht-mq-detect"></div>
</div>

    <script src="js/lunr.js"></script>
    <script src="js/lunr-extras.js"></script>
    <script src="assets/js/scroll-search.js"></script>

    <script src="assets/js/expand-macro.js"></script>
</body>
</html>
