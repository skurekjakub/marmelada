<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>SSL accelerator support - Kentico 11 Documentation</title>

    
    <link rel="stylesheet" href="assets/css/expand-macro.css">

            <meta name="scroll-content-language-key" content="">
    
    <meta name="description" content="">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=2.0, user-scalable=yes">

<script type="text/javascript" src="assets/js/jquery.min.js"></script>
<script type="text/javascript" src="assets/js/jquery.scrollTo.min.js"></script>


<script type="text/javascript" src="assets/js/translate.js"></script>

<script type="text/javascript" src="assets/js/theme.main.js"></script>

    <script type="text/javascript" src="assets/js/iframeResizer.min.js"></script>

<link rel="stylesheet" href="assets/css/content-style.css">
    <link rel="stylesheet" href="assets/css/search.css">

<link rel="stylesheet" href="assets/css/theme.main.css">
<link rel="stylesheet" href="assets/css/theme.colors.css">

            <!-- ES5 support for older browsers, needed by lunr -->
        <script src="js/augment.js"></script> 
        <script id="worker" type="javascript/worker">

        startIndex = function() {
            idx = lunr.Index.load(lunrIndex);
            idx.pipeline.remove(lunr.stopWordFilter);
            postMessage({type: "setup-complete"});
        }

        onmessage = function (event) {
            var message = event.data;

            if ((message.type === 'setup') && message.baseUrl) {
                var url = message.baseUrl;
                importScripts(url + 'js/lunr.js');
                importScripts(url + 'js/lunr-extras.js');
                importScripts(url + 'js/lunr-index.js');
                importScripts(url + 'js/lunr-data.js');
                startIndex();
            }

            if (idx && (message.type === 'search-request') && message.query) {
                var searchWord = message.query;
                var results = idx.search(searchWord).map(function (result) {
                    return lunrData.filter(function (d) {
                        return d.id === parseInt(result.ref, 10)
                    })[0]
                });
                postMessage({type: 'search-results', results: results, query: searchWord, queryId: message.queryId});
            }
        }

    </script>
    </head>

<body pageid="68879260">

<div id="ht-loader">
    <noscript>
        <p style="width: 100%; text-align:center; position: absolute; margin-top: 200px;">This content cannot be displayed without JavaScript.<br>Please enable JavaScript and reload the page.</p>
    </noscript>
</div>

<div>
   	<header id="ht-headerbar">
    <div class="ht-headerbar-left">
        <a href="" id="ht-menu-toggle" class="sp-aui-icon-small sp-aui-iconfont-appswitcher"></a>
    </div>
    <div class="ht-headerbar-right">
            <div class="sp-aui-icon-small ht-search-index-loader ht-header-icon"></div>

        <div id="ht-search">
            <div class="ht-search-input" style="display: none;">
              	<a href="#" class="sp-aui-icon-small sp-aui-iconfont-remove ht-search-clear"></a>

                <form action="#" method="GET" id="search">
                    <input class="search-input" type="text" placeholder="Search" tabindex="-1" autocomplete="off" name="q" value="">
                    <input type="hidden" name="max" value="15" />
                    <input type="submit" style="display:none" tabindex="-4"/>
                </form>

                <a href="#" id="ht-search-button" class="ht-header-icon ht-header-icon-svg">
                                        <svg width="40px" height="40px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <g>
                            <path d="M29.572,28.802 L28.801,29.571 C28.515,29.857 28.187,30 27.816,30 C27.445,30 27.116,29.857 26.831,29.571 L21.392,24.134 C20.193,24.762 18.908,25.076 17.538,25.076 C15.396,25.076 13.605,24.348 12.163,22.892 C10.721,21.436 10,19.651 10,17.538 C10,15.397 10.721,13.605 12.163,12.163 C13.605,10.721 15.396,10 17.538,10 C19.651,10 21.434,10.721 22.89,12.163 C24.347,13.605 25.075,15.397 25.075,17.538 C25.075,18.937 24.761,20.222 24.132,21.393 L29.572,26.832 C29.857,27.118 30,27.446 30,27.817 C30,28.188 29.857,28.517 29.572,28.802 L29.572,28.802 Z M13.662,21.414 C14.732,22.485 16.024,23.02 17.538,23.02 C19.051,23.02 20.343,22.485 21.413,21.414 C22.484,20.344 23.019,19.052 23.019,17.538 C23.019,16.025 22.484,14.733 21.413,13.662 C20.343,12.592 19.051,12.056 17.538,12.056 C16.024,12.056 14.732,12.592 13.662,13.662 C12.591,14.733 12.056,16.025 12.056,17.538 C12.056,19.052 12.591,20.344 13.662,21.414 L13.662,21.414 Z"></path>
                        </g>
                    </svg>
              	</a>

                <div class="ht-search-dropdown ht-dropdown">
                    <ul></ul>
                </div>
            </div>
        </div>
    </div>
    </header>   	<aside id="ht-sidebar">
    <div class="ht-sidebar-content">
        <div class="ht-sidebar-content-scroll-container">
            <header class="ht-sidebar-header">
                <h1 class="ht-logo">
                    <span class="ht-logo-label">K11</span>
                    <img class="space-logo" src="global.logo" />
                </h1>
                <a href="Kentico-11-Documentation-Home.htm" class="ht-space-link">
                    <h2>Kentico 11 Documentation</h2>
                </a>
            </header>
                            <iframe id="ht-nav" src="toc.html?pageId=68881130"></iframe>
                <script>
                    $('iframe#ht-nav').iFrameResize(
                            { 'log': true, 'autoResize': true, 'heightCalculationMethod': 'lowestElement', 'checkOrigin': false });
                </script>
                    </div>
    </div>

</aside></div>

<div id="ht-wrap-container">

            
    <div id="ht-sidebar-dragbar">
    <div class="ht-sidebar-drag-handle">
        <span class="drag-handle-1"></span>
        <span class="drag-handle-2"></span>
        <span class="drag-handle-3"></span>
    </div>
</div>
    <article id="ht-content" class="ht-content">
        <header class="ht-content-header">
            <div id="ht-breadcrumb">
    <ul>
        <li><a href="Kentico-11-Documentation-Home.htm">Kentico 11 Documentation</a></li>
                                                                                                             <li><a href="" onclick="$('.shortcut').each(function(){$(this).removeClass('shortcut')}); $(this).parent().addClass('shortcut'); return false;">...</a> </li>
                                        <li class="shortcut"><a href="Securing-websites.htm">Securing websites</a></li>
                                                                                                         <li class="shortcut"><a href="Deploying-websites-to-a-secure-environment.htm">Deploying websites to a secure environment</a></li>
                                                                                     <li><a href="Configuring-SSL.htm">Configuring SSL</a></li>
                                                            </ul>
</div>            <h1 id="src-68881130"> <span>SSL accelerator support</span></h1>
        </header>

        <div id="main-content" class="wiki-content sp-grid-section" data-index-for-search="true">
<p   
>In some scenarios, SSL decryption and encryption may not be performed directly by your application&#39;s server. Instead, the decryption and encryption is performed via a reverse proxy, which is equipped with an SSL offload hardware (for example, an SSL accelerator). This means that requests are forwarded to the application internally using the standard HTTP protocol, even when the client accesses the page through HTTPS. If the settings for using SSL are enabled for the website, it may result in a redirection loop.</p>
<p   
>You can solve this issue by adding custom code to the application&#39;s request handlers. It is necessary to appropriately set the <strong class=" ">IsSSL</strong> static property of the <strong class=" ">CMS.Helpers.RequestContext</strong> class. If set to <i class=" ">true</i>, the system treats all requests as secured, regardless of their URL format, and redirection to HTTPS page versions is not performed by the application. Of course, it is necessary to correctly identify which requests originally used SSL, for example by checking the request headers.</p>
<p   
>You also need to set the <strong class=" ">SSLUrlPort</strong> property of the <strong class=" ">CMS.Helpers.URLHelper</strong> class to 443 (or any other port that you use for HTTPS requests).</p>
    <div class="section section-1" id="src-68881130_SSLacceleratorsupport-SettingtheIsSSLandSSLUrlPortproperties">
        <h1 class="heading "><span>Setting the IsSSL and SSLUrlPort properties</span></h1>
<ol class=" "><li class=" "><p   
>Open your Kentico project in Visual Studio (using the <strong class=" ">WebSite.sln</strong> or <strong class=" ">WebApp.sln</strong> file).</p>
</li><li class=" "><p   
>Create a <a   href="k11/Initializing-modules-to-run-custom-code.htm">custom module class</a>.</p>
<ul class=" "><li class=" "><p   
>Either add the class into a custom project within the Kentico solution (recommended) or directly into the Kentico web project (into a custom folder under the <strong class=" ">CMSApp</strong> project for <i class=" ">web application</i> installations, into the <strong class=" ">App_Code</strong> folder for <i class=" ">web site</i> installations).</p>
    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>For basic execution of initialization code, you only need to register a &quot;code-only&quot; module through the API. You do NOT need to create a new module within the <strong class=" ">Modules</strong> application in the Kentico administration interface.</p>
        </div>
    </div>
</li></ul></li><li class=" "><p  class="confluence-link" 
>Override the module&#39;s <strong class=" ">OnInit</strong> method and assign a handler to the <strong class=" ">RequestEvents.Prepare.Execute</strong> event.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">using</code><code class="plain"> System;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Web;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Collections.Specialized;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataEngine;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.Base;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.Helpers;</code></div>
<div class="line"> </div>
<div class="line"><code class="comments">// Registers the custom module into the system</code></div>
<div class="line"><code class="plain">[assembly: RegisterModule(</code><code class="keyword">typeof</code><code class="plain">(SSLRequestModule))]</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> SSLRequestModule : Module</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">	</code><code class="comments">// Module class constructor, the system registers the module under the name "SSLRequests"</code></div>
<div class="line"><code class="plain">	</code><code class="keyword">public</code><code class="plain"> SSLRequestModule()</code></div>
<div class="line"><code class="plain">		: </code><code class="keyword">base</code><code class="plain">(</code><code class="string">"SSLRequests"</code><code class="plain">)</code></div>
<div class="line"><code class="plain">	{</code></div>
<div class="line"><code class="plain">	}</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">	</code><code class="comments">// Contains initialization code that is executed when the application starts</code></div>
<div class="line"><code class="plain">	</code><code class="keyword">protected</code><code class="plain"> </code><code class="keyword">override</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> OnInit()</code></div>
<div class="line"><code class="plain">	{</code></div>
<div class="line"><code class="plain">		</code><code class="keyword">base</code><code class="plain">.OnInit();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">		</code><code class="comments">// Assigns a handler called before each request is processed</code></div>
<div class="line"><code class="plain">		RequestEvents.Prepare.Execute += HandleSSLRequests;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">		</code><code class="comments">// Sets the URL port used for HTTPS requests</code></div>
<div class="line"><code class="plain">		URLHelper.SSLUrlPort = 443;</code></div>
<div class="line"><code class="plain">	}</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">	</code><code class="comments">// Checks if requests are forwarded as SSL</code></div>
<div class="line"><code class="plain">	</code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">static</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> HandleSSLRequests(</code><code class="keyword">object</code><code class="plain"> sender, EventArgs e)</code></div>
<div class="line"><code class="plain">	{</code></div>
<div class="line"><code class="plain">		</code><code class="keyword">if</code><code class="plain"> ((HttpContext.Current != </code><code class="keyword">null</code><code class="plain">) &amp;&amp; (HttpContext.Current.Request != </code><code class="keyword">null</code><code class="plain">))</code></div>
<div class="line"><code class="plain">		{</code></div>
<div class="line"><code class="plain">			</code><code class="comments">// Loads the request headers as a collection</code></div>
<div class="line"><code class="plain">			NameValueCollection headers = HttpContext.Current.Request.Headers;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">			</code><code class="comments">// Gets the value from the X-Forwarded-Ssl header</code></div>
<div class="line"><code class="plain">			</code><code class="keyword">string</code><code class="plain"> forwardedSSL = headers.Get(</code><code class="string">"X-Forwarded-Ssl"</code><code class="plain">);</code></div>
<div class="line"><code class="plain">			RequestContext.IsSSL = </code><code class="keyword">false</code><code class="plain">;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">			</code><code class="comments">// Checks if the original request used HTTPS</code></div>
<div class="line"><code class="plain">			</code><code class="keyword">if</code><code class="plain"> (String.Equals(forwardedSSL, </code><code class="string">"on"</code><code class="plain">, StringComparison.OrdinalIgnoreCase))</code></div>
<div class="line"><code class="plain">			{</code></div>
<div class="line"><code class="plain">				RequestContext.IsSSL = </code><code class="keyword">true</code><code class="plain">;</code></div>
<div class="line"><code class="plain">			}</code></div>
<div class="line"><code class="plain">		}</code></div>
<div class="line"><code class="plain">	}</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li></ol><p   
>The example registers a custom module and overrides its <strong class=" ">OnInit()</strong> method (executed automatically when the application starts) to assign a handler that is called before each request is processed. The <strong class=" ">X-Forwarded-Ssl</strong> header is used to check if the original request was submitted via HTTPS before the SSL accelerator forwarded it to the application. If this is the case, the <strong class=" ">IsSSL</strong> property is set to <i class=" ">true</i>, so the system processes the request as if it used the HTTPS protocol. Also, the <strong class=" ">SSLUrlPort</strong> property is set to 443.</p>
    <div  class="confbox admonition admonition-note">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
><strong class=" ">Important</strong></p>
<p   
>Your proxy device may use a different method to identify requests that were originally secured by SSL. In such cases, you need to write a condition that fits your specific scenario. For example, another typical approach is to check if the value of the <strong class=" ">X-Forwarded-Proto</strong> request header is <i class=" ">https</i>.</p>
<p   
>You may also include additional custom code to fulfill any other security requirements, such as validation of the proxy&#39;s IP address.</p>
        </div>
    </div>
    </div>
        </div>

    </article>


               
            
    <footer id="ht-footer">
    <a href="#" id="ht-jump-top" class="sp-aui-icon-small sp-aui-iconfont-arrows-up"></a>
</footer></div>

<div>
    <div id="ht-mq-detect"></div>
</div>

    <script src="js/lunr.js"></script>
    <script src="js/lunr-extras.js"></script>
    <script src="assets/js/scroll-search.js"></script>

    <script src="assets/js/expand-macro.js"></script>
</body>
</html>
