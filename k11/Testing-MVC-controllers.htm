<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Testing MVC controllers - Kentico 11 Documentation</title>

    
    <link rel="stylesheet" href="assets/css/expand-macro.css">

            <meta name="scroll-content-language-key" content="">
    
    <meta name="description" content="">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=2.0, user-scalable=yes">

<script type="text/javascript" src="assets/js/jquery.min.js"></script>
<script type="text/javascript" src="assets/js/jquery.scrollTo.min.js"></script>


<script type="text/javascript" src="assets/js/translate.js"></script>

<script type="text/javascript" src="assets/js/theme.main.js"></script>

    <script type="text/javascript" src="assets/js/iframeResizer.min.js"></script>

<link rel="stylesheet" href="assets/css/content-style.css">
    <link rel="stylesheet" href="assets/css/search.css">

<link rel="stylesheet" href="assets/css/theme.main.css">
<link rel="stylesheet" href="assets/css/theme.colors.css">

            <!-- ES5 support for older browsers, needed by lunr -->
        <script src="js/augment.js"></script> 
        <script id="worker" type="javascript/worker">

        startIndex = function() {
            idx = lunr.Index.load(lunrIndex);
            idx.pipeline.remove(lunr.stopWordFilter);
            postMessage({type: "setup-complete"});
        }

        onmessage = function (event) {
            var message = event.data;

            if ((message.type === 'setup') && message.baseUrl) {
                var url = message.baseUrl;
                importScripts(url + 'js/lunr.js');
                importScripts(url + 'js/lunr-extras.js');
                importScripts(url + 'js/lunr-index.js');
                importScripts(url + 'js/lunr-data.js');
                startIndex();
            }

            if (idx && (message.type === 'search-request') && message.query) {
                var searchWord = message.query;
                var results = idx.search(searchWord).map(function (result) {
                    return lunrData.filter(function (d) {
                        return d.id === parseInt(result.ref, 10)
                    })[0]
                });
                postMessage({type: 'search-results', results: results, query: searchWord, queryId: message.queryId});
            }
        }

    </script>
    </head>

<body pageid="68879260">

<div id="ht-loader">
    <noscript>
        <p style="width: 100%; text-align:center; position: absolute; margin-top: 200px;">This content cannot be displayed without JavaScript.<br>Please enable JavaScript and reload the page.</p>
    </noscript>
</div>

<div>
   	<header id="ht-headerbar">
    <div class="ht-headerbar-left">
        <a href="" id="ht-menu-toggle" class="sp-aui-icon-small sp-aui-iconfont-appswitcher"></a>
    </div>
    <div class="ht-headerbar-right">
            <div class="sp-aui-icon-small ht-search-index-loader ht-header-icon"></div>

        <div id="ht-search">
            <div class="ht-search-input" style="display: none;">
              	<a href="#" class="sp-aui-icon-small sp-aui-iconfont-remove ht-search-clear"></a>

                <form action="#" method="GET" id="search">
                    <input class="search-input" type="text" placeholder="Search" tabindex="-1" autocomplete="off" name="q" value="">
                    <input type="hidden" name="max" value="15" />
                    <input type="submit" style="display:none" tabindex="-4"/>
                </form>

                <a href="#" id="ht-search-button" class="ht-header-icon ht-header-icon-svg">
                                        <svg width="40px" height="40px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <g>
                            <path d="M29.572,28.802 L28.801,29.571 C28.515,29.857 28.187,30 27.816,30 C27.445,30 27.116,29.857 26.831,29.571 L21.392,24.134 C20.193,24.762 18.908,25.076 17.538,25.076 C15.396,25.076 13.605,24.348 12.163,22.892 C10.721,21.436 10,19.651 10,17.538 C10,15.397 10.721,13.605 12.163,12.163 C13.605,10.721 15.396,10 17.538,10 C19.651,10 21.434,10.721 22.89,12.163 C24.347,13.605 25.075,15.397 25.075,17.538 C25.075,18.937 24.761,20.222 24.132,21.393 L29.572,26.832 C29.857,27.118 30,27.446 30,27.817 C30,28.188 29.857,28.517 29.572,28.802 L29.572,28.802 Z M13.662,21.414 C14.732,22.485 16.024,23.02 17.538,23.02 C19.051,23.02 20.343,22.485 21.413,21.414 C22.484,20.344 23.019,19.052 23.019,17.538 C23.019,16.025 22.484,14.733 21.413,13.662 C20.343,12.592 19.051,12.056 17.538,12.056 C16.024,12.056 14.732,12.592 13.662,13.662 C12.591,14.733 12.056,16.025 12.056,17.538 C12.056,19.052 12.591,20.344 13.662,21.414 L13.662,21.414 Z"></path>
                        </g>
                    </svg>
              	</a>

                <div class="ht-search-dropdown ht-dropdown">
                    <ul></ul>
                </div>
            </div>
        </div>
    </div>
    </header>   	<aside id="ht-sidebar">
    <div class="ht-sidebar-content">
        <div class="ht-sidebar-content-scroll-container">
            <header class="ht-sidebar-header">
                <h1 class="ht-logo">
                    <span class="ht-logo-label">K11</span>
                    <img class="space-logo" src="global.logo" />
                </h1>
                <a href="Kentico-11-Documentation-Home.htm" class="ht-space-link">
                    <h2>Kentico 11 Documentation</h2>
                </a>
            </header>
                            <iframe id="ht-nav" src="toc.html?pageId=68880530"></iframe>
                <script>
                    $('iframe#ht-nav').iFrameResize(
                            { 'log': true, 'autoResize': true, 'heightCalculationMethod': 'lowestElement', 'checkOrigin': false });
                </script>
                    </div>
    </div>

</aside></div>

<div id="ht-wrap-container">

            
    <div id="ht-sidebar-dragbar">
    <div class="ht-sidebar-drag-handle">
        <span class="drag-handle-1"></span>
        <span class="drag-handle-2"></span>
        <span class="drag-handle-3"></span>
    </div>
</div>
    <article id="ht-content" class="ht-content">
        <header class="ht-content-header">
            <div id="ht-breadcrumb">
    <ul>
        <li><a href="Kentico-11-Documentation-Home.htm">Kentico 11 Documentation</a></li>
                                                                                                             <li><a href="" onclick="$('.shortcut').each(function(){$(this).removeClass('shortcut')}); $(this).parent().addClass('shortcut'); return false;">...</a> </li>
                                        <li class="shortcut"><a href="Developing-websites.htm">Developing websites</a></li>
                                                                                                         <li class="shortcut"><a href="Developing-sites-using-ASP.NET-MVC.htm">Developing sites using ASP.NET MVC</a></li>
                                                                                     <li><a href="Developing-MVC-applications.htm">Developing MVC applications</a></li>
                                                            </ul>
</div>            <h1 id="src-68880530"> <span>Testing MVC controllers</span></h1>
        </header>

        <div id="main-content" class="wiki-content sp-grid-section" data-index-for-search="true">
<p   
>You can test the logic of your MVC controllers that work with content items, such as articles or products, info objects as well as any other objects. This is done by providing fake representations of these objects. Using this approach, you can create the necessary objects without accessing the database.</p>
<p   
>The recommended approach for providing fake objects is to use repositories (adapters) that, for content items, make use of <a   href="k11/Generating-classes-for-Kentico-objects.htm">generated</a> classes. Repositories provide the following advantages over using <a   href="k11/Working-with-pages-in-the-API.htm">document query</a> directly in controllers:</p>
<ul class=" "><li class=" "><p   
>Your tests will work regardless of the used methods. This is important as not all document query methods are supported when creating fake objects.</p>
</li><li class=" "><p   
>Repositories only need to contain the methods the application really needs. This allows you to make changes to the implementation in a much smaller scale than if you were using document query.</p>
</li></ul><p   
>We also recommend writing individual controllers to use dependency injection and retrieve their dependencies via their constructors. This approach allows you to create classes with clearly defined responsibilities, which are, in turn easier to test.</p>
<p   
>You can also use containers such as <a  class="external-link" href="http://autofac.org/">Autofac</a> (or similar container implementations) to simplify the process of creating controllers and their dependencies, as well as handling the life cycle of the dependencies.</p>
<p   
>See also: <a   href="k11/Initializing-Kentico-services-with-dependency-injection.htm">Initializing Kentico services with dependency injection</a></p>
    <div  class="confbox admonition admonition-tip">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>See our <a  class="external-link" href="https://github.com/Kentico/Mvc">MVC Demo site</a> for a reference on how to implement tests for your controllers.</p>
        </div>
    </div>
    <div class="section section-1" id="src-68880530_TestingMVCcontrollers-Providingcontentitemsincontrollertests">
        <h1 class="heading "><span>Providing content items in controller tests</span></h1>
<p   
>This is an example showing how the ArticleController controller and ArticleControllerTests are implemented in a similar way as on the sample <a  class="external-link" href="https://github.com/Kentico/Mvc">MVC Demo site</a>. The controller displays a list of articles and their detail. Note that the sample implementation is dependent on external libraries, such as <a  class="external-link" href="http://autofac.org/">Autofac</a>, <a  class="external-link" href="https://github.com/TestStack/TestStack.FluentMVCTesting">TestStack.FluentMVCTesting</a>, and <a  class="external-link" href="http://nsubstitute.github.io/">NSubstitute</a>.</p>
<ol class=" "><li class=" "><p   
>Create a repository that provides access to content items using their <a   href="k11/Generating-classes-for-Kentico-objects.htm">generated providers</a>. The repository only needs to contain the methods required by the application, not the data layer.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">interface</code><code class="plain"> IArticleRepository</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">   IEnumerable&lt;Article&gt; GetArticles(</code><code class="keyword">int</code><code class="plain"> count = 0);</code></div>
<div class="line"><code class="plain"> </code></div>
<div class="line"><code class="plain">   Article GetArticle(Guid nodeGuid);</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">sealed</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> ArticleRepository : IArticleRepository</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> Article GetArticle(Guid nodeGuid)</code></div>
<div class="line"><code class="plain">	{</code></div>
<div class="line"><code class="plain">    	</code><code class="keyword">return</code><code class="plain"> ArticleProvider.GetArticle(nodeGuid, mCultureName, mSiteName);</code></div>
<div class="line"><code class="plain">	}</code></div>
<div class="line"><code class="plain">...</code></div>
</div>
    </div>
</li><li class=" "><p   
>Register the repository in the container configuration. For example, the Kentico <a  class="external-link" href="https://github.com/Kentico/Mvc">MVC Demo site</a> configures the container in the application&#39;s Global.asax.cs file.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="plain">builder.Register&lt;ArticleRepository&gt;().As&lt;IArticleRepository&gt;();</code></div>
</div>
    </div>
</li><li class=" "><p   
>Use container and any other dependencies in the controller constructor.<br/></p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> ArticlesController : Controller</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">readonly</code><code class="plain"> IArticleRepository mArticleRepository;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> ArticlesController(IArticleRepository repository)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        mArticleRepository = repository;</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">...</code></div>
</div>
    </div>
<p   
><br/></p>
</li><li class=" "><p   
>The controller contains a method that returns a view based on article&#39;s NodeGUID or a new instance of the <i class=" ">HttpNotFoundResult </i>class if the article doesn&#39;t exist.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="comments">// GET: Articles/Show/{guid}</code></div>
<div class="line"><code class="keyword">public</code><code class="plain"> ActionResult Show(Guid guid)</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">var</code><code class="plain"> article = mArticleRepository.GetArticle(guid);</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">if</code><code class="plain"> (article == </code><code class="keyword">null</code><code class="plain">)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">return</code><code class="plain"> HttpNotFound();</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">return</code><code class="plain"> View(article);</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li><li class=" "><p   
>Set up the controller test and create the controller with the required dependencies. The following example uses the <a  class="external-link" href="http://nunit.org/">NUnit</a> testing framework.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="plain">[SetUp]</code></div>
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> SetUp()</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">	</code><code class="comments">// Allow creating of articles without accessing the database.	</code></div>
<div class="line"><code class="plain">    Fake().DocumentType&lt;Article&gt;(Article.CLASS_NAME);</code></div>
<div class="line"><code class="plain">	</code></div>
<div class="line"><code class="plain">	</code><code class="comments">// Mock a repository and set a return value.</code></div>
<div class="line"><code class="plain">	</code><code class="keyword">var</code><code class="plain"> article = TreeNode.New&lt;Article&gt;().With(a =&gt; a.DocumentName = </code><code class="string">"Test"</code><code class="plain">);</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">var</code><code class="plain"> repository = Substitute.For&lt;IArticleRepository&gt;();</code></div>
<div class="line"><code class="plain">    repository.GetArticle(1).Returns(article);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    mController = </code><code class="keyword">new</code><code class="plain"> ArticlesController(repository);</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li><li class=" "><p   
>Create individual test cases for the controller.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="plain">[Test]</code></div>
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> Show_WithoutExistingArticle_ReturnsHttpNotFoundStatusCode()</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">	mController.WithCallTo(c =&gt; c.Show(2))</code></div>
<div class="line"><code class="plain">		.ShouldGiveHttpStatus(HttpStatusCode.NotFound);</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li></ol>    </div>
        </div>

    </article>


               
            
    <footer id="ht-footer">
    <a href="#" id="ht-jump-top" class="sp-aui-icon-small sp-aui-iconfont-arrows-up"></a>
</footer></div>

<div>
    <div id="ht-mq-detect"></div>
</div>

    <script src="js/lunr.js"></script>
    <script src="js/lunr-extras.js"></script>
    <script src="assets/js/scroll-search.js"></script>

    <script src="assets/js/expand-macro.js"></script>
</body>
</html>
