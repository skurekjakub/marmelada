<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Implementing personal data collection - Kentico 11 Documentation</title>

    
    <link rel="stylesheet" href="assets/css/expand-macro.css">

            <meta name="scroll-content-language-key" content="">
    
    <meta name="description" content="">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=2.0, user-scalable=yes">

<script type="text/javascript" src="assets/js/jquery.min.js"></script>
<script type="text/javascript" src="assets/js/jquery.scrollTo.min.js"></script>


<script type="text/javascript" src="assets/js/translate.js"></script>

<script type="text/javascript" src="assets/js/theme.main.js"></script>

    <script type="text/javascript" src="assets/js/iframeResizer.min.js"></script>

<link rel="stylesheet" href="assets/css/content-style.css">
    <link rel="stylesheet" href="assets/css/search.css">

<link rel="stylesheet" href="assets/css/theme.main.css">
<link rel="stylesheet" href="assets/css/theme.colors.css">

            <!-- ES5 support for older browsers, needed by lunr -->
        <script src="js/augment.js"></script> 
        <script id="worker" type="javascript/worker">

        startIndex = function() {
            idx = lunr.Index.load(lunrIndex);
            idx.pipeline.remove(lunr.stopWordFilter);
            postMessage({type: "setup-complete"});
        }

        onmessage = function (event) {
            var message = event.data;

            if ((message.type === 'setup') && message.baseUrl) {
                var url = message.baseUrl;
                importScripts(url + 'js/lunr.js');
                importScripts(url + 'js/lunr-extras.js');
                importScripts(url + 'js/lunr-index.js');
                importScripts(url + 'js/lunr-data.js');
                startIndex();
            }

            if (idx && (message.type === 'search-request') && message.query) {
                var searchWord = message.query;
                var results = idx.search(searchWord).map(function (result) {
                    return lunrData.filter(function (d) {
                        return d.id === parseInt(result.ref, 10)
                    })[0]
                });
                postMessage({type: 'search-results', results: results, query: searchWord, queryId: message.queryId});
            }
        }

    </script>
    </head>

<body pageid="68879260">

<div id="ht-loader">
    <noscript>
        <p style="width: 100%; text-align:center; position: absolute; margin-top: 200px;">This content cannot be displayed without JavaScript.<br>Please enable JavaScript and reload the page.</p>
    </noscript>
</div>

<div>
   	<header id="ht-headerbar">
    <div class="ht-headerbar-left">
        <a href="" id="ht-menu-toggle" class="sp-aui-icon-small sp-aui-iconfont-appswitcher"></a>
    </div>
    <div class="ht-headerbar-right">
            <div class="sp-aui-icon-small ht-search-index-loader ht-header-icon"></div>

        <div id="ht-search">
            <div class="ht-search-input" style="display: none;">
              	<a href="#" class="sp-aui-icon-small sp-aui-iconfont-remove ht-search-clear"></a>

                <form action="#" method="GET" id="search">
                    <input class="search-input" type="text" placeholder="Search" tabindex="-1" autocomplete="off" name="q" value="">
                    <input type="hidden" name="max" value="15" />
                    <input type="submit" style="display:none" tabindex="-4"/>
                </form>

                <a href="#" id="ht-search-button" class="ht-header-icon ht-header-icon-svg">
                                        <svg width="40px" height="40px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <g>
                            <path d="M29.572,28.802 L28.801,29.571 C28.515,29.857 28.187,30 27.816,30 C27.445,30 27.116,29.857 26.831,29.571 L21.392,24.134 C20.193,24.762 18.908,25.076 17.538,25.076 C15.396,25.076 13.605,24.348 12.163,22.892 C10.721,21.436 10,19.651 10,17.538 C10,15.397 10.721,13.605 12.163,12.163 C13.605,10.721 15.396,10 17.538,10 C19.651,10 21.434,10.721 22.89,12.163 C24.347,13.605 25.075,15.397 25.075,17.538 C25.075,18.937 24.761,20.222 24.132,21.393 L29.572,26.832 C29.857,27.118 30,27.446 30,27.817 C30,28.188 29.857,28.517 29.572,28.802 L29.572,28.802 Z M13.662,21.414 C14.732,22.485 16.024,23.02 17.538,23.02 C19.051,23.02 20.343,22.485 21.413,21.414 C22.484,20.344 23.019,19.052 23.019,17.538 C23.019,16.025 22.484,14.733 21.413,13.662 C20.343,12.592 19.051,12.056 17.538,12.056 C16.024,12.056 14.732,12.592 13.662,13.662 C12.591,14.733 12.056,16.025 12.056,17.538 C12.056,19.052 12.591,20.344 13.662,21.414 L13.662,21.414 Z"></path>
                        </g>
                    </svg>
              	</a>

                <div class="ht-search-dropdown ht-dropdown">
                    <ul></ul>
                </div>
            </div>
        </div>
    </div>
    </header>   	<aside id="ht-sidebar">
    <div class="ht-sidebar-content">
        <div class="ht-sidebar-content-scroll-container">
            <header class="ht-sidebar-header">
                <h1 class="ht-logo">
                    <span class="ht-logo-label">K11</span>
                    <img class="space-logo" src="global.logo" />
                </h1>
                <a href="Kentico-11-Documentation-Home.htm" class="ht-space-link">
                    <h2>Kentico 11 Documentation</h2>
                </a>
            </header>
                            <iframe id="ht-nav" src="toc.html?pageId=76846055"></iframe>
                <script>
                    $('iframe#ht-nav').iFrameResize(
                            { 'log': true, 'autoResize': true, 'heightCalculationMethod': 'lowestElement', 'checkOrigin': false });
                </script>
                    </div>
    </div>

</aside></div>

<div id="ht-wrap-container">

            
    <div id="ht-sidebar-dragbar">
    <div class="ht-sidebar-drag-handle">
        <span class="drag-handle-1"></span>
        <span class="drag-handle-2"></span>
        <span class="drag-handle-3"></span>
    </div>
</div>
    <article id="ht-content" class="ht-content">
        <header class="ht-content-header">
            <div id="ht-breadcrumb">
    <ul>
        <li><a href="Kentico-11-Documentation-Home.htm">Kentico 11 Documentation</a></li>
                                                                                                             <li><a href="" onclick="$('.shortcut').each(function(){$(this).removeClass('shortcut')}); $(this).parent().addClass('shortcut'); return false;">...</a> </li>
                                        <li class="shortcut"><a href="Configuring-Kentico.htm">Configuring Kentico</a></li>
                                                                                     <li><a href="GDPR-compliance.htm">GDPR compliance</a></li>
                                                            </ul>
</div>            <h1 id="src-76846055"> <span>Implementing personal data collection</span></h1>
        </header>

        <div id="main-content" class="wiki-content sp-grid-section" data-index-for-search="true">
<p   
>To comply with the requirements of personal data regulations, such as the <a   href="k11/GDPR-compliance.htm">GDPR</a>, you need to provide a way for administrators (data protection officers) to collect personal data stored within the system. This is necessary to resolve personal data queries from data subjects, and requests to transfer personal data to another system or application.</p>
<p   
>Kentico does not provide any personal data collection functionality by default. This requires exact knowledge of how your website gathers, processes and stores personal data. You need to implement the data collection based on the specifics of your website and the nature of the legal requirements that you wish to fulfill.</p>
    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>See the <a   href="k11/Personal-data-in-Kentico.htm">Personal data in Kentico</a> reference to learn how the system gathers, stores and uses personal data by default. The information may be helpful when planning the collection functionality for your website.</p>
        </div>
    </div>
<p   
>Use the following process to develop the personal data collection:</p>
    <div  class="confbox admonition admonition-note">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>The interfaces, registers and other related classes that you need to implement personal data collection are available in the <strong class=" ">CMS.DataProtection</strong> namespace of the Kentico API.</p>
        </div>
    </div>
<ol class=" "><li class=" "><p   
>Open your Kentico solution in Visual Studio.</p>
</li><li class=" "><p   
>Create custom classes that implement collector interfaces:<br/></p>
<ul class=" "><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Identitycollectors">Identity collectors</a> &ndash; map real-world identifiers, such as email addresses or names, to corresponding Kentico objects that represent data subjects.</p>
</li><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Datacollectors">Data collectors</a> &ndash; process the objects added by identity collectors, retrieve related personal data, and format the results into a string containing either human-readable text or machine-readable data (such as XML).</p>
    <div  class="confbox admonition admonition-tip">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
><strong class=" ">Class location</strong><br/></p>
<p   
>We recommend adding custom classes as part of a new assembly (<i class=" ">Class library</i> project) in your Kentico solution. You need to add the appropriate references to both the assembly and the main Kentico web project.<br/></p>
        </div>
    </div>
</li></ul></li><li class=" "><p   
>Add a <a   href="k11/Initializing-modules-to-run-custom-code.htm">custom module class</a> and register your collector implementations within the module&#39;s <strong class=" ">OnInit</strong> method:<br/></p>
<ul class=" "><li class=" "><p   
>You can register any number of collectors.</p>
</li><li class=" "><p   
>To register identity collectors, call the <strong class=" ">IdentityCollectorRegister.Instance.Add</strong> method. The registration order is significant &ndash; the identities added by a collector can be accessed by identity collectors that are registered after.</p>
</li><li class=" "><p   
>To register data collectors, call the <strong class=" ">PersonalDataCollectorRegister.Instance.Add</strong> method.</p>
</li></ul></li></ol><p   
>The registered collectors allow users to search for personal data in the <strong class=" ">Data protection</strong> application. To give users the option to delete the collected data from the system (or specific parts of it), you also need to implement erasure functionality &ndash; see <a   href="k11/Implementing-personal-data-erasure.htm">Implementing personal data erasure</a>.</p>
    <div  class="confbox panel">
            <div class="title panel-header">On this page</div>
            <div class="panel-content">
<p   
></p>
<ul class="toc-indentation "><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Identitycollectors">Identity collectors</a></p>
</li><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Datacollectors">Data collectors</a></p>
</li><li class=" "><p   
><a   href="k11/#src-76846055_safe-id-SW1wbGVtZW50aW5ncGVyc29uYWxkYXRhY29sbGVjdGlvbi1FeGFtcGxl4oCTQ3JlYXRpbmdjb250YWN0ZGF0YWNvbGxlY3RvcnM">Example &ndash; Creating contact data collectors</a></p>
</li></ul><p   
></p>
        </div>
    </div>
    <div  class="confbox panel">
            <div class="title panel-header">Related pages</div>
            <div class="panel-content">
<ul class=" "><li class=" "><p   
><a   href="k11/GDPR-compliance.htm">GDPR compliance</a></p>
</li><li class=" "><p   
><a   href="k11/Personal-data-in-Kentico.htm">Personal data in Kentico</a></p>
</li><li class=" "><p   
><a   href="k11/Implementing-personal-data-erasure.htm">Implementing personal data erasure</a></p>
</li></ul>        </div>
    </div>
<p   
></p>
    <div  class="confbox admonition admonition-info">
                    <p class="title">Kentico EMS required</p>
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>Features described on this page require the <strong class=" ">Kentico EMS</strong> license.</p>
        </div>
    </div>
<p   
></p>
    <h3 id="src-76846055_Implementingpersonaldatacollection-Identitycollectors" class="heading "><span>Identity collectors</span></h3>
<p   
>When searching for personal data in the <strong class=" ">Data protection</strong> application, users submit real-world identifiers of data subjects (email addresses, names, etc.). To collect personal data, you first need to create <i class=" ">Identity collectors</i> that convert these identifiers into Kentico objects representing matching data subjects, such as <a   href="k11/User-management.htm">users</a> (<i class=" ">UserInfo</i>), <a   href="k11/Working-with-contacts.htm">contacts</a> (<i class=" ">ContactInfo</i>) or <a   href="k11/Customers.htm">customers</a> (<i class=" ">CustomerInfo</i>).</p>
<p   
>Identity collectors are classes that implement the <strong class=" ">IIdentityCollector</strong> interface. Every implementation must contain the <strong class=" ">Collect</strong> method, which processes the following parameters:</p>
<ul class=" "><li class=" "><p   
><strong class=" ">IDictionary&lt;string, object&gt;</strong> &ndash; a dictionary holding the submitted identifiers and other filtering parameters. The default identifier input only provides an email address value, which is available under the <strong class=" ">&quot;email&quot;</strong> key.</p>
</li><li class=" "><p   
><strong class=" ">List&lt;BaseInfo&gt;</strong> &ndash; a list of Kentico objects representing data subjects. Contains all objects added by previously registered <i class=" ">IIdentityCollector</i> implementations.</p>
</li></ul><p   
>To create your own <i class=" ">IIdentityCollector</i> implementations:</p>
<ol class=" "><li class=" "><p   
>Use the <a   href="k11/Retrieving-database-data-using-ObjectQuery-API.htm">ObjectQuery API</a> to load Kentico objects (instances of <i class=" ">Info</i> classes) that match the submitted identifier values (available in the <i class=" ">Collect</i> method&#39;s first parameter).</p>
</li><li class=" "><p   
>Add the retrieved objects to the list of identity objects (the <i class=" ">Collect</i> method&#39;s second parameter).</p>
</li></ol>    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>See the <a   href="k11/#src-76846055_safe-id-SW1wbGVtZW50aW5ncGVyc29uYWxkYXRhY29sbGVjdGlvbi1FeGFtcGxl4oCTQ3JlYXRpbmdjb250YWN0ZGF0YWNvbGxlY3RvcnM">Example - Creating contact data collectors</a> section to view a code example.</p>
        </div>
    </div>
    <h4 id="src-76846055_Implementingpersonaldatacollection-Customizingtheidentifierinputs" class="heading "><span>Customizing the identifier inputs</span></h4>
<p   
>By default, the <strong class=" ">Data protection</strong> application allows users to search for personal data based on an email address value. If you wish to set up personal data collection according to other types of identifiers or add filtering options, you need to create and register a custom control:</p>
<ol class=" "><li class=" "><p   
>Open your Kentico solution in Visual Studio.</p>
</li><li class=" "><p   
>Create a new Web User Control (.ascx file) in the Kentico web project (<i class=" ">CMSApp</i> or <i class=" ">CMS</i>).</p>
</li><li class=" "><p   
>Add components to the control&#39;s markup that allow users to input the required identifier values and/or set filtering parameters.</p>
</li><li class=" "><p   
>Switch to the code behind and make the control class inherit from <strong class=" ">DataSubjectIdentifiersFilterControl</strong> (available in the <strong class=" ">CMS.UIControls</strong> namespace).<strong class=" "><br/></strong></p>
</li><li class=" "><p   
>Override the following methods:</p>
<ul class=" "><li class=" "><p   
><strong class=" ">GetFilter</strong> &ndash; return an <i class=" ">IDictionary&lt;string, object&gt;</i> collection containing all identifier values and filtering parameters that users input through the control.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                    <div class="title">Example</div>
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-title="Example" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">override</code><code class="plain"> IDictionary&lt;</code><code class="keyword">string</code><code class="plain">, </code><code class="keyword">object</code><code class="plain">&gt; GetFilter(IDictionary&lt;</code><code class="keyword">string</code><code class="plain">, </code><code class="keyword">object</code><code class="plain">&gt; filter)</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    filter.Add(</code><code class="string">"email"</code><code class="plain">, txtEmail.Text);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="keyword">return</code><code class="plain"> filter;</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li><li class=" "><p   
><strong class=" ">IsValid</strong> &ndash; return a <i class=" ">bool</i> value that indicates whether the control&#39;s input is valid. Call the <i class=" ">AddError</i> method to display messages to users in cases where the input is not valid.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                    <div class="title">Example</div>
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-title="Example" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">override</code><code class="plain"> </code><code class="keyword">bool</code><code class="plain"> IsValid()</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">if</code><code class="plain"> (!CMS.Helpers.ValidationHelper.IsEmail(txtEmail.Text))</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        AddError(</code><code class="string">"Please enter a valid email address."</code><code class="plain">);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="keyword">return</code><code class="plain"> </code><code class="keyword">false</code><code class="plain">;</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="keyword">return</code><code class="plain"> </code><code class="keyword">true</code><code class="plain">;</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li></ul></li><li class=" "><p   
>Edit the <a   href="k11/Initializing-modules-to-run-custom-code.htm">module class</a> where you register your collector implementations, and register your identifier input control within the module&#39;s <strong class=" ">OnInit</strong> method:</p>
<ul class=" "><li class=" "><p   
>Call the <strong class=" ">DataProtectionControlsRegister.Instance.RegisterDataSubjectIdentifiersFilterControl</strong> method (available in the <strong class=" ">CMS.UIControls</strong> namespace).</p>
</li><li class=" "><p   
>Specify the path of the user control file in the method&#39;s parameter, for example: <i class=" ">~/CMSModules/CustomDataProtection/DataSubjectIdentifiers.ascx</i></p>
</li></ul></li></ol><p   
>The system now uses your custom control to display the identifier inputs in the <strong class=" ">Data protection</strong> application. The keys and values added via the control&#39;s <strong class=" ">GetFilter</strong> method are available as the second parameter of the <strong class=" ">Collect</strong> method in your <strong class=" ">IIdentityCollector</strong> implementations.</p>
    <h3 id="src-76846055_Implementingpersonaldatacollection-Datacollectors" class="heading "><span>Data collectors</span></h3>
<p   
>After you implement <a   href="k11/#src-76846055_Implementingpersonaldatacollection-Identitycollectors">Identity collectors</a>, you need to create <i class=" ">Data collectors</i>. These collectors retrieve personal data related to the identity objects provided by the registered identity collectors, and process the results into a suitable format. We recommend creating separate data collectors for different object types, depending on the types of <a   href="k11/Personal-data-in-Kentico.htm">personal data</a> that you process on your website.</p>
<p   
>Data collectors are classes that implement the <strong class=" ">IPersonalDataCollector</strong> interface. Every implementation must contain the <strong class=" ">Collect</strong> method.</p>
<ul class=" "><li class=" "><p   
>The method&#39;s <strong class=" ">IEnumerable&lt;BaseInfo&gt;</strong> parameter provides the identity objects added by your <i class=" ">IIdentityCollector</i> implementations. You can convert the <i class=" ">BaseInfo</i> objects to specific types, such as <i class=" ">UserInfo, ContactInfo,</i> etc.</p>
</li><li class=" "><p   
>The method&#39;s second parameter is a string that specifies the requested output format. By default, the following fixed values are used for the output format:<br/></p>
<ul class=" "><li class=" "><p   
><strong class=" ">machine</strong> &ndash; when searching for data on the <i class=" ">Data portability</i> tab of the <i class=" ">Data protection</i> application. The value is available in the API under the <i class=" ">PersonalDataFormat.MACHINE_READABLE</i> constant. By default, the system assumes that machine-readable data is in XML format and adds a <i class=" ">&lt;PersonalData&gt;</i> root tag around the final output. To return data in another format, such as <a  class="external-link" href="http://www.json.org/">JSON</a>, you need to <a   href="k11/#src-76846055_Implementingpersonaldatacollection-Customizingthedataoutput">Customize the data output</a>.</p>
</li><li class=" "><p   
><strong class=" ">human</strong> &ndash; when searching for data on the <i class=" ">Right to access</i> and <i class=" ">Right to be forgotten</i> tabs in the <i class=" ">Data protection</i> application. The value is available in the API under the <i class=" ">PersonalDataFormat.HUMAN_READABLE</i> constant.</p>
</li></ul></li></ul><p   
>To create your own <i class=" ">IPersonalDataCollector</i> implementations:</p>
<ol class=" "><li class=" "><p   
>Collect all required personal data related to the provided identity objects.</p>
</li><li class=" "><p   
>Format the data into a string.</p>
    <div  class="confbox admonition admonition-tip">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>We recommend creating a dedicated writer class for every required output format. You can reuse the API of general writer classes to build the personal data string for different types of objects.</p>
<p   
>You may also need to define transformation functions that convert internally stored values into more understandable equivalents. For example, the system uses integer values for some fields that have a fixed set of possible options (e.g. the user gender field).</p>
        </div>
    </div>
</li><li class=" "><p   
>Return a <strong class=" ">PersonalDataCollectorResult</strong> object in the <strong class=" ">Collect</strong> method, with the resulting personal data string assigned into the <strong class=" ">Text</strong> property.</p>
</li></ol>    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>See the <a   href="k11/#src-76846055_safe-id-SW1wbGVtZW50aW5ncGVyc29uYWxkYXRhY29sbGVjdGlvbi1FeGFtcGxl4oCTQ3JlYXRpbmdjb250YWN0ZGF0YWNvbGxlY3RvcnM">Example - Creating contact data collectors</a> section to view a code example.</p>
        </div>
    </div>
<p   
>The text provided by registered data collectors is displayed when searching for personal data in the <strong class=" ">Data protection</strong> application.</p>
    <h4 id="src-76846055_Implementingpersonaldatacollection-Customizingthedataoutput" class="heading "><span>Customizing the data output</span></h4>
<p   
>By default, the overall data returned by the collection process is composed according to the registration order of your data collectors (starting from the first to the last). Additionally, the system assumes that machine-readable data is in XML format and adds a <i class=" ">&lt;PersonalData&gt;</i> root tag around the final output of all data collectors.</p>
<p   
>If you wish to return machine-readable data in another format, such as <a  class="external-link" href="http://www.json.org/">JSON</a>, or otherwise adjust the data composition process, use the following customization approach:</p>
<ol class=" "><li class=" "><p   
>Open your Kentico solution in Visual Studio.</p>
</li><li class=" "><p   
>Create a custom class that inherits from <strong class=" ">PersonalDataHelper</strong> (available in the <strong class=" ">CMS.DataProtection</strong> namespace).</p>
</li><li class=" "><p   
>Override the <strong class=" ">JoinPersonalDataInternal</strong> method of the helper class:<br/></p>
<ul class=" "><li class=" "><p   
>The method&#39;s <strong class=" ">IEnumerable&lt;string&gt;</strong> parameter provides a collection of personal data strings added by your registered <i class=" ">IPersonalDataCollector</i> implementations.</p>
</li><li class=" "><p   
>The method&#39;s second parameter is a string that specifies the requested output format.</p>
</li><li class=" "><p   
>Compose the final data output according to your custom requirements and return it as a string.</p>
</li></ul></li><li class=" "><p   
><a   href="k11/Registering-providers-using-assembly-attributes.htm">Register</a> your helper class implementation using the <strong class=" ">RegisterCustomHelper</strong> assembly attribute.</p>
</li></ol>    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                    <div class="title">Example</div>
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-title="Example" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">using</code><code class="plain"> System;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Linq;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Text;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Collections.Generic;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataProtection;</code></div>
<div class="line"> </div>
<div class="line"><code class="comments">// Registers the CustomPersonalDataHelper class to replace the default PersonalDataHelper</code></div>
<div class="line"><code class="plain">[assembly: RegisterCustomHelper(</code><code class="keyword">typeof</code><code class="plain">(CustomPersonalDataHelper))]</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> CustomPersonalDataHelper : PersonalDataHelper</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="comments">// Customizes the output of personal data in machine-readable format</code></div>
<div class="line"><code class="plain">    </code><code class="comments">// Replaces the default &lt;PersonalData&gt; XML root tag with curly brackets for JSON data</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">protected</code><code class="plain"> </code><code class="keyword">override</code><code class="plain"> </code><code class="keyword">string</code><code class="plain"> JoinPersonalDataInternal(IEnumerable&lt;</code><code class="keyword">string</code><code class="plain">&gt; personalData, </code><code class="keyword">string</code><code class="plain"> outputFormat)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="comments">// Performs custom handling for personal data in machine-readable format</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">if</code><code class="plain"> (outputFormat.Equals(PersonalDataFormat.MACHINE_READABLE, StringComparison.OrdinalIgnoreCase))</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">string</code><code class="plain"> indentation = </code><code class="string">"  "</code><code class="plain">;</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">string</code><code class="plain"> indentedNewLine = Environment.NewLine + indentation;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="keyword">var</code><code class="plain"> resultBuilder = </code><code class="keyword">new</code><code class="plain"> StringBuilder();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="comments">// Adds the opening bracket to the result</code></div>
<div class="line"><code class="plain">            resultBuilder.AppendLine(</code><code class="string">"{"</code><code class="plain">);</code></div>
<div class="line"><code class="plain">            resultBuilder.Append(indentation);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="comments">// Updates all new line characters in the returned personal data to include the added indentation</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">var</code><code class="plain"> modifiedPersonalData = personalData.Select(data =&gt; data.Replace(Environment.NewLine, indentedNewLine));</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="comments">// Adds the data provided by all registered personal data collectors</code></div>
<div class="line"><code class="plain">            resultBuilder.AppendLine(String.Join(indentedNewLine, modifiedPersonalData));</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="comments">// Adds the closing bracket to the result</code></div>
<div class="line"><code class="plain">            resultBuilder.Append(</code><code class="string">"}"</code><code class="plain">);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="keyword">return</code><code class="plain"> resultBuilder.ToString();</code></div>
<div class="line"><code class="plain">        }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="comments">// Runs the default method for human-readable or undefined output formats</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">return</code><code class="plain"> </code><code class="keyword">base</code><code class="plain">.JoinPersonalDataInternal(personalData, outputFormat);</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
<p   
>The system now uses your custom data joining implementation when displaying results in the <strong class=" ">Data protection</strong> application.</p>
    <h3 id="src-76846055_safe-id-SW1wbGVtZW50aW5ncGVyc29uYWxkYXRhY29sbGVjdGlvbi1FeGFtcGxl4oCTQ3JlYXRpbmdjb250YWN0ZGF0YWNvbGxlY3RvcnM" class="heading "><span>Example &ndash; Creating contact data collectors</span></h3>
<p   
>The following example demonstrates how to implement personal data collection for basic <a   href="k11/Working-with-contacts.htm">contact</a> data. The sample collectors work with the default email address identifier that users can submit in the <strong class=" ">Data protection</strong> application, and produce personal data output in plain text or XML format.</p>
    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
>This example only shows the basic implementation concepts and collects a very limited set of personal data. You can find a more extensive code example in your Kentico program files directory (by default <i class=" ">C:\Program Files\Kentico\&lt;version&gt;</i>) under the <strong class=" ">CodeSamples\CustomizationSamples\DataProtection</strong> subfolder.</p>
<p   
>Keep in mind that you always need to adjust your own implementation based on the personal data processing used on your website and the legal requirements that you wish to fulfill.</p>
        </div>
    </div>
<p   
></p>
<ul class="toc-indentation "><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Addingacustomclasslibrary">Adding a custom class library</a></p>
</li><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Creatingtheidentitycollector">Creating the identity collector</a></p>
</li><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Implementingwriterclasses">Implementing writer classes</a></p>
</li><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Creatingthedatacollector">Creating the data collector</a></p>
</li><li class=" "><p   
><a   href="k11/#src-76846055_Implementingpersonaldatacollection-Registeringthecollectors">Registering the collectors</a></p>
</li></ul><p   
></p>
    <h4 id="src-76846055_Implementingpersonaldatacollection-Addingacustomclasslibrary" class="heading "><span>Adding a custom class library</span></h4>
<p   
>Start by preparing a separate project for custom classes in your Kentico solution:</p>
<ol class=" "><li class=" "><p   
>Open your Kentico solution in Visual Studio.</p>
</li><li class=" "><p   
>Create a new <i class=" ">Class Library</i> project in the Kentico solution (or reuse an existing custom project).</p>
</li><li class=" "><p   
>Add references to the required Kentico libraries (DLLs) for the new project:<br/></p>
<ol class=" "><li class=" "><p   
>Right-click the project and select <strong class=" ">Add -&gt; Reference</strong>.</p>
</li><li class=" "><p   
>Select the <strong class=" ">Browse</strong> tab of the <strong class=" ">Reference manager</strong> dialog, click <strong class=" ">Browse</strong> and navigate to the <i class=" "><strong class=" ">Lib</strong> </i>folder of your Kentico web project.</p>
</li><li class=" "><p   
>Add references to the following libraries (and any others that you may need in your custom code):</p>
<ul class=" "><li class=" "><p   
><strong class=" ">CMS.Base.dll</strong></p>
</li><li class=" "><p   
><strong class=" ">CMS.ContactManagement.dll</strong></p>
</li><li class=" "><p   
><strong class=" ">CMS.Core.dll</strong></p>
</li><li class=" "><p   
><strong class=" ">CMS.DataEngine.dll</strong></p>
</li><li class=" "><p   
><strong class=" ">CMS.DataProtection.dll</strong></p>
</li><li class=" "><p   
><strong class=" ">CMS.Helpers.dll</strong></p>
</li></ul></li></ol></li><li class=" "><p   
>Reference the custom project from the Kentico web project <i class=" ">(CMSApp</i> or <i class=" ">CMS)</i>.</p>
</li><li class=" "><p   
>Edit the custom project&#39;s <strong class=" ">AssemblyInfo.cs</strong> file (in the <i class=" ">Properties</i> folder).</p>
</li><li class=" "><p   
>Add the <strong class=" ">AssemblyDiscoverable</strong> assembly attribute:<br/></p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">using</code><code class="plain"> CMS;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">[assembly:AssemblyDiscoverable]</code></div>
</div>
    </div>
</li></ol><p   
>You can now add your collector implementations and other related classes under the custom project.<br/></p>
    <h4 id="src-76846055_Implementingpersonaldatacollection-Creatingtheidentitycollector" class="heading "><span>Creating the identity collector</span></h4>
<p   
>To create an identity collector for contacts, add a new class implementing the <strong class=" ">IIdentityCollector</strong> interface under the custom project:</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">using</code><code class="plain"> System;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Collections.Generic;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Linq;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataEngine;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataProtection;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.ContactManagement;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> ContactIdentityCollector : IIdentityCollector</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> Collect(IDictionary&lt;</code><code class="keyword">string</code><code class="plain">, </code><code class="keyword">object</code><code class="plain">&gt; dataSubjectFilter, List&lt;BaseInfo&gt; identities)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="comments">// Does nothing if the identifier inputs do not contain the "email" key or if its value is empty</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">if</code><code class="plain"> (!dataSubjectFilter.ContainsKey(</code><code class="string">"email"</code><code class="plain">))</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">return</code><code class="plain">;</code></div>
<div class="line"><code class="plain">        }</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">string</code><code class="plain"> email = dataSubjectFilter[</code><code class="string">"email"</code><code class="plain">] </code><code class="keyword">as</code><code class="plain"> </code><code class="keyword">string</code><code class="plain">;</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">if</code><code class="plain"> (String.IsNullOrWhiteSpace(email))</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">return</code><code class="plain">;</code></div>
<div class="line"><code class="plain">        }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="comments">// Finds contacts with a matching email address</code></div>
<div class="line"><code class="plain">        List&lt;ContactInfo&gt; contacts = ContactInfoProvider.GetContacts()</code></div>
<div class="line"><code class="plain">                                            .WhereEquals(nameof(ContactInfo.ContactEmail), email)</code></div>
<div class="line"><code class="plain">                                            .ToList();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="comments">// Adds the matching contact objects to the list of collected identities</code></div>
<div class="line"><code class="plain">        identities.AddRange(contacts);</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
<p   
>The collector loads all contact objects (<i class=" ">ContactInfo</i>) that match the submitted email address identifier, and adds them to the list of collected identities.</p>
    <h4 id="src-76846055_Implementingpersonaldatacollection-Implementingwriterclasses" class="heading "><span>Implementing writer classes</span></h4>
<p   
>Continue by creating writer classes that convert Kentico objects into the required output formats (plain text and XML in this example).</p>
<p   
>For plain text, add the following writer class under the custom project:</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">using</code><code class="plain"> System;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Collections.Generic;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Text;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataEngine;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> TextPersonalDataWriter</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">readonly</code><code class="plain"> StringBuilder stringBuilder;</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">int</code><code class="plain"> indentationLevel;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> TextPersonalDataWriter()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        stringBuilder = </code><code class="keyword">new</code><code class="plain"> StringBuilder();</code></div>
<div class="line"><code class="plain">        indentationLevel = 0;</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">   </code></div>
<div class="line"><code class="plain">    </code><code class="comments">// Writes horizontal tabs based on the current indentation level</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> Indent()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        stringBuilder.Append(</code><code class="string">'\t'</code><code class="plain">, indentationLevel);</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Writes text representing a new section of data, and increases the indentation level</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> WriteStartSection(</code><code class="keyword">string</code><code class="plain"> sectionName)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        Indent();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        stringBuilder.AppendLine(sectionName + </code><code class="string">": "</code><code class="plain">);</code></div>
<div class="line"><code class="plain">        indentationLevel++;</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Writes the specified columns of a Kentico object (BaseInfo) and their values</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> WriteObject(BaseInfo baseInfo, List&lt;Tuple&lt;</code><code class="keyword">string</code><code class="plain">, </code><code class="keyword">string</code><code class="plain">&gt;&gt; columns)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">foreach</code><code class="plain"> (</code><code class="keyword">var</code><code class="plain"> column </code><code class="keyword">in</code><code class="plain"> columns)</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            </code><code class="comments">// Gets the name of the current column</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">string</code><code class="plain"> columnName = column.Item1;</code></div>
<div class="line"><code class="plain">            </code><code class="comments">// Gets a user-friendly name for the current column</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">string</code><code class="plain"> columnDisplayName = column.Item2;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="comments">// Filters out identifier columns from the human-readable text data</code></div>
<div class="line"><code class="plain">			</code><code class="keyword">if</code><code class="plain"> (columnName.Equals(baseInfo.TypeInfo.IDColumn, StringComparison.Ordinal) || </code></div>
<div class="line"><code class="plain">                columnName.Equals(baseInfo.TypeInfo.GUIDColumn, StringComparison.Ordinal))</code></div>
<div class="line"><code class="plain">            {</code></div>
<div class="line"><code class="plain">                </code><code class="keyword">continue</code><code class="plain">;</code></div>
<div class="line"><code class="plain">            }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="comments">// Gets the value of the current column for the given object</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">object</code><code class="plain"> value = baseInfo.GetValue(columnName);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="keyword">if</code><code class="plain"> (value != </code><code class="keyword">null</code><code class="plain">)</code></div>
<div class="line"><code class="plain">            {</code></div>
<div class="line"><code class="plain">                Indent();</code></div>
<div class="line"><code class="plain">                stringBuilder.AppendFormat(</code><code class="string">"{0}: "</code><code class="plain">, columnDisplayName);</code></div>
<div class="line"><code class="plain">                stringBuilder.Append(value);</code></div>
<div class="line"><code class="plain">                stringBuilder.AppendLine();</code></div>
<div class="line"><code class="plain">            }</code></div>
<div class="line"><code class="plain">        }</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// "Closes" a text section by reducing the indentation level</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> WriteEndSection()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        indentationLevel--;</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Gets a string containing the writer's overall text</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">string</code><code class="plain"> GetResult()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">return</code><code class="plain"> stringBuilder.ToString();</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
<p   
>For machine-readable data in XML format, add the following writer class under the custom project. The sample XML writer is an <a  class="external-link" href="https://docs.microsoft.com/en-us/dotnet/api/system.idisposable">IDisposable</a> implementation that uses the standard .NET <a  class="external-link" href="https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlwriter">XmlWriter</a> class to create the required output.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">using</code><code class="plain"> System;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Collections.Generic;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Text;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Xml;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataEngine;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.Helpers;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> XmlPersonalDataWriter : IDisposable</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">readonly</code><code class="plain"> StringBuilder stringBuilder;</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">readonly</code><code class="plain"> XmlWriter xmlWriter;</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> XmlPersonalDataWriter()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        stringBuilder = </code><code class="keyword">new</code><code class="plain"> StringBuilder();</code></div>
<div class="line"><code class="plain">        xmlWriter = XmlWriter.Create(stringBuilder, </code><code class="keyword">new</code><code class="plain"> XmlWriterSettings { Indent = </code><code class="keyword">true</code><code class="plain">, OmitXmlDeclaration = </code><code class="keyword">true</code><code class="plain"> });</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Writes an opening XML tag with a specified name</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> WriteStartSection(</code><code class="keyword">string</code><code class="plain"> sectionName)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="comments">// Replaces period characters in object names with underscores</code></div>
<div class="line"><code class="plain">        sectionName = sectionName.Replace(</code><code class="string">'.'</code><code class="plain">, </code><code class="string">'_'</code><code class="plain">);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        xmlWriter.WriteStartElement(sectionName);</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Writes XML tags representing the specified columns of a Kentico object (BaseInfo) and their values</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> WriteObject(BaseInfo baseInfo, List&lt;</code><code class="keyword">string</code><code class="plain">&gt; columns)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">foreach</code><code class="plain"> (</code><code class="keyword">string</code><code class="plain"> column </code><code class="keyword">in</code><code class="plain"> columns)</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">object</code><code class="plain"> value = baseInfo.GetValue(column);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="keyword">if</code><code class="plain"> (value != </code><code class="keyword">null</code><code class="plain">)</code></div>
<div class="line"><code class="plain">            {</code></div>
<div class="line"><code class="plain">                xmlWriter.WriteStartElement(column);</code></div>
<div class="line"><code class="plain">                xmlWriter.WriteValue(XmlHelper.ConvertToString(value));</code></div>
<div class="line"><code class="plain">                xmlWriter.WriteEndElement();</code></div>
<div class="line"><code class="plain">            }</code></div>
<div class="line"><code class="plain">        }</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Writes a closing XML tag for the most recent open tag</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> WriteEndSection()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        xmlWriter.WriteEndElement();</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Gets a string containing the writer's overall XML data</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">string</code><code class="plain"> GetResult()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        xmlWriter.Flush();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="keyword">return</code><code class="plain"> stringBuilder.ToString();</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Releases all resources used by the current XmlPersonalDataWriter instance.    </code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> Dispose()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        xmlWriter.Dispose();</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
    <h4 id="src-76846055_Implementingpersonaldatacollection-Creatingthedatacollector" class="heading "><span>Creating the data collector</span></h4>
<p   
>To create a data collector for contacts, add a class implementing the <strong class=" ">IPersonalDataCollector</strong> interface under the custom project:</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">using</code><code class="plain"> System;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Collections.Generic;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> System.Linq;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.ContactManagement;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataEngine;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataProtection;</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> ContactDataCollector : IPersonalDataCollector</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="comments">// Prepares a list of contact columns to be included in the personal data</code></div>
<div class="line"><code class="plain">    </code><code class="comments">// Every Tuple contains a column name, and user-friendly description of its content</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">readonly</code><code class="plain"> List&lt;Tuple&lt;</code><code class="keyword">string</code><code class="plain">, </code><code class="keyword">string</code><code class="plain">&gt;&gt; contactColumns = </code><code class="keyword">new</code><code class="plain"> List&lt;Tuple&lt;</code><code class="keyword">string</code><code class="plain">, </code><code class="keyword">string</code><code class="plain">&gt;&gt; {</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactFirstName"</code><code class="plain">, </code><code class="string">"First name"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactMiddleName"</code><code class="plain">, </code><code class="string">"Middle name"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactLastName"</code><code class="plain">, </code><code class="string">"Last name"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactJobTitle"</code><code class="plain">, </code><code class="string">"Job title"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactAddress1"</code><code class="plain">, </code><code class="string">"Address"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactCity"</code><code class="plain">, </code><code class="string">"City"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactZIP"</code><code class="plain">, </code><code class="string">"ZIP"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactMobilePhone"</code><code class="plain">, </code><code class="string">"Mobile phone"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactBusinessPhone"</code><code class="plain">, </code><code class="string">"Business phone"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactEmail"</code><code class="plain">, </code><code class="string">"Email"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactBirthday"</code><code class="plain">, </code><code class="string">"Birthday"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactGender"</code><code class="plain">, </code><code class="string">"Gender"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactNotes"</code><code class="plain">, </code><code class="string">"Notes"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactGUID"</code><code class="plain">, </code><code class="string">"GUID"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactLastModified"</code><code class="plain">, </code><code class="string">"Last modified"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactCreated"</code><code class="plain">, </code><code class="string">"Created"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactCampaign"</code><code class="plain">, </code><code class="string">"Campaign"</code><code class="plain">),</code></div>
<div class="line"><code class="plain">        Tuple.Create(</code><code class="string">"ContactCompanyName"</code><code class="plain">, </code><code class="string">"Company name"</code><code class="plain">)</code></div>
<div class="line"><code class="plain">    };    </code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> PersonalDataCollectorResult Collect(IEnumerable&lt;BaseInfo&gt; identities, </code><code class="keyword">string</code><code class="plain"> outputFormat)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="comments">// Gets a list of all contact objects added by registered IIdentityCollector implementations</code></div>
<div class="line"><code class="plain">        List&lt;ContactInfo&gt; contacts = identities.OfType&lt;ContactInfo&gt;().ToList();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="comments">// Uses a writer class to create the personal data, in either XML format or as human-readable text</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">string</code><code class="plain"> contactData = </code><code class="keyword">null</code><code class="plain">;</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">if</code><code class="plain"> (contacts.Any())</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            </code><code class="keyword">switch</code><code class="plain"> (outputFormat.ToLowerInvariant())</code></div>
<div class="line"><code class="plain">            {</code></div>
<div class="line"><code class="plain">                </code><code class="keyword">case</code><code class="plain"> PersonalDataFormat.MACHINE_READABLE:</code></div>
<div class="line"><code class="plain">                    contactData = GetXmlContactData(contacts);</code></div>
<div class="line"><code class="plain">                    </code><code class="keyword">break</code><code class="plain">;</code></div>
<div class="line"><code class="plain">                </code><code class="keyword">case</code><code class="plain"> PersonalDataFormat.HUMAN_READABLE:</code></div>
<div class="line"><code class="plain">                </code><code class="keyword">default</code><code class="plain">:</code></div>
<div class="line"><code class="plain">                    contactData = GetTextContactData(contacts);</code></div>
<div class="line"><code class="plain">                    </code><code class="keyword">break</code><code class="plain">;</code></div>
<div class="line"><code class="plain">            }</code></div>
<div class="line"><code class="plain">        }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="keyword">return</code><code class="plain"> </code><code class="keyword">new</code><code class="plain"> PersonalDataCollectorResult</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            Text = contactData</code></div>
<div class="line"><code class="plain">        };</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">string</code><code class="plain"> GetXmlContactData(List&lt;ContactInfo&gt; contacts)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">using</code><code class="plain"> (</code><code class="keyword">var</code><code class="plain"> writer = </code><code class="keyword">new</code><code class="plain"> XmlPersonalDataWriter())</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            </code><code class="comments">// Wraps the contact data into a &lt;OnlineMarketingData&gt; tag</code></div>
<div class="line"><code class="plain">            writer.WriteStartSection(</code><code class="string">"OnlineMarketingData"</code><code class="plain">);</code></div>
<div class="line"><code class="plain">            </code></div>
<div class="line"><code class="plain">            </code><code class="keyword">foreach</code><code class="plain"> (ContactInfo contact </code><code class="keyword">in</code><code class="plain"> contacts)</code></div>
<div class="line"><code class="plain">            {</code></div>
<div class="line"><code class="plain">                </code><code class="comments">// Writes a tag representing a contact object</code></div>
<div class="line"><code class="plain">                writer.WriteStartSection(ContactInfo.OBJECT_TYPE);</code></div>
<div class="line"><code class="plain">                </code><code class="comments">// Writes tags for the contact's personal data columns and their values</code></div>
<div class="line"><code class="plain">                writer.WriteObject(contact, contactColumns.Select(t =&gt; t.Item1).ToList());</code></div>
<div class="line"><code class="plain">                </code><code class="comments">// Closes the contact object tag</code></div>
<div class="line"><code class="plain">                writer.WriteEndSection();</code></div>
<div class="line"><code class="plain">            }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="comments">// Closes the &lt;OnlineMarketingData&gt; tag</code></div>
<div class="line"><code class="plain">            writer.WriteEndSection();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">            </code><code class="keyword">return</code><code class="plain"> writer.GetResult();</code></div>
<div class="line"><code class="plain">        }</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="keyword">private</code><code class="plain"> </code><code class="keyword">string</code><code class="plain"> GetTextContactData(List&lt;ContactInfo&gt; contacts)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">var</code><code class="plain"> writer = </code><code class="keyword">new</code><code class="plain"> TextPersonalDataWriter();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        writer.WriteStartSection(</code><code class="string">"On-line marketing data"</code><code class="plain">);</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="keyword">foreach</code><code class="plain"> (ContactInfo contact </code><code class="keyword">in</code><code class="plain"> contacts)</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">            writer.WriteStartSection(</code><code class="string">"Contact"</code><code class="plain">);</code></div>
<div class="line"><code class="plain">            </code><code class="comments">// Writes user-friendly descriptions of the contact's personal data columns and their values</code></div>
<div class="line"><code class="plain">            writer.WriteObject(contact, contactColumns);</code></div>
<div class="line"><code class="plain">            writer.WriteEndSection();</code></div>
<div class="line"><code class="plain">        }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="keyword">return</code><code class="plain"> writer.GetResult();</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
<p   
>The sample data collector processes the contact objects provided by the identity collector, and then uses the writer classes to create personal data text in the requested output format.</p>
    <h4 id="src-76846055_Implementingpersonaldatacollection-Registeringthecollectors" class="heading "><span>Registering the collectors</span></h4>
<p   
>To register the identity and data collectors, add a <a   href="k11/Initializing-modules-to-run-custom-code.htm">module class</a> under the custom project, and run the required initialization code:</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">using</code><code class="plain"> CMS;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataEngine;</code></div>
<div class="line"><code class="keyword">using</code><code class="plain"> CMS.DataProtection;</code></div>
<div class="line"> </div>
<div class="line"><code class="comments">// Registers the custom module into the system</code></div>
<div class="line"><code class="plain">[assembly: RegisterModule(</code><code class="keyword">typeof</code><code class="plain">(CustomDataProtectionModule))]</code></div>
<div class="line"> </div>
<div class="line"><code class="keyword">internal</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> CustomDataProtectionModule : Module</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="comments">// Module class constructor, the system registers the module under the name "CustomDataProtection"</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">public</code><code class="plain"> CustomDataProtectionModule()</code></div>
<div class="line"><code class="plain">        : </code><code class="keyword">base</code><code class="plain">(</code><code class="string">"CustomDataProtection"</code><code class="plain">)</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">    </code><code class="comments">// Contains initialization code that is executed when the application starts</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">protected</code><code class="plain"> </code><code class="keyword">override</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> OnInit()</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">base</code><code class="plain">.OnInit();</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="comments">// Adds the ContactIdentityCollector to the collection of registered identity collectors</code></div>
<div class="line"><code class="plain">        IdentityCollectorRegister.Instance.Add(</code><code class="keyword">new</code><code class="plain"> ContactIdentityCollector());</code></div>
<div class="line"> </div>
<div class="line"><code class="plain">        </code><code class="comments">// Adds the ContactDataCollector to the collection of registered personal data collectors</code></div>
<div class="line"><code class="plain">        PersonalDataCollectorRegister.Instance.Add(</code><code class="keyword">new</code><code class="plain"> ContactDataCollector());</code></div>
<div class="line"><code class="plain">    }</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
<p   
>Save all changes and <strong class=" ">Build</strong> the custom project.</p>
<p   
>You can now search for the email addresses of contacts on the <strong class=" ">Data portability</strong> and <strong class=" ">Right to access</strong> tabs in the <strong class=" ">Data protection</strong> application. If matching contacts exist in the system, the registered collectors return their data in XML or plain text format.</p>
<p   
><img  class="confluence-embedded-image confluence-content-image-border"  src="images/download/attachments/76846055/personal_data_search.png" alt="images/download/attachments/76846055/personal_data_search.png" width="500"  />
        <br/><span class="caption">Using the sample collectors to search for contact personal data in the Data protection application</span>
    </p>
        </div>

    </article>


               
            
    <footer id="ht-footer">
    <a href="#" id="ht-jump-top" class="sp-aui-icon-small sp-aui-iconfont-arrows-up"></a>
</footer></div>

<div>
    <div id="ht-mq-detect"></div>
</div>

    <script src="js/lunr.js"></script>
    <script src="js/lunr-extras.js"></script>
    <script src="assets/js/scroll-search.js"></script>

    <script src="assets/js/expand-macro.js"></script>
</body>
</html>
