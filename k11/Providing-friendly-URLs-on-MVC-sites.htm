<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Providing friendly URLs on MVC sites - Kentico 11 Documentation</title>

    
    <link rel="stylesheet" href="assets/css/expand-macro.css">

            <meta name="scroll-content-language-key" content="">
    
    <meta name="description" content="">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=2.0, user-scalable=yes">

<script type="text/javascript" src="assets/js/jquery.min.js"></script>
<script type="text/javascript" src="assets/js/jquery.scrollTo.min.js"></script>


<script type="text/javascript" src="assets/js/translate.js"></script>

<script type="text/javascript" src="assets/js/theme.main.js"></script>

    <script type="text/javascript" src="assets/js/iframeResizer.min.js"></script>

<link rel="stylesheet" href="assets/css/content-style.css">
    <link rel="stylesheet" href="assets/css/search.css">

<link rel="stylesheet" href="assets/css/theme.main.css">
<link rel="stylesheet" href="assets/css/theme.colors.css">

            <!-- ES5 support for older browsers, needed by lunr -->
        <script src="js/augment.js"></script> 
        <script id="worker" type="javascript/worker">

        startIndex = function() {
            idx = lunr.Index.load(lunrIndex);
            idx.pipeline.remove(lunr.stopWordFilter);
            postMessage({type: "setup-complete"});
        }

        onmessage = function (event) {
            var message = event.data;

            if ((message.type === 'setup') && message.baseUrl) {
                var url = message.baseUrl;
                importScripts(url + 'js/lunr.js');
                importScripts(url + 'js/lunr-extras.js');
                importScripts(url + 'js/lunr-index.js');
                importScripts(url + 'js/lunr-data.js');
                startIndex();
            }

            if (idx && (message.type === 'search-request') && message.query) {
                var searchWord = message.query;
                var results = idx.search(searchWord).map(function (result) {
                    return lunrData.filter(function (d) {
                        return d.id === parseInt(result.ref, 10)
                    })[0]
                });
                postMessage({type: 'search-results', results: results, query: searchWord, queryId: message.queryId});
            }
        }

    </script>
    </head>

<body pageid="68879260">

<div id="ht-loader">
    <noscript>
        <p style="width: 100%; text-align:center; position: absolute; margin-top: 200px;">This content cannot be displayed without JavaScript.<br>Please enable JavaScript and reload the page.</p>
    </noscript>
</div>

<div>
   	<header id="ht-headerbar">
    <div class="ht-headerbar-left">
        <a href="" id="ht-menu-toggle" class="sp-aui-icon-small sp-aui-iconfont-appswitcher"></a>
    </div>
    <div class="ht-headerbar-right">
            <div class="sp-aui-icon-small ht-search-index-loader ht-header-icon"></div>

        <div id="ht-search">
            <div class="ht-search-input" style="display: none;">
              	<a href="#" class="sp-aui-icon-small sp-aui-iconfont-remove ht-search-clear"></a>

                <form action="#" method="GET" id="search">
                    <input class="search-input" type="text" placeholder="Search" tabindex="-1" autocomplete="off" name="q" value="">
                    <input type="hidden" name="max" value="15" />
                    <input type="submit" style="display:none" tabindex="-4"/>
                </form>

                <a href="#" id="ht-search-button" class="ht-header-icon ht-header-icon-svg">
                                        <svg width="40px" height="40px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <g>
                            <path d="M29.572,28.802 L28.801,29.571 C28.515,29.857 28.187,30 27.816,30 C27.445,30 27.116,29.857 26.831,29.571 L21.392,24.134 C20.193,24.762 18.908,25.076 17.538,25.076 C15.396,25.076 13.605,24.348 12.163,22.892 C10.721,21.436 10,19.651 10,17.538 C10,15.397 10.721,13.605 12.163,12.163 C13.605,10.721 15.396,10 17.538,10 C19.651,10 21.434,10.721 22.89,12.163 C24.347,13.605 25.075,15.397 25.075,17.538 C25.075,18.937 24.761,20.222 24.132,21.393 L29.572,26.832 C29.857,27.118 30,27.446 30,27.817 C30,28.188 29.857,28.517 29.572,28.802 L29.572,28.802 Z M13.662,21.414 C14.732,22.485 16.024,23.02 17.538,23.02 C19.051,23.02 20.343,22.485 21.413,21.414 C22.484,20.344 23.019,19.052 23.019,17.538 C23.019,16.025 22.484,14.733 21.413,13.662 C20.343,12.592 19.051,12.056 17.538,12.056 C16.024,12.056 14.732,12.592 13.662,13.662 C12.591,14.733 12.056,16.025 12.056,17.538 C12.056,19.052 12.591,20.344 13.662,21.414 L13.662,21.414 Z"></path>
                        </g>
                    </svg>
              	</a>

                <div class="ht-search-dropdown ht-dropdown">
                    <ul></ul>
                </div>
            </div>
        </div>
    </div>
    </header>   	<aside id="ht-sidebar">
    <div class="ht-sidebar-content">
        <div class="ht-sidebar-content-scroll-container">
            <header class="ht-sidebar-header">
                <h1 class="ht-logo">
                    <span class="ht-logo-label">K11</span>
                    <img class="space-logo" src="global.logo" />
                </h1>
                <a href="Kentico-11-Documentation-Home.htm" class="ht-space-link">
                    <h2>Kentico 11 Documentation</h2>
                </a>
            </header>
                            <iframe id="ht-nav" src="toc.html?pageId=68880532"></iframe>
                <script>
                    $('iframe#ht-nav').iFrameResize(
                            { 'log': true, 'autoResize': true, 'heightCalculationMethod': 'lowestElement', 'checkOrigin': false });
                </script>
                    </div>
    </div>

</aside></div>

<div id="ht-wrap-container">

            
    <div id="ht-sidebar-dragbar">
    <div class="ht-sidebar-drag-handle">
        <span class="drag-handle-1"></span>
        <span class="drag-handle-2"></span>
        <span class="drag-handle-3"></span>
    </div>
</div>
    <article id="ht-content" class="ht-content">
        <header class="ht-content-header">
            <div id="ht-breadcrumb">
    <ul>
        <li><a href="Kentico-11-Documentation-Home.htm">Kentico 11 Documentation</a></li>
                                                                                                             <li><a href="" onclick="$('.shortcut').each(function(){$(this).removeClass('shortcut')}); $(this).parent().addClass('shortcut'); return false;">...</a> </li>
                                        <li class="shortcut"><a href="Developing-websites.htm">Developing websites</a></li>
                                                                                                         <li class="shortcut"><a href="Developing-sites-using-ASP.NET-MVC.htm">Developing sites using ASP.NET MVC</a></li>
                                                                                     <li><a href="Developing-MVC-applications.htm">Developing MVC applications</a></li>
                                                            </ul>
</div>            <h1 id="src-68880532"> <span>Providing friendly URLs on MVC sites</span></h1>
        </header>

        <div id="main-content" class="wiki-content sp-grid-section" data-index-for-search="true">
<p   
>Kentico MVC websites respond to incoming requests using standard ASP.NET routing. This means that page URLs are fully determined by the routes that you register into your MVC application&#39;s routing table.</p>
<p   
>To ensure that the Kentico administration application knows the correct live site URLs of pages, <a   href="k11/Specifying-the-URL-pattern-for-content-only-pages.htm">set URL patterns</a> for your <a   href="k11/Creating-content-only-page-types.htm">content only pages types</a>. The URL patterns need to match your MVC application&#39;s route templates.</p>
    <h3 id="src-68880532_ProvidingfriendlyURLsonMVCsites-Identifyingpagesbasedonapagealias" class="heading "><span>Identifying pages based on a page alias</span></h3>
<p   
>You can give content editors control over a part of the page URL by adding parameters into URL patterns. This allows you to include suitable human-readable keywords in URLs, and improve the site&#39;s <a  class="external-link" href="https://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a>.</p>
<p   
>By default, content only pages in Kentico provide a <a   href="k11/Setting-page-aliases-in-content-only-pages.htm">page alias</a> field for this purpose. The system automatically defines a page alias for every content only page, typically as a URL-safe version of its name in the content tree. Internally, the page alias is stored in the <i class=" ">NodeAlias</i> field (column) of each page and you can retrieve it using the <i class=" ">{%NodeAlias%} </i>macro expression (for example when <a   href="k11/Specifying-the-URL-pattern-for-content-only-pages.htm">specifying URL patterns of page types</a>).</p>
<p   
>Since page aliases are controlled by content editors, they can change over time. Also, page aliases are only guaranteed to be unique within a given sub-section level of the content tree (under the same parent page). For example, only pages stored directly in the <i class=" ">/Articles</i> section will have a unique page alias among each other. However, if one page is stored under <i class=" ">/Articles/March</i> and another page is stored under <i class=" ">/Articles/May</i>, they can both have the same page alias. This is why you may not want to use page aliases as the only identifier when displaying pages.</p>
    <div  class="confbox panel">
            <div class="title panel-header">On this page</div>
            <div class="panel-content">
<p   
></p>
<ul class="toc-indentation "><li class=" "><p   
><a   href="k11/#src-68880532_ProvidingfriendlyURLsonMVCsites-Identifyingpagesbasedonapagealias">Identifying pages based on a page alias</a></p>
<ul class="toc-indentation "><li class=" "><p   
><a   href="k11/#src-68880532_ProvidingfriendlyURLsonMVCsites-Identifyingmultilingualcontentwhenusingpagealiases">Identifying multilingual content when using page aliases</a></p>
</li></ul></li><li class=" "><p   
><a   href="k11/#src-68880532_ProvidingfriendlyURLsonMVCsites-Retrievingcontentonlypagesbasedonapagealias">Retrieving content only pages based on a page alias</a></p>
<ul class="toc-indentation "><li class=" "><p   
><a   href="k11/#src-68880532_ProvidingfriendlyURLsonMVCsites-ConfiguringMVCapplicationtodisplaypagesbasedonapagealias">Configuring MVC application to display pages based on a page alias</a></p>
</li></ul></li></ul><p   
></p>
        </div>
    </div>
    <div  class="confbox panel">
            <div class="title panel-header">Related pages</div>
            <div class="panel-content">
<ul class=" "><li class=" "><p   
><a   href="k11/Setting-page-aliases-in-content-only-pages.htm">Setting page aliases in content only pages</a></p>
</li><li class=" "><p   
><a   href="k11/Configuring-websites-for-SEO.htm">Configuring websites for SEO</a></p>
</li><li class=" "><p   
><a   href="k11/Setting-page-aliases.htm">Setting page aliases</a></p>
</li><li class=" "><p   
><a   href="k11/Generating-classes-for-Kentico-objects.htm">Generating classes for Kentico objects</a></p>
</li><li class=" "><p   
><a   href="k11/Defining-website-content-structure.htm">Defining website content structure</a></p>
</li></ul>        </div>
    </div>
<p   
>The <strong class=" ">recommended practice</strong> for identifying pages with a page alias value in the URL is to combine it with another unique identifier, such as the <strong class=" ">NodeGUID</strong>. This ensures that conflicts cannot occur and URLs remain valid even if a page&#39;s alias changes.</p>
    <div  class="confbox admonition admonition-info">
                            <span class="admonition-icon confluence-information-macro-icon"></span>
                <div class="admonition-body">
<p   
><strong class=" ">Note</strong>: <i class=" ">NodeGUID</i> values provide more stable URLs and links than <i class=" ">NodeIDs</i>, which may differ when hosting the same website on multiple instances (for example in environments that use <a   href="k11/Content-staging.htm">content staging</a>).</p>
        </div>
    </div>
<p   
>Typically, a page alias will be part of a macro expression that makes up the <a   href="k11/Specifying-the-URL-pattern-for-content-only-pages.htm">URL pattern</a> of content only page types. For example, a URL pattern could look like the following:<i class=" "> /Articles/{%NodeGUID%}/{%NodeAlias%}</i></p>
    <h4 id="src-68880532_ProvidingfriendlyURLsonMVCsites-Identifyingmultilingualcontentwhenusingpagealiases" class="heading "><span>Identifying multilingual content when using page aliases</span></h4>
<p   
>Page aliases remain the same for pages in different cultures. To be able to distinguish pages in different cultures, you can include a language prefix in your URL patterns (for example using the <i class=" ">{%DocumentCulture%}</i> macro), and/or create a custom page type field and use it instead of the page alias.</p>
    <h3 id="src-68880532_ProvidingfriendlyURLsonMVCsites-Retrievingcontentonlypagesbasedonapagealias" class="heading "><span>Retrieving content only pages based on a page alias</span></h3>
<p   
>If you use both a <i class=" ">NodeGUID</i> and page alias parameter in your URLs, use the <i class=" ">NodeGUID</i> identifier to retrieve specific pages in your code. The <a   href="k11/Generating-classes-for-Kentico-objects.htm">generated page type code</a> provides the required method by default.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">static</code><code class="plain"> DocumentQuery&lt;Article&gt; GetArticle(Guid nodeGuid, </code><code class="keyword">string</code><code class="plain"> cultureName, </code><code class="keyword">string</code><code class="plain"> siteName)</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">return</code><code class="plain"> GetArticles().OnSite(siteName).Culture(cultureName).WhereEquals(</code><code class="string">"NodeGUID"</code><code class="plain">, nodeGuid);</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
<p   
>For URLs that only contain a page alias parameter (<i class=" ">NodeAlias</i>), you need to make sure the page alias is always unique. You can, to a certain degree, ensure this uniqueness by limiting how content editors are allowed to create new pages:</p>
<ul class=" "><li class=" "><p   
><a   href="k11/Limiting-the-pages-users-can-create.htm#src-68880807_Limitingthepagesuserscancreate-Allowinguserstoplacecertainpagesunderapagetype">Allowed page type restrictions</a> &ndash; by defining which page types users can place under the current page type.</p>
</li><li class="confluence-link "><p   
><a   href="k11/Limiting-the-pages-users-can-create.htm#src-68880807_Limitingthepagesuserscancreate-Specifyingwhichpagesuserscancreateundercertainpaths">Page scope restrictions</a> &ndash; by specifying which page types users can use when creating new pages under specified paths.</p>
</li></ul><p   
>To retrieve pages using only the page alias<i class=" ">:</i></p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">static</code><code class="plain"> DocumentQuery&lt;Article&gt; GetArticle(</code><code class="keyword">string</code><code class="plain"> pageAlias)</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">return</code><code class="plain"> GetArticles().WhereEquals(</code><code class="string">"NodeAlias"</code><code class="plain">, pageAlias).TopN(1);</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
<p   
>You can also use the full <i class=" ">NodeAliasPath</i> to retrieve pages (for example <i class=" ">/Articles/March/On-Roasts </i>for an article named <i class=" ">On Roasts</i>). This approach can be useful in scenarios where you have a highly structure content tree, and can build the alias path in your code according to other URL parameters. The <a   href="k11/Generating-classes-for-Kentico-objects.htm">generated page type code</a> provides a method for retrieving pages based on the alias path by default.<br/></p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">static</code><code class="plain"> DocumentQuery&lt;Article&gt; GetArticle(</code><code class="keyword">string</code><code class="plain"> nodeAliasPath, </code><code class="keyword">string</code><code class="plain"> cultureName, </code><code class="keyword">string</code><code class="plain"> siteName)</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">    </code><code class="keyword">return</code><code class="plain"> GetArticles().OnSite(siteName).Culture(cultureName).Path(nodeAliasPath);</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
<p   
>See also: <a   href="k11/Retrieving-content-on-MVC-sites.htm">Retrieving content on MVC sites</a></p>
    <h4 id="src-68880532_ProvidingfriendlyURLsonMVCsites-ConfiguringMVCapplicationtodisplaypagesbasedonapagealias" class="heading "><span>Configuring MVC application to display pages based on a page alias</span></h4>
<p   
>The following example shows how you can configure your MVC application to display articles that have a URL based on a page alias, without using any additional identifiers. Note that the examples built on our <a  class="external-link" href="https://github.com/Kentico/Mvc">MVC Demo site</a>, which uses patterns like repositories to retrieve content and other implementation specifics.</p>
<ol class=" "><li class=" "><p   
>In your application&#39;s RouteConfig.cs file, create a route for accessing articles based on a page alias. For example:</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> RouteConfig</code></div>
<div class="line"><code class="plain">    {</code></div>
<div class="line"><code class="plain">        </code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">static</code><code class="plain"> </code><code class="keyword">void</code><code class="plain"> RegisterRoutes(RouteCollection routes)</code></div>
<div class="line"><code class="plain">        {</code></div>
<div class="line"><code class="plain">		...</code></div>
<div class="line"><code class="plain">			route = routes.MapRoute(</code></div>
<div class="line"><code class="plain">		 	name: </code><code class="string">"ArticleByPageAlias"</code><code class="plain">,</code></div>
<div class="line"><code class="plain">		 	url: </code><code class="string">"{culture}/Articles/{pageAlias}"</code><code class="plain">,</code></div>
<div class="line"><code class="plain">		 	defaults: </code><code class="keyword">new</code><code class="plain"> { culture = defaultCulture.Name, controller = </code><code class="string">"Articles"</code><code class="plain">, action = </code><code class="string">"ShowByPageAlias"</code><code class="plain"> }</code></div>
<div class="line"><code class="plain">			);</code></div>
<div class="line"><code class="plain">		...</code></div>
<div class="line"><code class="plain">	}</code></div>
<div class="line"><code class="plain">};</code></div>
</div>
    </div>
</li><li class=" "><p   
>Add a controller action for retrieving articles based on a page alias.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> ArticlesController : Controller</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">	</code><code class="comments">// GET: Articles/{pageAlias}</code></div>
<div class="line"><code class="plain">	</code><code class="keyword">public</code><code class="plain"> ActionResult ShowByPageAlias(</code><code class="keyword">string</code><code class="plain"> pageAlias)</code></div>
<div class="line"><code class="plain">	{</code></div>
<div class="line"><code class="plain">		</code><code class="keyword">var</code><code class="plain"> article = mArticleRepository.GetArticle(pageAlias);</code></div>
<div class="line"><code class="plain">		</code><code class="keyword">if</code><code class="plain"> (article == </code><code class="keyword">null</code><code class="plain">)</code></div>
<div class="line"><code class="plain">		{</code></div>
<div class="line"><code class="plain">			</code><code class="keyword">return</code><code class="plain"> HttpNotFound();</code></div>
<div class="line"><code class="plain">		}</code></div>
<div class="line"><code class="plain">		</code><code class="keyword">return</code><code class="plain"> View(</code><code class="string">"Show"</code><code class="plain">, article);</code></div>
<div class="line"><code class="plain">	}</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li><li class=" "><p   
>Create a method for generating article URLs based on a page alias.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">static</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> UrlHelperExtensions</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;summary&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// Generates a fully qualified URL to the action method handling the detail of given article.</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;/summary&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;param name="urlHelper"&gt;Url helper&lt;/param&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;param name="article"&gt;Article object to generate URL for.&lt;/param&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="keyword">public</code><code class="plain"> </code><code class="keyword">static</code><code class="plain"> </code><code class="keyword">string</code><code class="plain"> ForArticleByPageAlias(</code><code class="keyword">this</code><code class="plain"> UrlHelper urlHelper, Article article)</code></div>
<div class="line"><code class="plain">	{</code></div>
<div class="line"><code class="plain">		</code><code class="keyword">return</code><code class="plain"> urlHelper.Action(</code><code class="string">"ShowByPageAlias"</code><code class="plain">, </code><code class="string">"Articles"</code><code class="plain">, </code><code class="keyword">new</code></div>
<div class="line"><code class="plain">		{</code></div>
<div class="line"><code class="plain">			pageAlias = article.NodeAlias</code></div>
<div class="line"><code class="plain">		});</code></div>
<div class="line"><code class="plain">	}</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li><li class=" "><p   
>Retrieve articles based on a page alias. For example in repositories.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">interface</code><code class="plain"> IArticleRepository</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;summary&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// Returns the article with the specified page alias.</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;/summary&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;param name="pageAlias"&gt;The article page alias.&lt;/param&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;returns&gt;The article with the specified page alias, if found; otherwise, null.&lt;/returns&gt;</code></div>
<div class="line"><code class="plain">	Article GetArticle(</code><code class="keyword">string</code><code class="plain"> pageAlias);</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="keyword">public</code><code class="plain"> </code><code class="keyword">class</code><code class="plain"> KenticoArticleRepository : IArticleRepository</code></div>
<div class="line"><code class="plain">{</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;summary&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// Returns the article with the specified page alias.</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;/summary&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;param name="pageAlias"&gt;The article page alias.&lt;/param&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="comments">/// &lt;returns&gt;The article with the specified page alias, if found; otherwise, null.&lt;/returns&gt;</code></div>
<div class="line"><code class="plain">	</code><code class="keyword">public</code><code class="plain"> Article GetArticle(</code><code class="keyword">string</code><code class="plain"> pageAlias)</code></div>
<div class="line"><code class="plain">	{</code></div>
<div class="line"><code class="plain">		</code><code class="keyword">return</code><code class="plain"> ArticleProvider.GetArticles()</code></div>
<div class="line"><code class="plain">			.OnSite(mSiteName)</code></div>
<div class="line"><code class="plain">			.Culture(mCultureName)</code></div>
<div class="line"><code class="plain">			.WhereEquals(</code><code class="string">"NodeAlias"</code><code class="plain">, pageAlias)</code></div>
<div class="line"><code class="plain">			.LatestVersion(mLatestVersionEnabled)</code></div>
<div class="line"><code class="plain">			.Published(!mLatestVersionEnabled);</code></div>
<div class="line"><code class="plain">	}</code></div>
<div class="line"><code class="plain">...</code></div>
<div class="line"><code class="plain">}</code></div>
</div>
    </div>
</li><li class=" "><p   
>Work with article URLs in Views based on a page alias.</p>
    <div  class="confbox programlisting" style="counter-reset: scroll-code-numbering 1">
                <div xmlns="http://www.w3.org/1999/xhtml" class="defaultnew syntaxhighlighter scroll-html-formatted-code" data-linenumbers="false" data-firstline="1">
<div class="line"><code class="plain">&lt;a href=</code><code class="string">"@Url.ForArticleByPageAlias(article)"</code><code class="plain">&gt;@article.Fields.Title &lt;/a&gt;</code></div>
</div>
    </div>
</li></ol>        </div>

    </article>


               
            
    <footer id="ht-footer">
    <a href="#" id="ht-jump-top" class="sp-aui-icon-small sp-aui-iconfont-arrows-up"></a>
</footer></div>

<div>
    <div id="ht-mq-detect"></div>
</div>

    <script src="js/lunr.js"></script>
    <script src="js/lunr-extras.js"></script>
    <script src="assets/js/scroll-search.js"></script>

    <script src="assets/js/expand-macro.js"></script>
</body>
</html>
